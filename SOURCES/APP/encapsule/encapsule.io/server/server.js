// Encapsule/polytely test application server main.

const path = require('path');

const contentDirectory = path.resolve(path.join(__dirname, 'content'));

// ----------------------------------------------------------------------
const process = require('process');
function checkCurrentProcessMemoryUse() {
    var d = new Date().toString();
    console.log(d + " process memory check: " + JSON.stringify(process.memoryUsage()));
}
checkCurrentProcessMemoryUse();
// ----------------------------------------------------------------------

// Main server module dependencies.
const packageMeta = require('../package.json'); // relative to deploy
console.log("Starting " + packageMeta.name + " server process...");

const httpServerFilterFactory = require('holism').server;
const httpServerConfigDescriptor = require('./config');
const httpServerIntegrationsFactory = require('./integrations');

const viewStoreFactory = require('../common/model/view-store-constructor');
const appSiteStaticMetadataDeclaration = require('../common/model/app-site-static-metadata-declaration');

console.log("Initializing document library content graph model...");
const contentDigraphGeneratorFilter = require('./features/content-digraph');

var filterResponse = contentDigraphGeneratorFilter.request({ loadDirectory: contentDirectory });
if (filterResponse.error)
    throw new Error(filterResponse.error);

var contentDigraph = filterResponse.result;

const contentDigraphProjector = require('./features/content-digraph/content-digraph-view-projector-filter');
var projectResponse = contentDigraphProjector.request({
    mountURI: "/",
    mountContentNodeID: "home.markdown",
    mountRank: 0,
    contentDigraph: contentDigraph
});
if (projectResponse.error)
    throw new Error(projectResponse.error);

var holismBindings = projectResponse.result;
// console.log("Holism configuration bindings generated by the document library:");
// console.log(JSON.stringify(holismBindings, undefined, 4));

// Merge the application's static metadata and service registrations with
// the registrations projected from the content digraph model.
for (var key in holismBindings.pageMenuRegistrations)
    appSiteStaticMetadataDeclaration.pages[key] = holismBindings.pageMenuRegistrations[key];
for (var serviceRegistration of holismBindings.serviceRegistrations)
    httpServerConfigDescriptor.services.push(serviceRegistration);

console.log("Initializing page view graph model...");
var factoryResponse = viewStoreFactory.request(appSiteStaticMetadataDeclaration);
if (factoryResponse.error)
    throw new Error(factoryResponse.error);
var viewStore = factoryResponse.result;

// Redis
const storageSubsystem = require('./storage');

var serverAppStateContext = {
    menuSubsystem: {
        mouseMode: 'out',
        mouseTargetURI: '/',
    },
    viewStore: viewStore,
    contentDigraph: contentDigraph,
    storageAPI: storageSubsystem,
};

// Construct a set of Encapsule/arccore.filter-derived objects that abstract access to application layer data
// and function resources that are needed by the Encapsule/holism HTTP server filter instance during runtime.
console.log("Initializing application/application server integration filters...");
const httpServerIntegrations = httpServerIntegrationsFactory(serverAppStateContext);

// Call the HTTP server filter factory (itself a filter) passing a configuration
// object that customizes the behavior of the constructed HTTP server filter.
console.log("Initializing holism application server instance...");
var filterResponse = httpServerFilterFactory.create({
    name: packageMeta.author.name + '/' + packageMeta.name,
    description: packageMeta.description,
    version: packageMeta.version,
    config: httpServerConfigDescriptor,
    integrations: httpServerIntegrations
});

// Ensure that no error occurred in the factory.
if (filterResponse.error) {
    // The HTTP server filter didn't get constructed correctly.
    throw new Error(filterResponse.error);
}

// Dereference the HTTP server filter.
var httpServer = filterResponse.result;

// Start the HTTP server by specifying the listening port.
console.log("Starting holism app server instance...");
httpServer.listen(4771);

// Process remains active while the server is holding active network sockets.
checkCurrentProcessMemoryUse();
setInterval(checkCurrentProcessMemoryUse, 60000); // check and dump memory usage every 60s.

