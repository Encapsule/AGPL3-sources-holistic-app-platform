# https://www.gnu.org/software/make/manual/make.html
# https://timmurphy.org/2015/09/27/how-to-get-a-makefile-directory-path/
# https://stackoverflow.com/questions/33126425/how-to-remove-the-last-trailing-backslash-in-gnu-make-file
# $(patsubst %\,%,$(__PATHS_FEATURE))

DIR_ROOT=$(patsubst %/,%,$(dir $(realpath $(firstword $(MAKEFILE_LIST)))))
$(info ***** Encapsule/holistic application Makefile *****)
$(info DIR_ROOT is $(DIR_ROOT))

DIR_MODULES=$(DIR_ROOT)/node_modules
DIR_TOOLBIN=$(DIR_MODULES)/.bin

DIR_PROJECT=$(DIR_ROOT)/PROJECT/PLATFORM
DIR_PROJECT_ASSETS=$(DIR_PROJECT)/ASSETS
DIR_PROJECT_BUILD=$(DIR_PROJECT)/BUILD

TOOL_GEN_REPO_BUILDTAG=$(DIR_PROJECT)/generate-package-build-manifest.js

TOOL_ESLINT=$(DIR_TOOLBIN)/eslint
TOOL_BABEL=$(DIR_TOOLBIN)/babel
TOOL_WEBPACK=$(DIR_TOOLBIN)/webpack-cli
TOOL_WEBPACK_FLAGS=--display-modules --verbose --debug --progress --colors --devtool source-map --output-pathinfo

DIR_SOURCES=$(DIR_ROOT)/SOURCES
DIR_SOURCES_ASSETS=$(DIR_SOURCES)/ASSETS
DIR_SOURCES_CLIENT=$(DIR_SOURCES)/CLIENT
DIR_SOURCES_COMMON=$(DIR_SOURCES)/COMMON
DIR_SOURCES_SERVER=$(DIR_SOURCES)/SERVER

DIR_BUILD=$(DIR_ROOT)/BUILD
DIR_BUILD_PHASE1=$(DIR_BUILD)/phase1-transpile
DIR_BUILD_PHASE2=$(DIR_BUILD)/phase2-webpack

DIR_DISTS=$(DIR_ROOT)/DISTS

default:
	@echo ================================================================
	@echo Please specify Makefile target\(s\) to evaluate as arguments to \'make\'.
	@echo Type \'make\' and use shell auto-complete to enumerate Makefile targets.
	@echo ================================================================

# ================================================================
# Environment
#

env_initialize:
	@echo monorepo_initialize target starting...
	yarn install --verbose
	@echo monorepo_initialize target complete.

env_reinitialize: env_clean_cache env_initialize
	@echo Your local yarn cache has been repopulated with fresh packages from the Internet. And the contents of $(DIR_MODULES) has been rewritten.

env_clean:
	@echo monorepo_clean target starting...
	echo rm -rf $(DIR_MODULES)
	@echo monorepo_clean target complete.

env_clean_cache: env_clean
	@echo monorepo_nuke target starting...
	yarn cache clean
	@echo monorepo_nuke target complete.

env_generate_build_tag:
	@echo generate_build_info target starting...
	$(TOOL_GEN_REPO_BUILDTAG) > $(DIR_BUILD)/holistic.json
	@echo generate_build_info target complete.


# ================================================================
# Utility
#

clean: source_packages_clean
	@echo Clean operation complete.

scrub: source_packages_clean dist_packages_clean
	@echo Scrub operation complete.

nuke: source_packages_clean dist_packages_clean env_clean_cache
	@echo Nuke operation complete.


build_app:
#	PHASE0 - create a copy of the SOURCES directory structure.
	mkdir -p $(DIR_BUILD_PHASE1)
	cp -rv $(DIR_SOURCES)/* $(DIR_BUILD_PHASE1)
#	PHASE1 - transpile modules from SOURCES into PHASE1 directory overwriting PHASE0 clone copies.
	$(TOOL_BABEL) --config-file $(DIR_ROOT)/.babelrc --out-dir $(DIR_BUILD_PHASE1) --keep-file-extension --verbose $(DIR_SOURCES)
#	PHASE2 - create application server and client bundles via webpack.
#	https://stackoverflow.com/questions/25956937/how-to-build-minified-and-uncompressed-bundle-with-webpack
	$(TOOL_WEBPACK) $(TOOL_WEBPACK_FLAGS) --config $(DIR_ROOT)/webpack.config.app.server.js
	$(TOOL_WEBPACK) $(TOOL_WEBPACK_FLAGS) --config $(DIR_ROOT)/webpack.config.app.client.js



#	rm -rf  $(DIR_BUILD_APP_ENCAPSULE_PHASE1)/content
#	mkdir -p  $(DIR_BUILD_APP_ENCAPSULE_PHASE1)/content
#	cp -Rp $(DIR_SOURCES_APP_ENCAPSULE)/content/* $(DIR_BUILD_APP_ENCAPSULE_PHASE1)/content/

#	cp -p $(DIR_SOURCES_APP_ENCAPSULE)/server/integrations/*.hbs $(DIR_BUILD_APP_ENCAPSULE_PHASE1)/server/integrations/
#	$(TOOL_GEN_PACKAGE_MANIFEST) --packageName app_encapsule_io > $(DIR_BUILD_APP_ENCAPSULE_PHASE1)/package.json
#	cp -Rp $(DIR_BUILD_APP_ENCAPSULE_PHASE1)/content $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/

#	rm -rf $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/client
#	mkdir -p $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/client

#	cp -p $(DIR_SOURCES_APP_ENCAPSULE)/client/index.html $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/client/index.html
#	cp -Rp $(DIR_SOURCES_APP_ENCAPSULE)/client/css $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/client/css
#	cp -Rp $(DIR_SOURCES_APP_ENCAPSULE)/client/fonts $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/client/fonts
#	cp -Rp $(DIR_SOURCES_APP_ENCAPSULE)/client/images $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/client/images
#	cp -Rp $(DIR_SOURCES_APP_ENCAPSULE)/server/robots.txt $(DIR_BUILD_APP_ENCAPSULE_PHASE2)/robots.txt
