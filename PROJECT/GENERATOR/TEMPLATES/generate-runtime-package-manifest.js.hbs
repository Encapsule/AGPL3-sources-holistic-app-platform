#!/usr/bin/env node

// THIS FILE IS CODE-GENERATED
// {{author}} {{name}} v{{version}}-{{codename}} {{buildID}} {{buildSource}}
//

(function() {

    const path = require("path");
    const arctoolslib = require("@encapsule/arctools");
    const program = arctoolslib.commander;
    const appServiceRuntimeDependencies = require("./app-service-runtime-dependencies.json");

    program
        .name("generate-runtime-package-manifest")
        .description("Generate runtime package manifest (package.json) from application build manifest (app-build.json).")
        .version("{{version}}")
        .option('--appBuildManifest <manifestPath>', 'Use <manifestPath> to select the location of the input app-build.json.')
        .parse(process.argv);

    if (!program.appBuildManifest) {
        console.error("Missing --appBuildManifest option value.");
        process.exit(1);
    }

    var filterResponse = arctoolslib.jsrcFileLoaderSync.request(program.appBuildManifest);
    if (filterResponse.error) {
        throw new Error("Invalid --appBuildManifest value. " + filterResponse.error);
    }

    const applicationBuildManifest = filterResponse.result.resource;


    // ================================================================
    // package.json generation

    const packageRuntimeManifest = { ...applicationBuildManifest.app };
    packageRuntimeManifest.name = `${applicationBuildManifest.app.name}-service-image`;
    packageRuntimeManifest.description = `${packageRuntimeManifest.name} is an npm package containing the pre-built image of the ${applicationBuildManifest.app.name} holistic application service. See the included README.md for additional information.`;
    packageRuntimeManifest.dependencies = appServiceRuntimeDependencies;
    packageRuntimeManifest.scripts = { start: "node ./SERVER/nodejs-service-runtime.js" };

    // Serialize the manifest as JSON and write to stdout.
    console.log(JSON.stringify(packageRuntimeManifest, undefined, 2));

})();

