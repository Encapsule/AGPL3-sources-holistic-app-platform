{
  "error": null,
  "result": {
    "XkT3fzhYT0izLU_P2WF54Q": {
      "summary": {
        "requests": 61,
        "runnerStats": {
          "dispatched": [
            "197ZsgbfRRGGMWqhwmaBDg",
            "4nw2B9oVQYm1ZspZqotrRA",
            "5fzWl6WhTEaG7EzC1AgITw",
            "6TPB7tz4TQaGJYaRAhl_gQ",
            "8167V4JrSc-47BMNONdxvQ",
            "8UqseWhbQLSnDnKqu6eVpA",
            "AhfYIOp_RQmS-a37emkj9A",
            "ChcuyPLCSQCsICTprPzfog",
            "DipB21oZR5ihBCYESC5HWw",
            "ElMglky8TBGkzkd6W4690A",
            "ErHlg9R3SSaonNJr4mBi-g",
            "FxMOqQPARcGcMZ24x2tq7A",
            "Gli8ff6FR22PPXjn9epRAQ",
            "H2zMrBw4TBie5A2mwH4BRg",
            "HwB8EphzRkSG7AeoISMctQ",
            "HxrzwXDSTlWXQJ5XAMhgtA",
            "IRyR4YazRuWiZp9Rzj6-WA",
            "KGh0Va-oTXKPUZmnDG4QPQ",
            "LC56jkxeQJ2mgWfwGklLEQ",
            "Pe4ks7bQQ9KQee1T8qTRHw",
            "QvEwWTkbT8G_SQsmWmg2zQ",
            "SHneUm5GTDO--xVSUpL92Q",
            "T-apDENPTAO6iQShA-2qBQ",
            "TenISiGcTG-06LhZuBzJNQ",
            "UHqiKKLkTMmLBGXI4lRxEA",
            "VwWYI4ReSTSfqSnoVXXC-w",
            "VxYuiGoHRfuKRHp7PBik7Q",
            "X5zbSBkaQeG6Wft5cGVRwg",
            "YdzP0ZKMTme24BBJcyKevA",
            "ZbwxkWJgTEKjxXpYX0_h7Q",
            "Zu13opLlRwSmU2LHvEAHnA",
            "ak8rhTiORTWXueau74RlHA",
            "boPENwtqTDiqX_c6CYfaPw",
            "bx_3DRETSe6zr-Dz_W-COQ",
            "cQ3Z1fhsTICqkY3uKQXaFQ",
            "d7uW2Me4RjqeX3a2NjOodQ",
            "dcSJk7BZQ3qnlrgivMayUQ",
            "dirl1VuNQCmBrzbJXWMTtA",
            "fNpBNE0uQ2GJWunuKe3_lA",
            "fzc39RvNTLmHF5UNn_-Fng",
            "fzuITg9BQbyV7jNv39Gv6w",
            "gwtkQR51TYm93K32K6QHNA",
            "iQ5RngZ0QNyH67mVrlwo4w",
            "juolo4dqSgKdLEYLoHJJ1Q",
            "l0vKq8yVRsm73LoMev8ItA",
            "l2lMJRfpR7SwIMxriD-pRQ",
            "l_P652EhQU6_z7afrV-PMQ",
            "mm9htD2iSuyVAPm9SFv-qw",
            "nCoUIS0RTlmuKUSpimee7A",
            "np4M1LDWSyeNXOmFYJulhA",
            "pTaZUV0vTOGhaNOVD0sXLQ",
            "pUxcxo9STsG3OMWWrREHoQ",
            "rFcPAwRGRsOlJSXBZOdwNA",
            "rxFiX7H-TDG0GsxqtRekoA",
            "sBB6rshGQu2f7S5rA2x9eg",
            "sO15Cox_SVqcCgyrOllAwQ",
            "stn1B2JRSkOkFxuyejzGjQ",
            "uZN6-qpIQO6CkwmLDWtMCw",
            "waM_L9rTT6ySTY4ja__K3g",
            "zUoUas3CTj2HLDfpNf4NTw"
          ],
          "rejected": [
            "zxKqk_YOTme-e0AExJUhmg"
          ],
          "errors": [
            "UHqiKKLkTMmLBGXI4lRxEA",
            "ak8rhTiORTWXueau74RlHA",
            "cQ3Z1fhsTICqkY3uKQXaFQ"
          ]
        },
        "runnerEval": {
          "neutral": [],
          "pass": {
            "expected": [],
            "actual": []
          },
          "fail": {
            "expected": [],
            "actual": []
          }
        }
      },
      "harnessEvalDescriptors": [
        {
          "dosRgxmiR66ongCbJB78ow": {
            "000000000000000000": {
              "zxKqk_YOTme-e0AExJUhmg": {
                "harnessRequest": {
                  "id": "zxKqk_YOTme-e0AExJUhmg",
                  "name": "Bad message test #1",
                  "description": "Send a message that we know there's no harness registered to handle.",
                  "vectorRequest": {
                    "bogusMessage": {
                      "message": "Hello, is anyone there?"
                    }
                  }
                },
                "harnessResponse": {
                  "error": "Runner cannot locate a harness filter to process this request type: Filter [2gJUyOugIdK5gEqhu1OWug::Discriminator Filter] failed while performing main operation. Unrecognized request format. Request signature must match one of filter set {[DUGjLpXu6s7PYw43guW2jg::Harness Proxy::<F1zguurrS9-fcdvLk7TCrg::Holodeck Runner Test Harness #1>], [SaPQhpVtKhQvT4xWAqtmXg::Harness Proxy::<X2q-YtvCTrWx7csHq8R8Tw::TransitionOperator Harness>], [V4rhwuR97Sdl5q9h1CIHTg::Harness Proxy::<0xHlX_WKQ3y-3CFQ0DDx1w::ControllerAction Harness>], [XsVRVdrxTNvzPj7OQrDwAg::Harness Proxy::<mC3pPO5wS3SxvhgZgMjsJQ::ObservableProcessModel Harness>], [YKGvFlRJKQNp0UxWWe4jwA::Harness Proxy::<EmU3C0AASciHnBpz-xMmgA::Holodeck Runner Test Harness #3>], [bvj2u51Uw5_SD1TRZNpwXA::Harness Proxy::<54MiSgQdSiukMX4fIZJimg::ObservableProcessControler Harness>], [kFKvLRgHKYYDMExB7PQjIA::Harness Proxy::<d8zMijUSTZiQlbk__HX6gA::Holodeck Runner Test Harness #2>], [z1d1czVQoTY7MjDsy97Paw::Harness Proxy::<z8JzdpB0RcC-_AlfPQRxdQ::Holodeck Runner Test #4>], [zwXafDUZ8sI7qTaRy-pjLg::Harness Proxy::<TLUZ3YPUTXK8fXhh6t3-Ew::Holodeck Runner Test #5>]}."
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "DUGjLpXu6s7PYw43guW2jg": {
              "IRyR4YazRuWiZp9Rzj6-WA": {
                "harnessRequest": {
                  "id": "IRyR4YazRuWiZp9Rzj6-WA",
                  "name": "Call test harness #1",
                  "description": "Attempt to call the harness-filter-1 test harness plug-in.",
                  "vectorRequest": {
                    "testMessage1": "This request should get routed to harness-filter-1."
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "F1zguurrS9-fcdvLk7TCrg": {
                        "IRyR4YazRuWiZp9Rzj6-WA": "This request should get routed to harness-filter-1."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "kFKvLRgHKYYDMExB7PQjIA": {
              "sBB6rshGQu2f7S5rA2x9eg": {
                "harnessRequest": {
                  "id": "sBB6rshGQu2f7S5rA2x9eg",
                  "name": "Call test harness #2",
                  "description": "Attempt to call the harness-filter-2 test harness plug-in.",
                  "vectorRequest": {
                    "testMessage2": "This request should get routed to harness-filter-2."
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "d8zMijUSTZiQlbk__HX6gA": {
                        "sBB6rshGQu2f7S5rA2x9eg": "This request should get routed to harness-filter-2."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "YKGvFlRJKQNp0UxWWe4jwA": {
              "ak8rhTiORTWXueau74RlHA": {
                "harnessRequest": {
                  "id": "ak8rhTiORTWXueau74RlHA",
                  "name": "Call test harness #3 (incomplete message)",
                  "description": "Attempt to call the harness-filter-3 test harness plug-in w/incomplete request mesage.",
                  "vectorRequest": {
                    "testMessage3": {
                      "superflous": [
                        "This array is not included in the harness-filter-3 test harness input spec so it's simply clipped off by the harness input filter stage and never passed to the harness bodyFunction.",
                        "We know that our harness filter test examples all have a fairly predictable harnessRequest signature. Here we use knowledge of how arccore.discriminator works inside to craft a",
                        "a test that routes through discriminator to select the harness. But, when called the harness rejects the harnessRequest because although it was sufficient to get through arccore.discrminator,",
                        "(because after seeing testMessage3 discrminator knows it can only be harness-filter-3) it was nonetheless insufficiently complete to pass harness input spec."
                      ]
                    }
                  }
                },
                "harnessResponse": {
                  "error": "The harness filter registered to handle this message type rejected your request with an error: Filter [YKGvFlRJKQNp0UxWWe4jwA::Harness Proxy::<EmU3C0AASciHnBpz-xMmgA::Holodeck Runner Test Harness #3>] failed while normalizing request input. Error at path '~.vectorRequest.testMessage3.message': Value of type 'jsUndefined' not in allowed type set [jsString].",
                  "result": null
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "YKGvFlRJKQNp0UxWWe4jwA": {
              "cQ3Z1fhsTICqkY3uKQXaFQ": {
                "harnessRequest": {
                  "id": "cQ3Z1fhsTICqkY3uKQXaFQ",
                  "name": "Call test harness #3 (complete message signalling force error)",
                  "description": "Attempt to call harness-filter-3 signalling that its implementation should return a response.error.",
                  "vectorRequest": {
                    "testMessage3": {
                      "message": "error"
                    }
                  }
                },
                "harnessResponse": {
                  "error": "The harness filter registered to handle this message type rejected your request with an error: Filter [YKGvFlRJKQNp0UxWWe4jwA::Harness Proxy::<EmU3C0AASciHnBpz-xMmgA::Holodeck Runner Test Harness #3>] failed while performing main operation. Error attempting to dispatch plug-in harness filter [EmU3C0AASciHnBpz-xMmgA::Holodeck Runner Test Harness #3]: Filter [EmU3C0AASciHnBpz-xMmgA::Holodeck Runner Test Harness #3] failed while performing main operation. We were asked to report an error."
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "YKGvFlRJKQNp0UxWWe4jwA": {
              "LC56jkxeQJ2mgWfwGklLEQ": {
                "harnessRequest": {
                  "id": "LC56jkxeQJ2mgWfwGklLEQ",
                  "name": "Call test harness #3 (valid message)",
                  "description": "Attempt to call harness-filter-3 with a valid message.",
                  "vectorRequest": {
                    "testMessage3": {
                      "message": "This message should be delivered and returned by harness-filter-3."
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "EmU3C0AASciHnBpz-xMmgA": {
                        "LC56jkxeQJ2mgWfwGklLEQ": "This message should be delivered and returned by harness-filter-3."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "z1d1czVQoTY7MjDsy97Paw": {
              "UHqiKKLkTMmLBGXI4lRxEA": {
                "harnessRequest": {
                  "id": "UHqiKKLkTMmLBGXI4lRxEA",
                  "name": "Call test harness #4",
                  "description": "Call test harness #4 which is hardwired to throw an exception. This confirms baseline for holodeck's harness factory's handling of bad developer input.",
                  "vectorRequest": {
                    "testMessage4": {
                      "thisIsOpqaue": "so i can do wahtever i want... and it doesn't matter anyway. the harness is hard-wired to explode."
                    }
                  }
                },
                "harnessResponse": {
                  "error": "The harness filter registered to handle this message type rejected your request with an error: Filter [z1d1czVQoTY7MjDsy97Paw::Harness Proxy::<z8JzdpB0RcC-_AlfPQRxdQ::Holodeck Runner Test #4>] failed while performing main operation. Error attempting to dispatch plug-in harness filter [z8JzdpB0RcC-_AlfPQRxdQ::Holodeck Runner Test #4]: Unexpected harness filter exception: 'Oh, snap!'."
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "gwtkQR51TYm93K32K6QHNA": {
                "harnessRequest": {
                  "id": "gwtkQR51TYm93K32K6QHNA",
                  "name": "Undefined constructor request",
                  "description": "Send nothing (undefined) to OPC constructor.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {}
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "gwtkQR51TYm93K32K6QHNA": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [unspecified::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject].",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [unspecified::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject]."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "iQ5RngZ0QNyH67mVrlwo4w": {
                "harnessRequest": {
                  "id": "iQ5RngZ0QNyH67mVrlwo4w",
                  "name": "Barely defined constructor request",
                  "description": "Send nothing but an empty object to OPC constructor.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {}
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "iQ5RngZ0QNyH67mVrlwo4w": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [unspecified::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while normalizing request input. Error at path '~.id': Value of type 'jsUndefined' not in allowed type set [jsString].",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [unspecified::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while normalizing request input. Error at path '~.id': Value of type 'jsUndefined' not in allowed type set [jsString]."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "QvEwWTkbT8G_SQsmWmg2zQ": {
                "harnessRequest": {
                  "id": "QvEwWTkbT8G_SQsmWmg2zQ",
                  "name": "Minimal constructor request #1: Invalid ID",
                  "description": "Test basic constructor request variant #1 by passing a bad IRUT as the ID.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "fail"
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "QvEwWTkbT8G_SQsmWmg2zQ": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [fail::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Please supply a valid IRUT. Or, use the special 'demo' keyword to have a one-time-use random IRUT assigned. Expected 22-character string. Found 4-character string instead.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [fail::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Please supply a valid IRUT. Or, use the special 'demo' keyword to have a one-time-use random IRUT assigned. Expected 22-character string. Found 4-character string instead."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "l_P652EhQU6_z7afrV-PMQ": {
                "harnessRequest": {
                  "id": "l_P652EhQU6_z7afrV-PMQ",
                  "name": "Minimal constructor valid ID all default inputs",
                  "description": "Confirm default construction variant #1",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "l_P652EhQU6_z7afrV-PMQ"
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "l_P652EhQU6_z7afrV-PMQ": {
                          "opcToJSON": {
                            "id": "l_P652EhQU6_z7afrV-PMQ",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [l_P652EhQU6_z7afrV-PMQ::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [l_P652EhQU6_z7afrV-PMQ::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "juolo4dqSgKdLEYLoHJJ1Q": {
                "harnessRequest": {
                  "id": "juolo4dqSgKdLEYLoHJJ1Q",
                  "name": "Miniaml constructor w/minimal valid ocdTemplateSpec",
                  "description": "Confirm minimal ocdTemplateSpec same as default construction.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "juolo4dqSgKdLEYLoHJJ1Q",
                            "name": "Valid ID w/minimal but valid custom opaque ocd template spec.",
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "juolo4dqSgKdLEYLoHJJ1Q": {
                          "opcToJSON": {
                            "id": "juolo4dqSgKdLEYLoHJJ1Q",
                            "name": "Valid ID w/minimal but valid custom opaque ocd template spec.",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [juolo4dqSgKdLEYLoHJJ1Q::Valid ID w/minimal but valid custom opaque ocd template spec.] Observable Controller Data Store",
                              "____description": "OPC [juolo4dqSgKdLEYLoHJJ1Q::Valid ID w/minimal but valid custom opaque ocd template spec.] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "dirl1VuNQCmBrzbJXWMTtA": {
                "harnessRequest": {
                  "id": "dirl1VuNQCmBrzbJXWMTtA",
                  "name": "Invalid OCD template spec #1",
                  "description": "OCD template spec must be a valid filter spec.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "dirl1VuNQCmBrzbJXWMTtA",
                            "ocdTemplateSpec": {}
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "dirl1VuNQCmBrzbJXWMTtA": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [dirl1VuNQCmBrzbJXWMTtA::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. While attempting to verify and normalize developer-defined request.ocdTemplateSpec: Filter factory failure: While examining data namespace '~.inputFilterSpec': Missing required '____accept', '____types', or '_____opaque' type constraint directive.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [dirl1VuNQCmBrzbJXWMTtA::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. While attempting to verify and normalize developer-defined request.ocdTemplateSpec: Filter factory failure: While examining data namespace '~.inputFilterSpec': Missing required '____accept', '____types', or '_____opaque' type constraint directive."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "ChcuyPLCSQCsICTprPzfog": {
                "harnessRequest": {
                  "id": "ChcuyPLCSQCsICTprPzfog",
                  "name": "Invalid OCD template spec #2",
                  "description": "OCD template spec ~ namespace is not allowed to use any other filter spec directives other than ____types.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "ChcuyPLCSQCsICTprPzfog",
                            "ocdTemplateSpec": {
                              "____notAQunderscoreDirective": true
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "ChcuyPLCSQCsICTprPzfog": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [ChcuyPLCSQCsICTprPzfog::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. While attempting to verify and normalize developer-defined request.ocdTemplateSpec: Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____notAQunderscoreDirective' not allowed in declaration.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [ChcuyPLCSQCsICTprPzfog::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. While attempting to verify and normalize developer-defined request.ocdTemplateSpec: Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____notAQunderscoreDirective' not allowed in declaration."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "ZbwxkWJgTEKjxXpYX0_h7Q": {
                "harnessRequest": {
                  "id": "ZbwxkWJgTEKjxXpYX0_h7Q",
                  "name": "Invliad OCD template spec #3",
                  "description": "OCD template spec ~ namespace is not allowed to use the ____opaque directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "ZbwxkWJgTEKjxXpYX0_h7Q",
                            "ocdTemplateSpec": {
                              "____opaque": true
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "ZbwxkWJgTEKjxXpYX0_h7Q": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [ZbwxkWJgTEKjxXpYX0_h7Q::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [ZbwxkWJgTEKjxXpYX0_h7Q::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "ElMglky8TBGkzkd6W4690A": {
                "harnessRequest": {
                  "id": "ElMglky8TBGkzkd6W4690A",
                  "name": "Invalid OCD template spec #4",
                  "description": "OCD template spec ~ namespace is not allowed to use the ____accept directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "ElMglky8TBGkzkd6W4690A",
                            "ocdTemplateSpec": {
                              "____accept": "jsObject"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "ElMglky8TBGkzkd6W4690A": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [ElMglky8TBGkzkd6W4690A::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [ElMglky8TBGkzkd6W4690A::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "waM_L9rTT6ySTY4ja__K3g": {
                "harnessRequest": {
                  "id": "waM_L9rTT6ySTY4ja__K3g",
                  "name": "Invalid OCD template spec #5",
                  "description": "OCD template namespace ~ is not allowed to use an array value for the ____types directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "waM_L9rTT6ySTY4ja__K3g",
                            "ocdTemplateSpec": {
                              "____types": [
                                "jsObject"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "waM_L9rTT6ySTY4ja__K3g": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [waM_L9rTT6ySTY4ja__K3g::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [waM_L9rTT6ySTY4ja__K3g::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "X5zbSBkaQeG6Wft5cGVRwg": {
                "harnessRequest": {
                  "id": "X5zbSBkaQeG6Wft5cGVRwg",
                  "name": "Invalid OCD template spec #6",
                  "description": "OCD template namespace ~ is not allowed to specify any value other that jsObject for ____types directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "X5zbSBkaQeG6Wft5cGVRwg",
                            "ocdTemplateSpec": {
                              "____types": "jsString"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "X5zbSBkaQeG6Wft5cGVRwg": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [X5zbSBkaQeG6Wft5cGVRwg::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [X5zbSBkaQeG6Wft5cGVRwg::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "nCoUIS0RTlmuKUSpimee7A": {
                "harnessRequest": {
                  "id": "nCoUIS0RTlmuKUSpimee7A",
                  "name": "Invalid OCD template spec #7",
                  "description": "OCD template namespace ~ is only allowed to use one quanderscore directive, ____types.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "nCoUIS0RTlmuKUSpimee7A",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "____defaultValue": {}
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "nCoUIS0RTlmuKUSpimee7A": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [nCoUIS0RTlmuKUSpimee7A::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace.",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [nCoUIS0RTlmuKUSpimee7A::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Rejecting OCD spec template. The root namespace must be declared with literally just the ____types: \"jsObject\" quanderscore directive; no other directives are allowed in ~ namespace."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "FxMOqQPARcGcMZ24x2tq7A": {
                "harnessRequest": {
                  "id": "FxMOqQPARcGcMZ24x2tq7A",
                  "name": "Invalid OCD template spec #7",
                  "description": "Test our ability to extend the OPC-managed root namespace, ~.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "FxMOqQPARcGcMZ24x2tq7A",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "FxMOqQPARcGcMZ24x2tq7A": {
                          "opcToJSON": {
                            "id": "FxMOqQPARcGcMZ24x2tq7A",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [FxMOqQPARcGcMZ24x2tq7A::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [FxMOqQPARcGcMZ24x2tq7A::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            },
                            "ocdi": {
                              "testString": "Please specify a value for ~.testString."
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "fzc39RvNTLmHF5UNn_-Fng": {
                "harnessRequest": {
                  "id": "fzc39RvNTLmHF5UNn_-Fng",
                  "name": "Valid ID, ocdTemplateSpec, data",
                  "description": "Valid OPC instance + dev ocdTemplateSpec + invalid valid init data",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "fzc39RvNTLmHF5UNn_-Fng",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            },
                            "ocdInitData": {
                              "testString": 3.1415926536
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "fzc39RvNTLmHF5UNn_-Fng": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [fzc39RvNTLmHF5UNn_-Fng::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Unable to initialize the OPC instance's shared OCD store due to constructor failure: Filter [3aDV_cacQByO0tTzVrBxnA::OCD Constructor Request Processor] failed while normalizing request input. Error at path '~.testString': Value of type 'jsNumber' not in allowed type set [jsString].",
                            "result": {
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [fzc39RvNTLmHF5UNn_-Fng::unspecified] failed yielding a zombie instance. Failed while processing constructor request. Filter [XXile9azSHO39alE6mMKsg::OPC Constructor Request Processor] failed while performing main operation. Unable to initialize the OPC instance's shared OCD store due to constructor failure: Filter [3aDV_cacQByO0tTzVrBxnA::OCD Constructor Request Processor] failed while normalizing request input. Error at path '~.testString': Value of type 'jsNumber' not in allowed type set [jsString]."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "DipB21oZR5ihBCYESC5HWw": {
                "harnessRequest": {
                  "id": "DipB21oZR5ihBCYESC5HWw",
                  "name": "Valid ID, ocdTemplateSpec, data",
                  "description": "Valid OPC instance + dev ocdTemplateSpec + valid init data",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "DipB21oZR5ihBCYESC5HWw",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            },
                            "ocdInitData": {
                              "testString": "Hello, World!"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "DipB21oZR5ihBCYESC5HWw": {
                          "opcToJSON": {
                            "id": "DipB21oZR5ihBCYESC5HWw",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [DipB21oZR5ihBCYESC5HWw::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [DipB21oZR5ihBCYESC5HWw::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "testString": {
                                "____label": "Test Namespace 1",
                                "____accept": "jsString",
                                "____defaultValue": "Please specify a value for ~.testString."
                              }
                            },
                            "ocdi": {
                              "testString": "Hello, World!"
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "np4M1LDWSyeNXOmFYJulhA": {
                "harnessRequest": {
                  "id": "np4M1LDWSyeNXOmFYJulhA",
                  "name": "Invalid OPC template spec binding #1",
                  "description": "Pass an OCD template spec w/invalid OPM binding IRUT",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "np4M1LDWSyeNXOmFYJulhA",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "app": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "not and IRUT"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "np4M1LDWSyeNXOmFYJulhA": {
                          "opcToJSON": {
                            "id": "np4M1LDWSyeNXOmFYJulhA",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "app": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "not and IRUT"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [np4M1LDWSyeNXOmFYJulhA::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [np4M1LDWSyeNXOmFYJulhA::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "app": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.app' will not be bound to OPM ID 'not and IRUT'. Invalid ID IRUT specified."
                                }
                              }
                            },
                            "ocdi": {
                              "app": {}
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.app' will not be bound to OPM ID 'not and IRUT'. Invalid ID IRUT specified.",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "197ZsgbfRRGGMWqhwmaBDg": {
                "harnessRequest": {
                  "id": "197ZsgbfRRGGMWqhwmaBDg",
                  "name": "Invalid OPC template spec binding #2",
                  "description": "OCD spec namespace bound to OPM not allowed to use ____opaque directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "197ZsgbfRRGGMWqhwmaBDg",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____opaque": true,
                                "____appdsl": {
                                  "opm": "197ZsgbfRRGGMWqhwmaBDg"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "197ZsgbfRRGGMWqhwmaBDg": {
                          "opcToJSON": {
                            "id": "197ZsgbfRRGGMWqhwmaBDg",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____opaque": true,
                                "____appdsl": {
                                  "opm": "197ZsgbfRRGGMWqhwmaBDg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [197ZsgbfRRGGMWqhwmaBDg::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [197ZsgbfRRGGMWqhwmaBDg::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "badNamespace": {
                                "____opaque": true,
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID '197ZsgbfRRGGMWqhwmaBDg'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\"."
                                }
                              }
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID '197ZsgbfRRGGMWqhwmaBDg'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\".",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "rxFiX7H-TDG0GsxqtRekoA": {
                "harnessRequest": {
                  "id": "rxFiX7H-TDG0GsxqtRekoA",
                  "name": "Invalid OPC template spec binding #3",
                  "description": "OCD spec namespace bound to OPM not allowed to use ____accept directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "rxFiX7H-TDG0GsxqtRekoA",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____accept": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "rxFiX7H-TDG0GsxqtRekoA"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "rxFiX7H-TDG0GsxqtRekoA": {
                          "opcToJSON": {
                            "id": "rxFiX7H-TDG0GsxqtRekoA",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____accept": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "rxFiX7H-TDG0GsxqtRekoA"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [rxFiX7H-TDG0GsxqtRekoA::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [rxFiX7H-TDG0GsxqtRekoA::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "badNamespace": {
                                "____accept": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'rxFiX7H-TDG0GsxqtRekoA'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\"."
                                }
                              }
                            },
                            "ocdi": {
                              "badNamespace": {}
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'rxFiX7H-TDG0GsxqtRekoA'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\".",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "Pe4ks7bQQ9KQee1T8qTRHw": {
                "harnessRequest": {
                  "id": "Pe4ks7bQQ9KQee1T8qTRHw",
                  "name": "Invalid OPC Template sepc binding #4",
                  "description": "OCD spec namespace bound to OPM not allowed to specify an array of values to ____types directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "Pe4ks7bQQ9KQee1T8qTRHw",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": [
                                  "jsObject"
                                ],
                                "____appdsl": {
                                  "opm": "Pe4ks7bQQ9KQee1T8qTRHw"
                                },
                                "____defaultValue": {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "Pe4ks7bQQ9KQee1T8qTRHw": {
                          "opcToJSON": {
                            "id": "Pe4ks7bQQ9KQee1T8qTRHw",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": [
                                  "jsObject"
                                ],
                                "____appdsl": {
                                  "opm": "Pe4ks7bQQ9KQee1T8qTRHw"
                                },
                                "____defaultValue": {}
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [Pe4ks7bQQ9KQee1T8qTRHw::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [Pe4ks7bQQ9KQee1T8qTRHw::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "badNamespace": {
                                "____types": [
                                  "jsObject"
                                ],
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'Pe4ks7bQQ9KQee1T8qTRHw'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\"."
                                },
                                "____defaultValue": {}
                              }
                            },
                            "ocdi": {
                              "badNamespace": {}
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'Pe4ks7bQQ9KQee1T8qTRHw'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\".",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "H2zMrBw4TBie5A2mwH4BRg": {
                "harnessRequest": {
                  "id": "H2zMrBw4TBie5A2mwH4BRg",
                  "name": "Invalid OCD template spec binding #5",
                  "description": "OCD template spec namespace bound to OPM must declare ____types: \"jsObject\".",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "H2zMrBw4TBie5A2mwH4BRg",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": "jsArray",
                                "____defaultValue": [],
                                "____appdsl": {
                                  "opm": "H2zMrBw4TBie5A2mwH4BRg"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "H2zMrBw4TBie5A2mwH4BRg": {
                          "opcToJSON": {
                            "id": "H2zMrBw4TBie5A2mwH4BRg",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": "jsArray",
                                "____defaultValue": [],
                                "____appdsl": {
                                  "opm": "H2zMrBw4TBie5A2mwH4BRg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [H2zMrBw4TBie5A2mwH4BRg::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [H2zMrBw4TBie5A2mwH4BRg::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "badNamespace": {
                                "____types": "jsArray",
                                "____defaultValue": [],
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'H2zMrBw4TBie5A2mwH4BRg'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\"."
                                }
                              }
                            },
                            "ocdi": {
                              "badNamespace": []
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'H2zMrBw4TBie5A2mwH4BRg'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\".",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "VxYuiGoHRfuKRHp7PBik7Q": {
                "harnessRequest": {
                  "id": "VxYuiGoHRfuKRHp7PBik7Q",
                  "name": "Invalid OCD template spec binding #6",
                  "description": "OCD template spec namespace bound to OPM must not use the ____asMap directive.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "VxYuiGoHRfuKRHp7PBik7Q",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____asMap": true,
                                "____appdsl": {
                                  "opm": "VxYuiGoHRfuKRHp7PBik7Q"
                                },
                                "mapKey": {
                                  "____accept": "jsString"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "VxYuiGoHRfuKRHp7PBik7Q": {
                          "opcToJSON": {
                            "id": "VxYuiGoHRfuKRHp7PBik7Q",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____asMap": true,
                                "____appdsl": {
                                  "opm": "VxYuiGoHRfuKRHp7PBik7Q"
                                },
                                "mapKey": {
                                  "____accept": "jsString"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [VxYuiGoHRfuKRHp7PBik7Q::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [VxYuiGoHRfuKRHp7PBik7Q::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "badNamespace": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____asMap": true,
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'VxYuiGoHRfuKRHp7PBik7Q'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\"."
                                },
                                "mapKey": {
                                  "____accept": "jsString"
                                }
                              }
                            },
                            "ocdi": {
                              "badNamespace": {}
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'VxYuiGoHRfuKRHp7PBik7Q'. Namespace must be a descriptor object (i.e. not a map) declared as ____types: \"jsObject\".",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "T-apDENPTAO6iQShA-2qBQ": {
                "harnessRequest": {
                  "id": "T-apDENPTAO6iQShA-2qBQ",
                  "name": "Invalid OCD template spec binding #7",
                  "description": "OCD template spec namespace bound to OPM must specify the ID of a registered OPM instance to bind.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "T-apDENPTAO6iQShA-2qBQ",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "T-apDENPTAO6iQShA-2qBQ"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "T-apDENPTAO6iQShA-2qBQ": {
                          "opcToJSON": {
                            "id": "T-apDENPTAO6iQShA-2qBQ",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "badNamespace": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "T-apDENPTAO6iQShA-2qBQ"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [T-apDENPTAO6iQShA-2qBQ::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [T-apDENPTAO6iQShA-2qBQ::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "badNamespace": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opcWarning": "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'T-apDENPTAO6iQShA-2qBQ'. Unknown/unregistered OPM specified."
                                }
                              }
                            },
                            "ocdi": {
                              "badNamespace": {}
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: OCD runtime spec path '~.badNamespace' will not be bound to OPM ID 'T-apDENPTAO6iQShA-2qBQ'. Unknown/unregistered OPM specified.",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "bx_3DRETSe6zr-Dz_W-COQ": {
                "harnessRequest": {
                  "id": "bx_3DRETSe6zr-Dz_W-COQ",
                  "name": "Test OPC options #1",
                  "description": "Construct an OPC instance specifying override values for constructor options #1.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "bx_3DRETSe6zr-Dz_W-COQ",
                            "name": "Test OPC options #1",
                            "description": "Construct an OPC instance specifying override values for constructor options #1 (just test the options passing).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 8,
                                "firstEvaluation": "action"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "bx_3DRETSe6zr-Dz_W-COQ": {
                          "opcToJSON": {
                            "id": "bx_3DRETSe6zr-Dz_W-COQ",
                            "name": "Test OPC options #1",
                            "description": "Construct an OPC instance specifying override values for constructor options #1 (just test the options passing).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 8,
                                "firstEvaluation": "action"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [bx_3DRETSe6zr-Dz_W-COQ::Test OPC options #1] Observable Controller Data Store",
                              "____description": "OPC [bx_3DRETSe6zr-Dz_W-COQ::Test OPC options #1] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 0,
                            "lastEvalResponse": null,
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "d7uW2Me4RjqeX3a2NjOodQ": {
                "harnessRequest": {
                  "id": "d7uW2Me4RjqeX3a2NjOodQ",
                  "name": "Test OPC options #2",
                  "description": "Construct an OPC instance specifying a zero max frame limit AND constructor evaluate #2 (fail evaluate in constructor).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "d7uW2Me4RjqeX3a2NjOodQ",
                            "name": "Test OPC options #2",
                            "description": "Construct an OPC instance specifying a zero max frame limit AND constructor evaluate #2 (fail evaluate in constructor).",
                            "options": {
                              "evaluate": {
                                "firstEvaluation": "constructor",
                                "maxFrames": 0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "d7uW2Me4RjqeX3a2NjOodQ": {
                          "opcToJSON": {
                            "error": "ObservableProcessController::constructor for [d7uW2Me4RjqeX3a2NjOodQ::Test OPC options #2] failed yielding a zombie instance. Failed while executing the first post-construction system evaluation: Filter [T7PiatEGTo2dbdy8jOMHQg::OPC Evaluation Filter] failed while performing main operation. Max evaluation frame limit of 0 was reached before evaluation completed.",
                            "result": {
                              "id": "d7uW2Me4RjqeX3a2NjOodQ",
                              "name": "Test OPC options #2",
                              "description": "Construct an OPC instance specifying a zero max frame limit AND constructor evaluate #2 (fail evaluate in constructor).",
                              "options": {
                                "evaluate": {
                                  "maxFrames": 0,
                                  "firstEvaluation": "constructor"
                                }
                              },
                              "opmMap": {},
                              "opmiSpecPaths": [],
                              "ocdTemplateSpec": {
                                "____types": "jsObject"
                              },
                              "ocdRuntimeSpec": {
                                "____label": "OPC [d7uW2Me4RjqeX3a2NjOodQ::Test OPC options #2] Observable Controller Data Store",
                                "____description": "OPC [d7uW2Me4RjqeX3a2NjOodQ::Test OPC options #2] system process runtime state data managed by OPC instance.",
                                "____types": "jsObject",
                                "____defaultValue": {}
                              },
                              "ocdi": {},
                              "transitionDispatcher": {},
                              "actionDispatcher": {},
                              "opcActorStack": [],
                              "evalCount": 1,
                              "lastEvalResponse": {
                                "error": "Filter [T7PiatEGTo2dbdy8jOMHQg::OPC Evaluation Filter] failed while performing main operation. Max evaluation frame limit of 0 was reached before evaluation completed.",
                                "result": {
                                  "evalNumber": 0,
                                  "summary": {
                                    "counts": {
                                      "bindings": 0,
                                      "frames": 0,
                                      "errors": 0,
                                      "transitions": 0
                                    },
                                    "framesCount": 0
                                  },
                                  "evalFrames": []
                                }
                              },
                              "constructionWarnings": [
                                "WARNING: No ObservableProcessModel class instances registered!",
                                "WARNING: No TransitionOperator class instances have been registered!",
                                "WARNING: No ControllerAction class instances have been registered!"
                              ],
                              "constructionError": {
                                "error": "ObservableProcessController::constructor for [d7uW2Me4RjqeX3a2NjOodQ::Test OPC options #2] failed yielding a zombie instance. Failed while executing the first post-construction system evaluation: Filter [T7PiatEGTo2dbdy8jOMHQg::OPC Evaluation Filter] failed while performing main operation. Max evaluation frame limit of 0 was reached before evaluation completed."
                              }
                            }
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "l2lMJRfpR7SwIMxriD-pRQ": {
                "harnessRequest": {
                  "id": "l2lMJRfpR7SwIMxriD-pRQ",
                  "name": "Test OPC options #3",
                  "description": "Construct an OPC instance specifying a zero max frame limit AND action evaluate #3 (fail on first call to act).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "l2lMJRfpR7SwIMxriD-pRQ",
                            "name": "Test OPC options #3",
                            "description": "Construct an OPC instance specifying a zero max frame limit AND action evaluate #3 (no fail because no act - naked constructed OPC).",
                            "options": {
                              "evaluate": {
                                "firstEvaluation": "action",
                                "maxFrames": 0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "l2lMJRfpR7SwIMxriD-pRQ": {
                          "opcToJSON": {
                            "id": "l2lMJRfpR7SwIMxriD-pRQ",
                            "name": "Test OPC options #3",
                            "description": "Construct an OPC instance specifying a zero max frame limit AND action evaluate #3 (no fail because no act - naked constructed OPC).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 0,
                                "firstEvaluation": "action"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [l2lMJRfpR7SwIMxriD-pRQ::Test OPC options #3] Observable Controller Data Store",
                              "____description": "OPC [l2lMJRfpR7SwIMxriD-pRQ::Test OPC options #3] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 0,
                            "lastEvalResponse": null,
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "fNpBNE0uQ2GJWunuKe3_lA": {
                "harnessRequest": {
                  "id": "fNpBNE0uQ2GJWunuKe3_lA",
                  "name": "Test OPC options #4",
                  "description": "Construct an OPC instance specifying a zero max frame limit AND action evaluate #4 (fail on first call to OPC.act).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "fNpBNE0uQ2GJWunuKe3_lA",
                            "name": "Test OPC options #4",
                            "description": "Construct an OPC instance specifying a zero max frame limit AND action evaluate #4 (fail on first call to OPC.act).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 0,
                                "firstEvaluation": "action"
                              }
                            },
                            "controllerActionSets": [
                              [
                                "ControllerAction::constructor for [BO184bcvSzmr9oF4KJynSA::Bogus Controller Test Action #1] failed yielding a zombie instance. Filter [actXQlKYQ9KDriZba3t00w::Controller Action Filter Factory] failed while normalizing request input. Error at path '~.bodyFunction': Value of type 'jsUndefined' not in allowed type set [jsFunction].",
                                {
                                  "operationID": "93_stDeORb-9W_0d69fswg",
                                  "operationName": "NOOP Controller Test Action #2",
                                  "operationDescription": "Do nothing test controller action plug-in filter #2.",
                                  "inputFilterSpec": {
                                    "____label": "NOOP Controller Test Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "noop1": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "QbBHNSXVFcllpVVIKPdIHA",
                                  "inputTypeVDID": "QIsrGeoNAOFgnxKz89x8xg",
                                  "outputTypeVIID": "gUIA-Cjc2TyIr5-2zpWFzw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "Y81beZWMiNaqNzCkOcKRBw"
                                },
                                {
                                  "operationID": "BO184bcvSzmr9oF4KJynSA",
                                  "operationName": "NOOP Controller Test Action #3",
                                  "operationDescription": "Do nothing nothing test controller action plug-in filter #3.",
                                  "inputFilterSpec": {
                                    "____label": "NOOP Controller Test Action #3 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "noop2": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "DhS9wGiVKn64Be-BByEVwg",
                                  "inputTypeVDID": "BYsrOIENALlxnxK_KNx8lw",
                                  "outputTypeVIID": "lzZ25Vwzg8KsNwEwfqOZmA",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "O1roedUe-dZRHM2k6gKnBw"
                                }
                              ]
                            ]
                          },
                          "actRequests": [
                            {
                              "actorName": "fNpBNE0uQ2GJWunuKe3_lA",
                              "actionRequest": {
                                "noop1": true
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "fNpBNE0uQ2GJWunuKe3_lA": {
                          "opcToJSON": {
                            "id": "fNpBNE0uQ2GJWunuKe3_lA",
                            "name": "Test OPC options #4",
                            "description": "Construct an OPC instance specifying a zero max frame limit AND action evaluate #4 (fail on first call to OPC.act).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 0,
                                "firstEvaluation": "action"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [fNpBNE0uQ2GJWunuKe3_lA::Test OPC options #4] Observable Controller Data Store",
                              "____description": "OPC [fNpBNE0uQ2GJWunuKe3_lA::Test OPC options #4] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "JMMqUQ69mX8OlWIeTkDJdg",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "4oWxnuHKn4v9Tg3IRkDmJQ",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "YwdAuAjCULYMXHfs5FNQdQ",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "axb0E2a4NVe6KY7tGp4UtA"
                              },
                              "supportedFilters": [
                                "[93_stDeORb-9W_0d69fswg::NOOP Controller Test Action #2]",
                                "[BO184bcvSzmr9oF4KJynSA::NOOP Controller Test Action #3]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 0,
                            "lastEvalResponse": null,
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: Ignoring invalid ControllerAction class instance: ControllerAction::constructor for [BO184bcvSzmr9oF4KJynSA::Bogus Controller Test Action #1] failed yielding a zombie instance. Filter [actXQlKYQ9KDriZba3t00w::Controller Action Filter Factory] failed while normalizing request input. Error at path '~.bodyFunction': Value of type 'jsUndefined' not in allowed type set [jsFunction]."
                            ]
                          },
                          "actionEvaluations": [
                            {
                              "actRequest": {
                                "actorName": "fNpBNE0uQ2GJWunuKe3_lA",
                                "actionRequest": {
                                  "noop1": true
                                }
                              },
                              "actResponse": {
                                "error": "Filter [T7PiatEGTo2dbdy8jOMHQg::OPC Evaluation Filter] failed while performing main operation. Max evaluation frame limit of 0 was reached before evaluation completed."
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "4nw2B9oVQYm1ZspZqotrRA": {
                "harnessRequest": {
                  "id": "4nw2B9oVQYm1ZspZqotrRA",
                  "name": "OCD template spec OPM binding #1",
                  "description": "OPM binding test #1: Baseline - registered OPM's but no declared bindigs.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "4nw2B9oVQYm1ZspZqotrRA",
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                  "name": "OPM Test B",
                                  "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorResponseError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                  "name": "OPM Test C",
                                  "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorThrowError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                  "name": "OPC Test D",
                                  "description": "A simple test OPM",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {}
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "4nw2B9oVQYm1ZspZqotrRA": {
                          "opcToJSON": {
                            "id": "4nw2B9oVQYm1ZspZqotrRA",
                            "name": "Unnamed OPC",
                            "description": "Undescribed OPC",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "_vC2O7DGTZ22R5hvxpy0WQ": {
                                "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                "name": "OPM Test A",
                                "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "noneSuchOperator": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "SyCUD3kpQ8mtYbV5A_4BPA": {
                                "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                "name": "OPM Test B",
                                "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorResponseError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "Pkr1EErLSiiHQRt8gCaO0Q": {
                                "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                "name": "OPM Test C",
                                "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorThrowError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "ZFpRfMRETDqavS3EqEuv1Q": {
                                "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                "name": "OPC Test D",
                                "description": "A simple test OPM",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {}
                              }
                            },
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [4nw2B9oVQYm1ZspZqotrRA::Unnamed OPC] Observable Controller Data Store",
                              "____description": "OPC [4nw2B9oVQYm1ZspZqotrRA::Unnamed OPC] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "AhfYIOp_RQmS-a37emkj9A": {
                "harnessRequest": {
                  "id": "AhfYIOp_RQmS-a37emkj9A",
                  "name": "OPC.act dispatch #1 (bad request)",
                  "description": "Dispatch an OPC.act method with a bad request and no registered controller actions.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "AhfYIOp_RQmS-a37emkj9A",
                            "name": "OPC.act dispatch #1 (bad request)",
                            "description": "Dispatch an OPC.act method with a bad request and no registered controller actions."
                          },
                          "actRequests": [
                            {
                              "bogus": "Our OPCi has no registered actions. So, by definition this request will result in an error."
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "AhfYIOp_RQmS-a37emkj9A": {
                          "opcToJSON": {
                            "id": "AhfYIOp_RQmS-a37emkj9A",
                            "name": "OPC.act dispatch #1 (bad request)",
                            "description": "Dispatch an OPC.act method with a bad request and no registered controller actions.",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [AhfYIOp_RQmS-a37emkj9A::OPC.act dispatch #1 (bad request)] Observable Controller Data Store",
                              "____description": "OPC [AhfYIOp_RQmS-a37emkj9A::OPC.act dispatch #1 (bad request)] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": [
                            {
                              "actRequest": {
                                "bogus": "Our OPCi has no registered actions. So, by definition this request will result in an error."
                              },
                              "actResponse": {
                                "error": "Bad request: Filter [HcpOJr6nRYWCu4_J1v7wIw::OPC.act Input Stage Filter] failed while normalizing request input. Error at path '~.actorName': Value of type 'jsUndefined' not in allowed type set [jsString]."
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "mm9htD2iSuyVAPm9SFv-qw": {
                "harnessRequest": {
                  "id": "mm9htD2iSuyVAPm9SFv-qw",
                  "name": "OPC.act dispatch #2",
                  "description": "Dispatch an OPC.act method with a valid request and no registered controller actions.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "mm9htD2iSuyVAPm9SFv-qw",
                            "name": "OPC.act dispatch #2",
                            "description": "Dispathc an OPC.act method with a valid request and no registered controller actions."
                          },
                          "actRequests": [
                            {
                              "actorName": "Test Vector mm9htD2iSuyVAPm9SFv-qw",
                              "actionDescription": "See what happens when I call OPC.act method with a valid request signature and no controller action plug-ins registered.",
                              "actionRequest": {
                                "bogus": "Still a bogus message. But, that doesn't matter because this isn't going to get dispatched in this example."
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "mm9htD2iSuyVAPm9SFv-qw": {
                          "opcToJSON": {
                            "id": "mm9htD2iSuyVAPm9SFv-qw",
                            "name": "OPC.act dispatch #2",
                            "description": "Dispathc an OPC.act method with a valid request and no registered controller actions.",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [mm9htD2iSuyVAPm9SFv-qw::OPC.act dispatch #2] Observable Controller Data Store",
                              "____description": "OPC [mm9htD2iSuyVAPm9SFv-qw::OPC.act dispatch #2] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": [
                            {
                              "actRequest": {
                                "actorName": "Test Vector mm9htD2iSuyVAPm9SFv-qw",
                                "actionDescription": "See what happens when I call OPC.act method with a valid request signature and no controller action plug-ins registered.",
                                "actionRequest": {
                                  "bogus": "Still a bogus message. But, that doesn't matter because this isn't going to get dispatched in this example."
                                }
                              },
                              "actResponse": {
                                "error": "No ControllerAction class instances registered!"
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "pUxcxo9STsG3OMWWrREHoQ": {
                "harnessRequest": {
                  "id": "pUxcxo9STsG3OMWWrREHoQ",
                  "name": "OPC.arc dispatch #3",
                  "description": "Dispatch on OPC.act method with valid request signature and registered test controller actions.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "pUxcxo9STsG3OMWWrREHoQ",
                            "name": "OPC.arc dispatch #3",
                            "description": "Dispatch on OPC.act method with valid request signature and registered test controller actions.",
                            "controllerActionSets": [
                              [
                                "ControllerAction::constructor for [BO184bcvSzmr9oF4KJynSA::Bogus Controller Test Action #1] failed yielding a zombie instance. Filter [actXQlKYQ9KDriZba3t00w::Controller Action Filter Factory] failed while normalizing request input. Error at path '~.bodyFunction': Value of type 'jsUndefined' not in allowed type set [jsFunction].",
                                {
                                  "operationID": "93_stDeORb-9W_0d69fswg",
                                  "operationName": "NOOP Controller Test Action #2",
                                  "operationDescription": "Do nothing test controller action plug-in filter #2.",
                                  "inputFilterSpec": {
                                    "____label": "NOOP Controller Test Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "noop1": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "QbBHNSXVFcllpVVIKPdIHA",
                                  "inputTypeVDID": "QIsrGeoNAOFgnxKz89x8xg",
                                  "outputTypeVIID": "gUIA-Cjc2TyIr5-2zpWFzw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "Y81beZWMiNaqNzCkOcKRBw"
                                },
                                {
                                  "operationID": "BO184bcvSzmr9oF4KJynSA",
                                  "operationName": "NOOP Controller Test Action #3",
                                  "operationDescription": "Do nothing nothing test controller action plug-in filter #3.",
                                  "inputFilterSpec": {
                                    "____label": "NOOP Controller Test Action #3 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "noop2": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "DhS9wGiVKn64Be-BByEVwg",
                                  "inputTypeVDID": "BYsrOIENALlxnxK_KNx8lw",
                                  "outputTypeVIID": "lzZ25Vwzg8KsNwEwfqOZmA",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "O1roedUe-dZRHM2k6gKnBw"
                                }
                              ]
                            ]
                          },
                          "actRequests": [
                            {
                              "actorName": "Test Vector pUxcxo9STsG3OMWWrREHoQ",
                              "actionDescription": "Attempt to call into a registered ControllerAction plug-in.",
                              "actionRequest": {
                                "noop1": true
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "pUxcxo9STsG3OMWWrREHoQ": {
                          "opcToJSON": {
                            "id": "pUxcxo9STsG3OMWWrREHoQ",
                            "name": "OPC.arc dispatch #3",
                            "description": "Dispatch on OPC.act method with valid request signature and registered test controller actions.",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {},
                            "opmiSpecPaths": [],
                            "ocdTemplateSpec": {
                              "____types": "jsObject"
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [pUxcxo9STsG3OMWWrREHoQ::OPC.arc dispatch #3] Observable Controller Data Store",
                              "____description": "OPC [pUxcxo9STsG3OMWWrREHoQ::OPC.arc dispatch #3] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {}
                            },
                            "ocdi": {},
                            "transitionDispatcher": {},
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "JMMqUQ69mX8OlWIeTkDJdg",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "4oWxnuHKn4v9Tg3IRkDmJQ",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "YwdAuAjCULYMXHfs5FNQdQ",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "axb0E2a4NVe6KY7tGp4UtA"
                              },
                              "supportedFilters": [
                                "[93_stDeORb-9W_0d69fswg::NOOP Controller Test Action #2]",
                                "[BO184bcvSzmr9oF4KJynSA::NOOP Controller Test Action #3]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 0,
                                    "frames": 1,
                                    "errors": 0,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 0,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {}
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ObservableProcessModel class instances registered!",
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: Ignoring invalid ControllerAction class instance: ControllerAction::constructor for [BO184bcvSzmr9oF4KJynSA::Bogus Controller Test Action #1] failed yielding a zombie instance. Filter [actXQlKYQ9KDriZba3t00w::Controller Action Filter Factory] failed while normalizing request input. Error at path '~.bodyFunction': Value of type 'jsUndefined' not in allowed type set [jsFunction]."
                            ]
                          },
                          "actionEvaluations": [
                            {
                              "actRequest": {
                                "actorName": "Test Vector pUxcxo9STsG3OMWWrREHoQ",
                                "actionDescription": "Attempt to call into a registered ControllerAction plug-in.",
                                "actionRequest": {
                                  "noop1": true
                                }
                              },
                              "actResponse": {
                                "error": null,
                                "result": {
                                  "evalNumber": 1,
                                  "summary": {
                                    "counts": {
                                      "bindings": 0,
                                      "frames": 1,
                                      "errors": 0,
                                      "transitions": 0
                                    }
                                  },
                                  "evalFrames": [
                                    {
                                      "summary": {
                                        "counts": {
                                          "bindings": 0,
                                          "transitions": 0,
                                          "errors": 0
                                        },
                                        "reports": {
                                          "transitions": [],
                                          "errors": []
                                        }
                                      },
                                      "bindings": {}
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "l0vKq8yVRsm73LoMev8ItA": {
                "harnessRequest": {
                  "id": "l0vKq8yVRsm73LoMev8ItA",
                  "name": "OPC Evaluate Operator Test #1",
                  "description": "Test transition operator failure (no transition operators registered).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "l0vKq8yVRsm73LoMev8ItA",
                            "name": "OPC Operator Test #1",
                            "description": "Test transition operator failure (no transition operators registered).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "_vC2O7DGTZ22R5hvxpy0WQ"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                  "name": "OPM Test B",
                                  "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorResponseError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                  "name": "OPM Test C",
                                  "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorThrowError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                  "name": "OPC Test D",
                                  "description": "A simple test OPM",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {}
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "l0vKq8yVRsm73LoMev8ItA": {
                          "opcToJSON": {
                            "id": "l0vKq8yVRsm73LoMev8ItA",
                            "name": "OPC Operator Test #1",
                            "description": "Test transition operator failure (no transition operators registered).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "_vC2O7DGTZ22R5hvxpy0WQ": {
                                "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                "name": "OPM Test A",
                                "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "noneSuchOperator": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "SyCUD3kpQ8mtYbV5A_4BPA": {
                                "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                "name": "OPM Test B",
                                "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorResponseError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "Pkr1EErLSiiHQRt8gCaO0Q": {
                                "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                "name": "OPM Test C",
                                "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorThrowError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "ZFpRfMRETDqavS3EqEuv1Q": {
                                "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                "name": "OPC Test D",
                                "description": "A simple test OPM",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {}
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "_vC2O7DGTZ22R5hvxpy0WQ"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [l0vKq8yVRsm73LoMev8ItA::OPC Operator Test #1] Observable Controller Data Store",
                              "____description": "OPC [l0vKq8yVRsm73LoMev8ItA::OPC Operator Test #1] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "_vC2O7DGTZ22R5hvxpy0WQ"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {},
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                            "name": "OPM Test A",
                                            "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "noneSuchOperator": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {}
                                                  },
                                                  "operatorRequest": {
                                                    "noneSuchOperator": true
                                                  }
                                                },
                                                "response": {
                                                  "error": "No TransitionOperator class instances registered!"
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 1,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No TransitionOperator class instances have been registered!",
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "TenISiGcTG-06LhZuBzJNQ": {
                "harnessRequest": {
                  "id": "TenISiGcTG-06LhZuBzJNQ",
                  "name": "OPC Evaluate Operator Test #2",
                  "description": "Test transition operator failure (bad operator request message).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "TenISiGcTG-06LhZuBzJNQ",
                            "name": "OPC Operator Test #2",
                            "description": "Test transition operator failure (bad operator request message).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "_vC2O7DGTZ22R5hvxpy0WQ"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                  "name": "OPM Test B",
                                  "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorResponseError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                  "name": "OPM Test C",
                                  "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorThrowError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                  "name": "OPC Test D",
                                  "description": "A simple test OPM",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {}
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "TenISiGcTG-06LhZuBzJNQ": {
                          "opcToJSON": {
                            "id": "TenISiGcTG-06LhZuBzJNQ",
                            "name": "OPC Operator Test #2",
                            "description": "Test transition operator failure (bad operator request message).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "_vC2O7DGTZ22R5hvxpy0WQ": {
                                "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                "name": "OPM Test A",
                                "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "noneSuchOperator": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "SyCUD3kpQ8mtYbV5A_4BPA": {
                                "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                "name": "OPM Test B",
                                "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorResponseError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "Pkr1EErLSiiHQRt8gCaO0Q": {
                                "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                "name": "OPM Test C",
                                "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorThrowError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "ZFpRfMRETDqavS3EqEuv1Q": {
                                "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                "name": "OPC Test D",
                                "description": "A simple test OPM",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {}
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "_vC2O7DGTZ22R5hvxpy0WQ"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [TenISiGcTG-06LhZuBzJNQ::OPC Operator Test #2] Observable Controller Data Store",
                              "____description": "OPC [TenISiGcTG-06LhZuBzJNQ::OPC Operator Test #2] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "_vC2O7DGTZ22R5hvxpy0WQ"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                            "name": "OPM Test A",
                                            "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "noneSuchOperator": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "noneSuchOperator": true
                                                  }
                                                },
                                                "response": {
                                                  "error": "Filter [zBn6TTKHzZedlXcUODLYJw::Discriminator Filter] failed while performing main operation. Unrecognized request format. Request signature must match one of filter set {[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator], [9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator], [TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator], [UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set], [YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator], [e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.], [kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]}."
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 1,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "KGh0Va-oTXKPUZmnDG4QPQ": {
                "harnessRequest": {
                  "id": "KGh0Va-oTXKPUZmnDG4QPQ",
                  "name": "OPC Evaluate Operator Test #3",
                  "description": "Test transition operator failure (bad operator returns transport error).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "KGh0Va-oTXKPUZmnDG4QPQ",
                            "name": "OPC Evaluate Operator Test #3",
                            "description": "Test transition operator failure (bad operator returns transport error).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "SyCUD3kpQ8mtYbV5A_4BPA"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                  "name": "OPM Test B",
                                  "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorResponseError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                  "name": "OPM Test C",
                                  "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorThrowError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                  "name": "OPC Test D",
                                  "description": "A simple test OPM",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {}
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ],
                              [
                                {
                                  "operationID": "AODn0L3GQLK_21Msl1W8-g",
                                  "operationName": "Bad Transition Operator #1",
                                  "operationDescription": "A TransitionOperator instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Transition Operator #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "badTransitionOperatorResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "fcGtxyvuqlkqDpUA1XVQaw",
                                  "inputTypeVDID": "Fxlhd9lRVI0ChNHKXUVAHQ",
                                  "outputTypeVIID": "x1HY9UsShOVVJgsxt0rzRg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "ZktrRD6zb5M3Z2GcwohRcg"
                                },
                                {
                                  "operationID": "ZdpLuggZRVaMI6aPW1mmUw",
                                  "operationName": "Bad Transition Operator #2",
                                  "operationDescription": "A TransitionOperator instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Transition Operator #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "badTransitionOperatorThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "LHEwWfMqQsfOeqyFrPJi0w",
                                  "inputTypeVDID": "fZwfmdDhfQLkKHkOvgk-Ng",
                                  "outputTypeVIID": "CNg4lV4XH5Z6CrL5wgOs_g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "axQtRKF8qZOwLKKcfER-cg"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "KGh0Va-oTXKPUZmnDG4QPQ": {
                          "opcToJSON": {
                            "id": "KGh0Va-oTXKPUZmnDG4QPQ",
                            "name": "OPC Evaluate Operator Test #3",
                            "description": "Test transition operator failure (bad operator returns transport error).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "_vC2O7DGTZ22R5hvxpy0WQ": {
                                "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                "name": "OPM Test A",
                                "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "noneSuchOperator": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "SyCUD3kpQ8mtYbV5A_4BPA": {
                                "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                "name": "OPM Test B",
                                "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorResponseError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "Pkr1EErLSiiHQRt8gCaO0Q": {
                                "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                "name": "OPM Test C",
                                "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorThrowError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "ZFpRfMRETDqavS3EqEuv1Q": {
                                "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                "name": "OPC Test D",
                                "description": "A simple test OPM",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {}
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                  "name": "OPM Test B",
                                  "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorResponseError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "SyCUD3kpQ8mtYbV5A_4BPA"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [KGh0Va-oTXKPUZmnDG4QPQ::OPC Evaluate Operator Test #3] Observable Controller Data Store",
                              "____description": "OPC [KGh0Va-oTXKPUZmnDG4QPQ::OPC Evaluate Operator Test #3] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "SyCUD3kpQ8mtYbV5A_4BPA"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "l3XCRgSDLOLTJUdypRJ_rw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "Jp9y9U7GFOa6iCjp26ZVQg",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "pz8TLb3zvdofchx1abefQQ",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "4-r0EwY_NVcBwo7t1MYUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[AODn0L3GQLK_21Msl1W8-g::Bad Transition Operator #1]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[ZdpLuggZRVaMI6aPW1mmUw::Bad Transition Operator #2]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                            "name": "OPM Test B",
                                            "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "badTransitionOperatorResponseError": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "l3XCRgSDLOLTJUdypRJ_rw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "Jp9y9U7GFOa6iCjp26ZVQg",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "pz8TLb3zvdofchx1abefQQ",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "4-r0EwY_NVcBwo7t1MYUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[AODn0L3GQLK_21Msl1W8-g::Bad Transition Operator #1]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[ZdpLuggZRVaMI6aPW1mmUw::Bad Transition Operator #2]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "badTransitionOperatorResponseError": true
                                                  }
                                                },
                                                "response": {
                                                  "error": "Filter [l3XCRgSDLOLTJUdypRJ_rw::Discriminator Filter] failed while performing main operation. Filter [AODn0L3GQLK_21Msl1W8-g::Bad Transition Operator #1] failed while performing main operation. This transition operator is hardwired to return an error."
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 1,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "rFcPAwRGRsOlJSXBZOdwNA": {
                "harnessRequest": {
                  "id": "rFcPAwRGRsOlJSXBZOdwNA",
                  "name": "OPC Evaluate Operator Test #4",
                  "description": "Test transition operator failure (bad operator throws exception from bodyFunction).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "rFcPAwRGRsOlJSXBZOdwNA",
                            "name": "OPC Evaluate Operator Test #4",
                            "description": "Test transition operator failure (bad operator throws exception from bodyFunction).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Pkr1EErLSiiHQRt8gCaO0Q"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                  "name": "OPM Test A",
                                  "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "noneSuchOperator": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                  "name": "OPM Test B",
                                  "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorResponseError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                  "name": "OPM Test C",
                                  "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorThrowError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                  "name": "OPC Test D",
                                  "description": "A simple test OPM",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {}
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ],
                              [
                                {
                                  "operationID": "AODn0L3GQLK_21Msl1W8-g",
                                  "operationName": "Bad Transition Operator #1",
                                  "operationDescription": "A TransitionOperator instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Transition Operator #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "badTransitionOperatorResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "fcGtxyvuqlkqDpUA1XVQaw",
                                  "inputTypeVDID": "Fxlhd9lRVI0ChNHKXUVAHQ",
                                  "outputTypeVIID": "x1HY9UsShOVVJgsxt0rzRg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "ZktrRD6zb5M3Z2GcwohRcg"
                                },
                                {
                                  "operationID": "ZdpLuggZRVaMI6aPW1mmUw",
                                  "operationName": "Bad Transition Operator #2",
                                  "operationDescription": "A TransitionOperator instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Transition Operator #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "badTransitionOperatorThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "LHEwWfMqQsfOeqyFrPJi0w",
                                  "inputTypeVDID": "fZwfmdDhfQLkKHkOvgk-Ng",
                                  "outputTypeVIID": "CNg4lV4XH5Z6CrL5wgOs_g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "axQtRKF8qZOwLKKcfER-cg"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "rFcPAwRGRsOlJSXBZOdwNA": {
                          "opcToJSON": {
                            "id": "rFcPAwRGRsOlJSXBZOdwNA",
                            "name": "OPC Evaluate Operator Test #4",
                            "description": "Test transition operator failure (bad operator throws exception from bodyFunction).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "_vC2O7DGTZ22R5hvxpy0WQ": {
                                "id": "_vC2O7DGTZ22R5hvxpy0WQ",
                                "name": "OPM Test A",
                                "description": "A simple test OPM (force transition operator error - no registered actions/no-plug-in for request).",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "noneSuchOperator": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "SyCUD3kpQ8mtYbV5A_4BPA": {
                                "id": "SyCUD3kpQ8mtYbV5A_4BPA",
                                "name": "OPM Test B",
                                "description": "A simple test OPM (force transition operator error - operator returns transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorResponseError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "Pkr1EErLSiiHQRt8gCaO0Q": {
                                "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                "name": "OPM Test C",
                                "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "badTransitionOperatorThrowError": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "ZFpRfMRETDqavS3EqEuv1Q": {
                                "id": "ZFpRfMRETDqavS3EqEuv1Q",
                                "name": "OPC Test D",
                                "description": "A simple test OPM",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {}
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                  "name": "OPM Test C",
                                  "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "badTransitionOperatorThrowError": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Pkr1EErLSiiHQRt8gCaO0Q"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [rFcPAwRGRsOlJSXBZOdwNA::OPC Evaluate Operator Test #4] Observable Controller Data Store",
                              "____description": "OPC [rFcPAwRGRsOlJSXBZOdwNA::OPC Evaluate Operator Test #4] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Pkr1EErLSiiHQRt8gCaO0Q"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "l3XCRgSDLOLTJUdypRJ_rw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "Jp9y9U7GFOa6iCjp26ZVQg",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "pz8TLb3zvdofchx1abefQQ",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "4-r0EwY_NVcBwo7t1MYUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[AODn0L3GQLK_21Msl1W8-g::Bad Transition Operator #1]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[ZdpLuggZRVaMI6aPW1mmUw::Bad Transition Operator #2]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "Pkr1EErLSiiHQRt8gCaO0Q",
                                            "name": "OPM Test C",
                                            "description": "A simple test OPM (force transition operator error - operator throws an Error)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "badTransitionOperatorThrowError": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "l3XCRgSDLOLTJUdypRJ_rw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "Jp9y9U7GFOa6iCjp26ZVQg",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "pz8TLb3zvdofchx1abefQQ",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "4-r0EwY_NVcBwo7t1MYUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[AODn0L3GQLK_21Msl1W8-g::Bad Transition Operator #1]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[ZdpLuggZRVaMI6aPW1mmUw::Bad Transition Operator #2]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "badTransitionOperatorThrowError": true
                                                  }
                                                },
                                                "response": {
                                                  "error": "TransitionOperator threw an illegal exception that was handled by OPC: This is a forced exception thrown from a transition operator's body function."
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 1,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "Gli8ff6FR22PPXjn9epRAQ": {
                "harnessRequest": {
                  "id": "Gli8ff6FR22PPXjn9epRAQ",
                  "name": "OPC Evaluate Exit Action Test #1",
                  "description": "Test controller exit action failure (no controller actions registered).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "Gli8ff6FR22PPXjn9epRAQ",
                            "name": "OPC Evaluate Exit Action Test #1",
                            "description": "Test controller exit action failure (no controller actions registered).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Rgt3dz-6Ra-zqpbnpBrJDg"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                  "name": "OPM Eval P2 Test #1",
                                  "description": "A simple test OPM (force controller action exit error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "P-uhpNlrTseMNDG3D9ahRA",
                                  "name": "OPM Eval P2 Test #2",
                                  "description": "A simple test OPM (force controller action exit error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "alBMdhnYSbijGj64jxm92g",
                                  "name": "OPM Eval P2 Test #3",
                                  "description": "A simple test OPM (force controller action exit - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": []
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "Gli8ff6FR22PPXjn9epRAQ": {
                          "opcToJSON": {
                            "id": "Gli8ff6FR22PPXjn9epRAQ",
                            "name": "OPC Evaluate Exit Action Test #1",
                            "description": "Test controller exit action failure (no controller actions registered).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "Rgt3dz-6Ra-zqpbnpBrJDg": {
                                "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                "name": "OPM Eval P2 Test #1",
                                "description": "A simple test OPM (force controller action exit error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "P-uhpNlrTseMNDG3D9ahRA": {
                                "id": "P-uhpNlrTseMNDG3D9ahRA",
                                "name": "OPM Eval P2 Test #2",
                                "description": "A simple test OPM (force controller action exit error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "alBMdhnYSbijGj64jxm92g": {
                                "id": "alBMdhnYSbijGj64jxm92g",
                                "name": "OPM Eval P2 Test #3",
                                "description": "A simple test OPM (force controller action exit - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                  "name": "OPM Eval P2 Test #1",
                                  "description": "A simple test OPM (force controller action exit error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Rgt3dz-6Ra-zqpbnpBrJDg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [Gli8ff6FR22PPXjn9epRAQ::OPC Evaluate Exit Action Test #1] Observable Controller Data Store",
                              "____description": "OPC [Gli8ff6FR22PPXjn9epRAQ::OPC Evaluate Exit Action Test #1] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Rgt3dz-6Ra-zqpbnpBrJDg"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                            "name": "OPM Eval P2 Test #1",
                                            "description": "A simple test OPM (force controller action exit error - bad message)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "noneSuchControllerAction": true
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "noneSuchControllerAction": true
                                                },
                                                "response": {
                                                  "error": "No ControllerAction class instances registered!"
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 1,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "5fzWl6WhTEaG7EzC1AgITw": {
                "harnessRequest": {
                  "id": "5fzWl6WhTEaG7EzC1AgITw",
                  "name": "OPC Evaluate Exit Action Test #2",
                  "description": "Test controller action failure (bad request message).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "5fzWl6WhTEaG7EzC1AgITw",
                            "name": "OPC Evaluate Exit Action Test #2",
                            "description": "Test controller action failure (bad request message).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Rgt3dz-6Ra-zqpbnpBrJDg"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                  "name": "OPM Eval P2 Test #1",
                                  "description": "A simple test OPM (force controller action exit error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "P-uhpNlrTseMNDG3D9ahRA",
                                  "name": "OPM Eval P2 Test #2",
                                  "description": "A simple test OPM (force controller action exit error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "alBMdhnYSbijGj64jxm92g",
                                  "name": "OPM Eval P2 Test #3",
                                  "description": "A simple test OPM (force controller action exit - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "NpfrgiF1QTS6qp9vAMv4Dw",
                                  "operationName": "Bad Controller Action #1",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "EI5vvlWkTXSGjgygskFKaw",
                                  "inputTypeVDID": "ekg192LFHMoK7koXwvvN3g",
                                  "outputTypeVIID": "F8v250y1jGSHieMeGfxfNw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "4nDoeeQS5NZrkdGknJE1Bw"
                                },
                                {
                                  "operationID": "V4-doRzDTVyYFtHMM8Z2jQ",
                                  "operationName": "Bad Controller Action #2",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "td--0wlcuGQhN-aytMLocw",
                                  "inputTypeVDID": "Q0g1-p7FHIKw7kpmB_vNfg",
                                  "outputTypeVIID": "d8j-q7q-GASjFRCTp99eSw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "REoueU-ig9Y8kB-kLSzkBw"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "5fzWl6WhTEaG7EzC1AgITw": {
                          "opcToJSON": {
                            "id": "5fzWl6WhTEaG7EzC1AgITw",
                            "name": "OPC Evaluate Exit Action Test #2",
                            "description": "Test controller action failure (bad request message).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "Rgt3dz-6Ra-zqpbnpBrJDg": {
                                "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                "name": "OPM Eval P2 Test #1",
                                "description": "A simple test OPM (force controller action exit error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "P-uhpNlrTseMNDG3D9ahRA": {
                                "id": "P-uhpNlrTseMNDG3D9ahRA",
                                "name": "OPM Eval P2 Test #2",
                                "description": "A simple test OPM (force controller action exit error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "alBMdhnYSbijGj64jxm92g": {
                                "id": "alBMdhnYSbijGj64jxm92g",
                                "name": "OPM Eval P2 Test #3",
                                "description": "A simple test OPM (force controller action exit - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                  "name": "OPM Eval P2 Test #1",
                                  "description": "A simple test OPM (force controller action exit error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Rgt3dz-6Ra-zqpbnpBrJDg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [5fzWl6WhTEaG7EzC1AgITw::OPC Evaluate Exit Action Test #2] Observable Controller Data Store",
                              "____description": "OPC [5fzWl6WhTEaG7EzC1AgITw::OPC Evaluate Exit Action Test #2] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "Rgt3dz-6Ra-zqpbnpBrJDg"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "gxLe07fE2uTWugzXWfoGDw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "TdBQpyuXslewXfxD_S82FA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "3NO3K9sLBtRXWRABzuqYiA",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "Etj0EzO8NVdSRY7tNYYUtA"
                              },
                              "supportedFilters": [
                                "[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1]",
                                "[V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                            "name": "OPM Eval P2 Test #1",
                                            "description": "A simple test OPM (force controller action exit error - bad message)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "noneSuchControllerAction": true
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "noneSuchControllerAction": true
                                                },
                                                "response": {
                                                  "error": "Filter [gxLe07fE2uTWugzXWfoGDw::Discriminator Filter] failed while performing main operation. Unrecognized request format. Request signature must match one of filter set {[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1], [V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]}."
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 1,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "boPENwtqTDiqX_c6CYfaPw": {
                "harnessRequest": {
                  "id": "boPENwtqTDiqX_c6CYfaPw",
                  "name": "OPC Evaluate Exit Action Test #3",
                  "description": "Test controller action failure #3 (bad action returns transport error).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "boPENwtqTDiqX_c6CYfaPw",
                            "name": "OPC Evaluate Exit Action Test #2",
                            "description": "Test controller action failure (bad request message).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "P-uhpNlrTseMNDG3D9ahRA"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                  "name": "OPM Eval P2 Test #1",
                                  "description": "A simple test OPM (force controller action exit error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "P-uhpNlrTseMNDG3D9ahRA",
                                  "name": "OPM Eval P2 Test #2",
                                  "description": "A simple test OPM (force controller action exit error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "alBMdhnYSbijGj64jxm92g",
                                  "name": "OPM Eval P2 Test #3",
                                  "description": "A simple test OPM (force controller action exit - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "NpfrgiF1QTS6qp9vAMv4Dw",
                                  "operationName": "Bad Controller Action #1",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "EI5vvlWkTXSGjgygskFKaw",
                                  "inputTypeVDID": "ekg192LFHMoK7koXwvvN3g",
                                  "outputTypeVIID": "F8v250y1jGSHieMeGfxfNw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "4nDoeeQS5NZrkdGknJE1Bw"
                                },
                                {
                                  "operationID": "V4-doRzDTVyYFtHMM8Z2jQ",
                                  "operationName": "Bad Controller Action #2",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "td--0wlcuGQhN-aytMLocw",
                                  "inputTypeVDID": "Q0g1-p7FHIKw7kpmB_vNfg",
                                  "outputTypeVIID": "d8j-q7q-GASjFRCTp99eSw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "REoueU-ig9Y8kB-kLSzkBw"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "boPENwtqTDiqX_c6CYfaPw": {
                          "opcToJSON": {
                            "id": "boPENwtqTDiqX_c6CYfaPw",
                            "name": "OPC Evaluate Exit Action Test #2",
                            "description": "Test controller action failure (bad request message).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "Rgt3dz-6Ra-zqpbnpBrJDg": {
                                "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                "name": "OPM Eval P2 Test #1",
                                "description": "A simple test OPM (force controller action exit error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "P-uhpNlrTseMNDG3D9ahRA": {
                                "id": "P-uhpNlrTseMNDG3D9ahRA",
                                "name": "OPM Eval P2 Test #2",
                                "description": "A simple test OPM (force controller action exit error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "alBMdhnYSbijGj64jxm92g": {
                                "id": "alBMdhnYSbijGj64jxm92g",
                                "name": "OPM Eval P2 Test #3",
                                "description": "A simple test OPM (force controller action exit - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "P-uhpNlrTseMNDG3D9ahRA",
                                  "name": "OPM Eval P2 Test #2",
                                  "description": "A simple test OPM (force controller action exit error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "P-uhpNlrTseMNDG3D9ahRA"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [boPENwtqTDiqX_c6CYfaPw::OPC Evaluate Exit Action Test #2] Observable Controller Data Store",
                              "____description": "OPC [boPENwtqTDiqX_c6CYfaPw::OPC Evaluate Exit Action Test #2] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "P-uhpNlrTseMNDG3D9ahRA"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "gxLe07fE2uTWugzXWfoGDw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "TdBQpyuXslewXfxD_S82FA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "3NO3K9sLBtRXWRABzuqYiA",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "Etj0EzO8NVdSRY7tNYYUtA"
                              },
                              "supportedFilters": [
                                "[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1]",
                                "[V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "P-uhpNlrTseMNDG3D9ahRA",
                                            "name": "OPM Eval P2 Test #2",
                                            "description": "A simple test OPM (force controller action exit error - action transport error)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "badControllerActionResponseError": true
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "badControllerActionResponseError": true
                                                },
                                                "response": {
                                                  "error": "Filter [gxLe07fE2uTWugzXWfoGDw::Discriminator Filter] failed while performing main operation. Filter [NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1] failed while performing main operation. This controller action is hard-wired to return an error."
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 1,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "pTaZUV0vTOGhaNOVD0sXLQ": {
                "harnessRequest": {
                  "id": "pTaZUV0vTOGhaNOVD0sXLQ",
                  "name": "OPC Evaluate Exit Action Test #4",
                  "description": "Test controller action failure #4 (bad action throws exception).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "pTaZUV0vTOGhaNOVD0sXLQ",
                            "name": "OPC Evaluate Exit Action Test #4",
                            "description": "Test controller action failure #4 (bad action throws exception).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "alBMdhnYSbijGj64jxm92g"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                  "name": "OPM Eval P2 Test #1",
                                  "description": "A simple test OPM (force controller action exit error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "P-uhpNlrTseMNDG3D9ahRA",
                                  "name": "OPM Eval P2 Test #2",
                                  "description": "A simple test OPM (force controller action exit error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "alBMdhnYSbijGj64jxm92g",
                                  "name": "OPM Eval P2 Test #3",
                                  "description": "A simple test OPM (force controller action exit - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "NpfrgiF1QTS6qp9vAMv4Dw",
                                  "operationName": "Bad Controller Action #1",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "EI5vvlWkTXSGjgygskFKaw",
                                  "inputTypeVDID": "ekg192LFHMoK7koXwvvN3g",
                                  "outputTypeVIID": "F8v250y1jGSHieMeGfxfNw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "4nDoeeQS5NZrkdGknJE1Bw"
                                },
                                {
                                  "operationID": "V4-doRzDTVyYFtHMM8Z2jQ",
                                  "operationName": "Bad Controller Action #2",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "td--0wlcuGQhN-aytMLocw",
                                  "inputTypeVDID": "Q0g1-p7FHIKw7kpmB_vNfg",
                                  "outputTypeVIID": "d8j-q7q-GASjFRCTp99eSw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "REoueU-ig9Y8kB-kLSzkBw"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "pTaZUV0vTOGhaNOVD0sXLQ": {
                          "opcToJSON": {
                            "id": "pTaZUV0vTOGhaNOVD0sXLQ",
                            "name": "OPC Evaluate Exit Action Test #4",
                            "description": "Test controller action failure #4 (bad action throws exception).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "Rgt3dz-6Ra-zqpbnpBrJDg": {
                                "id": "Rgt3dz-6Ra-zqpbnpBrJDg",
                                "name": "OPM Eval P2 Test #1",
                                "description": "A simple test OPM (force controller action exit error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "P-uhpNlrTseMNDG3D9ahRA": {
                                "id": "P-uhpNlrTseMNDG3D9ahRA",
                                "name": "OPM Eval P2 Test #2",
                                "description": "A simple test OPM (force controller action exit error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "alBMdhnYSbijGj64jxm92g": {
                                "id": "alBMdhnYSbijGj64jxm92g",
                                "name": "OPM Eval P2 Test #3",
                                "description": "A simple test OPM (force controller action exit - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step (never reached).",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "alBMdhnYSbijGj64jxm92g",
                                  "name": "OPM Eval P2 Test #3",
                                  "description": "A simple test OPM (force controller action exit - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step (never reached).",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "alBMdhnYSbijGj64jxm92g"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [pTaZUV0vTOGhaNOVD0sXLQ::OPC Evaluate Exit Action Test #4] Observable Controller Data Store",
                              "____description": "OPC [pTaZUV0vTOGhaNOVD0sXLQ::OPC Evaluate Exit Action Test #4] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "alBMdhnYSbijGj64jxm92g"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "gxLe07fE2uTWugzXWfoGDw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "TdBQpyuXslewXfxD_S82FA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "3NO3K9sLBtRXWRABzuqYiA",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "Etj0EzO8NVdSRY7tNYYUtA"
                              },
                              "supportedFilters": [
                                "[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1]",
                                "[V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "alBMdhnYSbijGj64jxm92g",
                                            "name": "OPM Eval P2 Test #3",
                                            "description": "A simple test OPM (force controller action exit - action exception)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "badControllerActionThrowError": true
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step (never reached).",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "badControllerActionThrowError": true
                                                },
                                                "response": {
                                                  "error": "ControllerAction threw an illegal exception that was handled by OPC: Error: This is a forced exception thrown from a controller action body function."
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 1,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "Zu13opLlRwSmU2LHvEAHnA": {
                "harnessRequest": {
                  "id": "Zu13opLlRwSmU2LHvEAHnA",
                  "name": "OPC Evaluate Enter Action Test #1",
                  "description": "Test controller action failure (no controller actions registered).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "Zu13opLlRwSmU2LHvEAHnA",
                            "name": "OPC Evaluate Enter Action Test #1",
                            "description": "Test controller action failure (no controller actions registered).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "I3ja3B00Rj-PIXnDrzQzNg"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                  "name": "OPM Eval P3 Test #1",
                                  "description": "A simple OPM (force controller action enter error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                  "name": "OPM Eval P3 Test #2",
                                  "description": "A simple OPM (force controller action enter error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "maPNVFgWTduQ5vMiDU2sEw",
                                  "name": "OPM Eval P3 Test #3",
                                  "description": "A simple OPM (force controller action enter error - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": []
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "Zu13opLlRwSmU2LHvEAHnA": {
                          "opcToJSON": {
                            "id": "Zu13opLlRwSmU2LHvEAHnA",
                            "name": "OPC Evaluate Enter Action Test #1",
                            "description": "Test controller action failure (no controller actions registered).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "I3ja3B00Rj-PIXnDrzQzNg": {
                                "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                "name": "OPM Eval P3 Test #1",
                                "description": "A simple OPM (force controller action enter error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "71VGW5zbRLiDf7E_2tFJ3g": {
                                "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                "name": "OPM Eval P3 Test #2",
                                "description": "A simple OPM (force controller action enter error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "maPNVFgWTduQ5vMiDU2sEw": {
                                "id": "maPNVFgWTduQ5vMiDU2sEw",
                                "name": "OPM Eval P3 Test #3",
                                "description": "A simple OPM (force controller action enter error - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                  "name": "OPM Eval P3 Test #1",
                                  "description": "A simple OPM (force controller action enter error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "I3ja3B00Rj-PIXnDrzQzNg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [Zu13opLlRwSmU2LHvEAHnA::OPC Evaluate Enter Action Test #1] Observable Controller Data Store",
                              "____description": "OPC [Zu13opLlRwSmU2LHvEAHnA::OPC Evaluate Enter Action Test #1] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "I3ja3B00Rj-PIXnDrzQzNg"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {},
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                            "name": "OPM Eval P3 Test #1",
                                            "description": "A simple OPM (force controller action enter error - bad message)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "noneSuchControllerAction": true
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [
                                              {
                                                "request": {
                                                  "noneSuchControllerAction": true
                                                },
                                                "response": {
                                                  "error": "No ControllerAction class instances registered!"
                                                }
                                              }
                                            ],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 1,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": [
                              "WARNING: No ControllerAction class instances have been registered!"
                            ]
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "HxrzwXDSTlWXQJ5XAMhgtA": {
                "harnessRequest": {
                  "id": "HxrzwXDSTlWXQJ5XAMhgtA",
                  "name": "OPC Evaluate Enter Action Test #2",
                  "description": "Test controller action failure (bad request message).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "HxrzwXDSTlWXQJ5XAMhgtA",
                            "name": "OPC Evaluate Enter Action Test #2",
                            "description": "Test controller action failure (bad request message).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "I3ja3B00Rj-PIXnDrzQzNg"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                  "name": "OPM Eval P3 Test #1",
                                  "description": "A simple OPM (force controller action enter error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                  "name": "OPM Eval P3 Test #2",
                                  "description": "A simple OPM (force controller action enter error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "maPNVFgWTduQ5vMiDU2sEw",
                                  "name": "OPM Eval P3 Test #3",
                                  "description": "A simple OPM (force controller action enter error - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "NpfrgiF1QTS6qp9vAMv4Dw",
                                  "operationName": "Bad Controller Action #1",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "EI5vvlWkTXSGjgygskFKaw",
                                  "inputTypeVDID": "ekg192LFHMoK7koXwvvN3g",
                                  "outputTypeVIID": "F8v250y1jGSHieMeGfxfNw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "4nDoeeQS5NZrkdGknJE1Bw"
                                },
                                {
                                  "operationID": "V4-doRzDTVyYFtHMM8Z2jQ",
                                  "operationName": "Bad Controller Action #2",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "td--0wlcuGQhN-aytMLocw",
                                  "inputTypeVDID": "Q0g1-p7FHIKw7kpmB_vNfg",
                                  "outputTypeVIID": "d8j-q7q-GASjFRCTp99eSw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "REoueU-ig9Y8kB-kLSzkBw"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "HxrzwXDSTlWXQJ5XAMhgtA": {
                          "opcToJSON": {
                            "id": "HxrzwXDSTlWXQJ5XAMhgtA",
                            "name": "OPC Evaluate Enter Action Test #2",
                            "description": "Test controller action failure (bad request message).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "I3ja3B00Rj-PIXnDrzQzNg": {
                                "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                "name": "OPM Eval P3 Test #1",
                                "description": "A simple OPM (force controller action enter error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "71VGW5zbRLiDf7E_2tFJ3g": {
                                "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                "name": "OPM Eval P3 Test #2",
                                "description": "A simple OPM (force controller action enter error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "maPNVFgWTduQ5vMiDU2sEw": {
                                "id": "maPNVFgWTduQ5vMiDU2sEw",
                                "name": "OPM Eval P3 Test #3",
                                "description": "A simple OPM (force controller action enter error - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                  "name": "OPM Eval P3 Test #1",
                                  "description": "A simple OPM (force controller action enter error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "I3ja3B00Rj-PIXnDrzQzNg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [HxrzwXDSTlWXQJ5XAMhgtA::OPC Evaluate Enter Action Test #2] Observable Controller Data Store",
                              "____description": "OPC [HxrzwXDSTlWXQJ5XAMhgtA::OPC Evaluate Enter Action Test #2] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "I3ja3B00Rj-PIXnDrzQzNg"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "gxLe07fE2uTWugzXWfoGDw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "TdBQpyuXslewXfxD_S82FA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "3NO3K9sLBtRXWRABzuqYiA",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "Etj0EzO8NVdSRY7tNYYUtA"
                              },
                              "supportedFilters": [
                                "[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1]",
                                "[V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                            "name": "OPM Eval P3 Test #1",
                                            "description": "A simple OPM (force controller action enter error - bad message)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "noneSuchControllerAction": true
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [
                                              {
                                                "request": {
                                                  "noneSuchControllerAction": true
                                                },
                                                "response": {
                                                  "error": "Filter [gxLe07fE2uTWugzXWfoGDw::Discriminator Filter] failed while performing main operation. Unrecognized request format. Request signature must match one of filter set {[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1], [V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]}."
                                                }
                                              }
                                            ],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 1,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "dcSJk7BZQ3qnlrgivMayUQ": {
                "harnessRequest": {
                  "id": "dcSJk7BZQ3qnlrgivMayUQ",
                  "name": "OPC Evaluate Enter Action Test #3",
                  "description": "Test controller action failure (bad action returns transport error).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "dcSJk7BZQ3qnlrgivMayUQ",
                            "name": "OPC Evaluate Enter Action Test #3",
                            "description": "Test controller action failure (bad action returns transport error).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "71VGW5zbRLiDf7E_2tFJ3g"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                  "name": "OPM Eval P3 Test #1",
                                  "description": "A simple OPM (force controller action enter error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                  "name": "OPM Eval P3 Test #2",
                                  "description": "A simple OPM (force controller action enter error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "maPNVFgWTduQ5vMiDU2sEw",
                                  "name": "OPM Eval P3 Test #3",
                                  "description": "A simple OPM (force controller action enter error - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "NpfrgiF1QTS6qp9vAMv4Dw",
                                  "operationName": "Bad Controller Action #1",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "EI5vvlWkTXSGjgygskFKaw",
                                  "inputTypeVDID": "ekg192LFHMoK7koXwvvN3g",
                                  "outputTypeVIID": "F8v250y1jGSHieMeGfxfNw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "4nDoeeQS5NZrkdGknJE1Bw"
                                },
                                {
                                  "operationID": "V4-doRzDTVyYFtHMM8Z2jQ",
                                  "operationName": "Bad Controller Action #2",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "td--0wlcuGQhN-aytMLocw",
                                  "inputTypeVDID": "Q0g1-p7FHIKw7kpmB_vNfg",
                                  "outputTypeVIID": "d8j-q7q-GASjFRCTp99eSw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "REoueU-ig9Y8kB-kLSzkBw"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "dcSJk7BZQ3qnlrgivMayUQ": {
                          "opcToJSON": {
                            "id": "dcSJk7BZQ3qnlrgivMayUQ",
                            "name": "OPC Evaluate Enter Action Test #3",
                            "description": "Test controller action failure (bad action returns transport error).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "I3ja3B00Rj-PIXnDrzQzNg": {
                                "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                "name": "OPM Eval P3 Test #1",
                                "description": "A simple OPM (force controller action enter error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "71VGW5zbRLiDf7E_2tFJ3g": {
                                "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                "name": "OPM Eval P3 Test #2",
                                "description": "A simple OPM (force controller action enter error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "maPNVFgWTduQ5vMiDU2sEw": {
                                "id": "maPNVFgWTduQ5vMiDU2sEw",
                                "name": "OPM Eval P3 Test #3",
                                "description": "A simple OPM (force controller action enter error - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                  "name": "OPM Eval P3 Test #2",
                                  "description": "A simple OPM (force controller action enter error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "71VGW5zbRLiDf7E_2tFJ3g"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [dcSJk7BZQ3qnlrgivMayUQ::OPC Evaluate Enter Action Test #3] Observable Controller Data Store",
                              "____description": "OPC [dcSJk7BZQ3qnlrgivMayUQ::OPC Evaluate Enter Action Test #3] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "71VGW5zbRLiDf7E_2tFJ3g"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "gxLe07fE2uTWugzXWfoGDw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "TdBQpyuXslewXfxD_S82FA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "3NO3K9sLBtRXWRABzuqYiA",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "Etj0EzO8NVdSRY7tNYYUtA"
                              },
                              "supportedFilters": [
                                "[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1]",
                                "[V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                            "name": "OPM Eval P3 Test #2",
                                            "description": "A simple OPM (force controller action enter error - action transport error)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "badControllerActionResponseError": true
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [
                                              {
                                                "request": {
                                                  "badControllerActionResponseError": true
                                                },
                                                "response": {
                                                  "error": "Filter [gxLe07fE2uTWugzXWfoGDw::Discriminator Filter] failed while performing main operation. Filter [NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1] failed while performing main operation. This controller action is hard-wired to return an error."
                                                }
                                              }
                                            ],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 1,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "SHneUm5GTDO--xVSUpL92Q": {
                "harnessRequest": {
                  "id": "SHneUm5GTDO--xVSUpL92Q",
                  "name": "OPC Evaluate Enter Action Test #4",
                  "description": "Test controller action failure (bad action throws exception).",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "SHneUm5GTDO--xVSUpL92Q",
                            "name": "OPC Evaluate Enter Action Test #4",
                            "description": "Test controller action failure (bad action throws exception).",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "maPNVFgWTduQ5vMiDU2sEw"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                  "name": "OPM Eval P3 Test #1",
                                  "description": "A simple OPM (force controller action enter error - bad message)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "noneSuchControllerAction": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                  "name": "OPM Eval P3 Test #2",
                                  "description": "A simple OPM (force controller action enter error - action transport error)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionResponseError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                },
                                {
                                  "id": "maPNVFgWTduQ5vMiDU2sEw",
                                  "name": "OPM Eval P3 Test #3",
                                  "description": "A simple OPM (force controller action enter error - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "NpfrgiF1QTS6qp9vAMv4Dw",
                                  "operationName": "Bad Controller Action #1",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to return a transport error (i.e. sets response.error).",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #1 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionResponseError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "EI5vvlWkTXSGjgygskFKaw",
                                  "inputTypeVDID": "ekg192LFHMoK7koXwvvN3g",
                                  "outputTypeVIID": "F8v250y1jGSHieMeGfxfNw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "4nDoeeQS5NZrkdGknJE1Bw"
                                },
                                {
                                  "operationID": "V4-doRzDTVyYFtHMM8Z2jQ",
                                  "operationName": "Bad Controller Action #2",
                                  "operationDescription": "A ControllerAction instance that is hard-wired to throw an exception.",
                                  "inputFilterSpec": {
                                    "____label": "Bad Controller Action #2 Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "badControllerActionThrowError": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "No Result (Default)",
                                    "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "td--0wlcuGQhN-aytMLocw",
                                  "inputTypeVDID": "Q0g1-p7FHIKw7kpmB_vNfg",
                                  "outputTypeVIID": "d8j-q7q-GASjFRCTp99eSw",
                                  "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                                  "operationVDID": "REoueU-ig9Y8kB-kLSzkBw"
                                }
                              ]
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "SHneUm5GTDO--xVSUpL92Q": {
                          "opcToJSON": {
                            "id": "SHneUm5GTDO--xVSUpL92Q",
                            "name": "OPC Evaluate Enter Action Test #4",
                            "description": "Test controller action failure (bad action throws exception).",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "I3ja3B00Rj-PIXnDrzQzNg": {
                                "id": "I3ja3B00Rj-PIXnDrzQzNg",
                                "name": "OPM Eval P3 Test #1",
                                "description": "A simple OPM (force controller action enter error - bad message)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "noneSuchControllerAction": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "71VGW5zbRLiDf7E_2tFJ3g": {
                                "id": "71VGW5zbRLiDf7E_2tFJ3g",
                                "name": "OPM Eval P3 Test #2",
                                "description": "A simple OPM (force controller action enter error - action transport error)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionResponseError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              },
                              "maPNVFgWTduQ5vMiDU2sEw": {
                                "id": "maPNVFgWTduQ5vMiDU2sEw",
                                "name": "OPM Eval P3 Test #3",
                                "description": "A simple OPM (force controller action enter error - action exception)",
                                "opmDataSpec": {
                                  "____types": "jsObject"
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "goal"
                                      }
                                    ]
                                  },
                                  "goal": {
                                    "description": "Test goal step.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "badControllerActionThrowError": true
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": []
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.test",
                                "opmiRef": {
                                  "id": "maPNVFgWTduQ5vMiDU2sEw",
                                  "name": "OPM Eval P3 Test #3",
                                  "description": "A simple OPM (force controller action enter error - action exception)",
                                  "opmDataSpec": {
                                    "____types": "jsObject"
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "goal"
                                        }
                                      ]
                                    },
                                    "goal": {
                                      "description": "Test goal step.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "badControllerActionThrowError": true
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": []
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "maPNVFgWTduQ5vMiDU2sEw"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [SHneUm5GTDO--xVSUpL92Q::OPC Evaluate Enter Action Test #4] Observable Controller Data Store",
                              "____description": "OPC [SHneUm5GTDO--xVSUpL92Q::OPC Evaluate Enter Action Test #4] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "test": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "____appdsl": {
                                  "opm": "maPNVFgWTduQ5vMiDU2sEw"
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "test": {
                                "__opmiStep": "uninitialized"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "gxLe07fE2uTWugzXWfoGDw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "TdBQpyuXslewXfxD_S82FA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "3NO3K9sLBtRXWRABzuqYiA",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "Etj0EzO8NVdSRY7tNYYUtA"
                              },
                              "supportedFilters": [
                                "[NpfrgiF1QTS6qp9vAMv4Dw::Bad Controller Action #1]",
                                "[V4-doRzDTVyYFtHMM8Z2jQ::Bad Controller Action #2]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "frames": 1,
                                    "errors": 1,
                                    "transitions": 0
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 1
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": [
                                          "yHP1RrAjDF9FH_9LhtLPEw"
                                        ]
                                      }
                                    },
                                    "bindings": {
                                      "yHP1RrAjDF9FH_9LhtLPEw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.test",
                                            "specPath": "~.test"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "maPNVFgWTduQ5vMiDU2sEw",
                                            "name": "OPM Eval P3 Test #3",
                                            "description": "A simple OPM (force controller action enter error - action exception)",
                                            "opmDataSpec": {
                                              "____types": "jsObject"
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "goal"
                                                  }
                                                ]
                                              },
                                              "goal": {
                                                "description": "Test goal step.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "badControllerActionThrowError": true
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": []
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "error",
                                          "finishStep": "uninitialized",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.test",
                                                    "ocdi": {
                                                      "test": {
                                                        "__opmiStep": "uninitialized"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [
                                              {
                                                "request": {
                                                  "badControllerActionThrowError": true
                                                },
                                                "response": {
                                                  "error": "ControllerAction threw an illegal exception that was handled by the OPC: This is a forced exception thrown from a controller action body function."
                                                }
                                              }
                                            ],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 1,
                                            "p4_finalize": 0,
                                            "total": 1
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "XsVRVdrxTNvzPj7OQrDwAg": {
              "ErHlg9R3SSaonNJr4mBi-g": {
                "harnessRequest": {
                  "id": "ErHlg9R3SSaonNJr4mBi-g",
                  "name": "ObservableProcessModel constructor #1",
                  "description": "ObservableProcessModel constructor test #1 (undefined constructor request)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessModel": {}
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "mC3pPO5wS3SxvhgZgMjsJQ": {
                        "ErHlg9R3SSaonNJr4mBi-g": {
                          "isValid": false,
                          "toJSON": "ObservableProcessModel::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject].",
                          "getID": "ObservableProcessModel::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject].",
                          "getName": "ObservableProcessModel::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject].",
                          "getDescription": "ObservableProcessModel::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject].",
                          "getDataSpec": "ObservableProcessModel::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject].",
                          "getDigraph": "ObservableProcessModel::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject]."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "XsVRVdrxTNvzPj7OQrDwAg": {
              "VwWYI4ReSTSfqSnoVXXC-w": {
                "harnessRequest": {
                  "id": "VwWYI4ReSTSfqSnoVXXC-w",
                  "name": "ObservableProcessModel constructor #2",
                  "description": "ObservableProcessModel constructor test #2 (minimal constructor request)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessModel": {
                          "constructorRequest": {
                            "id": "VwWYI4ReSTSfqSnoVXXC-w",
                            "name": "OPM #2",
                            "description": "OPM instance test #2 (minimal constructor request)"
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "mC3pPO5wS3SxvhgZgMjsJQ": {
                        "VwWYI4ReSTSfqSnoVXXC-w": {
                          "isValid": true,
                          "toJSON": {
                            "id": "VwWYI4ReSTSfqSnoVXXC-w",
                            "name": "OPM #2",
                            "description": "OPM instance test #2 (minimal constructor request)",
                            "opmDataSpec": {
                              "____types": "jsObject"
                            },
                            "steps": {}
                          },
                          "getID": "VwWYI4ReSTSfqSnoVXXC-w",
                          "getName": "OPM #2",
                          "getDescription": "OPM instance test #2 (minimal constructor request)",
                          "getDataSpec": {
                            "____types": "jsObject"
                          },
                          "getDigraph": {
                            "name": "[VwWYI4ReSTSfqSnoVXXC-w::OPM #2] OPM Digraph",
                            "description": "OPM instance test #2 (minimal constructor request)",
                            "vlist": [],
                            "elist": []
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "XsVRVdrxTNvzPj7OQrDwAg": {
              "HwB8EphzRkSG7AeoISMctQ": {
                "harnessRequest": {
                  "id": "HwB8EphzRkSG7AeoISMctQ",
                  "name": "ObsevableProcessModel constructor #3",
                  "description": "ObservableProcessModel constructor test #3 (OCD test #1)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessModel": {
                          "constructorRequest": {
                            "id": "HwB8EphzRkSG7AeoISMctQ",
                            "name": "ObsevableProcessModel constructor #3",
                            "description": "ObservableProcessModel constructor test #3 (OCD test #1)",
                            "opmDataSpec": {
                              "____bullshit": true
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "mC3pPO5wS3SxvhgZgMjsJQ": {
                        "HwB8EphzRkSG7AeoISMctQ": {
                          "isValid": false,
                          "toJSON": "ObservableProcessModel::constructor for [HwB8EphzRkSG7AeoISMctQ::ObsevableProcessModel constructor #3] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObsevableProcessModel constructor #3' declaration. Error validating developer-specified OPM filter spec. Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____bullshit' not allowed in declaration.",
                          "getID": "ObservableProcessModel::constructor for [HwB8EphzRkSG7AeoISMctQ::ObsevableProcessModel constructor #3] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObsevableProcessModel constructor #3' declaration. Error validating developer-specified OPM filter spec. Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____bullshit' not allowed in declaration.",
                          "getName": "ObservableProcessModel::constructor for [HwB8EphzRkSG7AeoISMctQ::ObsevableProcessModel constructor #3] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObsevableProcessModel constructor #3' declaration. Error validating developer-specified OPM filter spec. Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____bullshit' not allowed in declaration.",
                          "getDescription": "ObservableProcessModel::constructor for [HwB8EphzRkSG7AeoISMctQ::ObsevableProcessModel constructor #3] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObsevableProcessModel constructor #3' declaration. Error validating developer-specified OPM filter spec. Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____bullshit' not allowed in declaration.",
                          "getDataSpec": "ObservableProcessModel::constructor for [HwB8EphzRkSG7AeoISMctQ::ObsevableProcessModel constructor #3] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObsevableProcessModel constructor #3' declaration. Error validating developer-specified OPM filter spec. Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____bullshit' not allowed in declaration.",
                          "getDigraph": "ObservableProcessModel::constructor for [HwB8EphzRkSG7AeoISMctQ::ObsevableProcessModel constructor #3] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObsevableProcessModel constructor #3' declaration. Error validating developer-specified OPM filter spec. Filter factory failure: While examining data namespace '~.inputFilterSpec': Unrecognized typemap directive '____bullshit' not allowed in declaration."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "XsVRVdrxTNvzPj7OQrDwAg": {
              "YdzP0ZKMTme24BBJcyKevA": {
                "harnessRequest": {
                  "id": "YdzP0ZKMTme24BBJcyKevA",
                  "name": "ObservableProcessModel constructor #4",
                  "description": "ObservableProcessModel constructor test #4 (invalid id)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessModel": {
                          "constructorRequest": {
                            "id": "invalid",
                            "name": "ObservableProcessModel constructor #4",
                            "description": "ObservableProcessModel constructor test #4 (invalid id)"
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "mC3pPO5wS3SxvhgZgMjsJQ": {
                        "YdzP0ZKMTme24BBJcyKevA": {
                          "isValid": false,
                          "toJSON": "ObservableProcessModel::constructor for [invalid::ObservableProcessModel constructor #4] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObservableProcessModel constructor #4' declaration. Error validating developer-specified id. Not an IRUT: Expected 22-character string. Found 7-character string instead.",
                          "getID": "ObservableProcessModel::constructor for [invalid::ObservableProcessModel constructor #4] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObservableProcessModel constructor #4' declaration. Error validating developer-specified id. Not an IRUT: Expected 22-character string. Found 7-character string instead.",
                          "getName": "ObservableProcessModel::constructor for [invalid::ObservableProcessModel constructor #4] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObservableProcessModel constructor #4' declaration. Error validating developer-specified id. Not an IRUT: Expected 22-character string. Found 7-character string instead.",
                          "getDescription": "ObservableProcessModel::constructor for [invalid::ObservableProcessModel constructor #4] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObservableProcessModel constructor #4' declaration. Error validating developer-specified id. Not an IRUT: Expected 22-character string. Found 7-character string instead.",
                          "getDataSpec": "ObservableProcessModel::constructor for [invalid::ObservableProcessModel constructor #4] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObservableProcessModel constructor #4' declaration. Error validating developer-specified id. Not an IRUT: Expected 22-character string. Found 7-character string instead.",
                          "getDigraph": "ObservableProcessModel::constructor for [invalid::ObservableProcessModel constructor #4] failed yielding a zombie instance. Filter [XoPnz1p9REe-XO3mKGII3w::OPM Constructor Request Processor] failed while performing main operation. Error while evaluating subcontroller 'ObservableProcessModel constructor #4' declaration. Error validating developer-specified id. Not an IRUT: Expected 22-character string. Found 7-character string instead."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "V4rhwuR97Sdl5q9h1CIHTg": {
              "8UqseWhbQLSnDnKqu6eVpA": {
                "harnessRequest": {
                  "id": "8UqseWhbQLSnDnKqu6eVpA",
                  "name": "ControllerAction contructor #1",
                  "description": "Test ControllerAction class constructor #1 (undefined constructor request)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ControllerAction": {}
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "0xHlX_WKQ3y-3CFQ0DDx1w": {
                        "8UqseWhbQLSnDnKqu6eVpA": {
                          "isValid": false,
                          "toJSON": "ControllerAction::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [actXQlKYQ9KDriZba3t00w::Controller Action Filter Factory] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject]."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "V4rhwuR97Sdl5q9h1CIHTg": {
              "stn1B2JRSkOkFxuyejzGjQ": {
                "harnessRequest": {
                  "id": "stn1B2JRSkOkFxuyejzGjQ",
                  "name": "ControllerAction constructor #2",
                  "description": "Test ControllerAction class constructor #2 (minimal constructor request)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ControllerAction": {
                          "constructorRequest": {
                            "id": "stn1B2JRSkOkFxuyejzGjQ",
                            "name": "ControllAction Test #2",
                            "description": "A test ControllerAction plug-in filter.",
                            "actionRequestSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "action1": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "0xHlX_WKQ3y-3CFQ0DDx1w": {
                        "stn1B2JRSkOkFxuyejzGjQ": {
                          "isValid": true,
                          "toJSON": {
                            "operationID": "stn1B2JRSkOkFxuyejzGjQ",
                            "operationName": "ControllAction Test #2",
                            "operationDescription": "A test ControllerAction plug-in filter.",
                            "inputFilterSpec": {
                              "____label": "ControllAction Test #2 Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "opmBindingPath": {
                                  "____label": "OPM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "test": {
                                  "____types": "jsObject",
                                  "action1": {
                                    "____accept": "jsObject"
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____label": "No Result (Default)",
                              "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "Atx8FjZfYUxmrFTQQW7XvQ",
                            "inputTypeVDID": "1J_rqmMA7gddYW45vuT3Rw",
                            "outputTypeVIID": "2Ct2ZVLNFcvpNEjSjPhVcA",
                            "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                            "operationVDID": "yRqcedsdENbFkPmk76tRBw"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "SaPQhpVtKhQvT4xWAqtmXg": {
              "6TPB7tz4TQaGJYaRAhl_gQ": {
                "harnessRequest": {
                  "id": "6TPB7tz4TQaGJYaRAhl_gQ",
                  "name": "TransitionOperator constructor #1",
                  "description": "TransitionOperator constructor test #1 (undefined constructor request)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "TransitionOperator": {}
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "X2q-YtvCTrWx7csHq8R8Tw": {
                        "6TPB7tz4TQaGJYaRAhl_gQ": {
                          "isValid": false,
                          "toJSON": "TransitionOperator::constructor for [unspecified::unspecified] failed yielding a zombie instance. Filter [-99RI_6HTsiQgwN2OV1xXQ::Transition Operator Filter Factory] failed while normalizing request input. Error at path '~': Value of type 'jsUndefined' not in allowed type set [jsObject]."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "SaPQhpVtKhQvT4xWAqtmXg": {
              "8167V4JrSc-47BMNONdxvQ": {
                "harnessRequest": {
                  "id": "8167V4JrSc-47BMNONdxvQ",
                  "name": "TransitionOperator constructor #2",
                  "description": "TransitionOperator constructor test #2 (minimally defined contructor)",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "TransitionOperator": {
                          "constructorRequest": {
                            "id": "8167V4JrSc-47BMNONdxvQ",
                            "name": "TransitionOperator Test #2",
                            "description": "A simple test transition operator plug-in filter.",
                            "operatorRequestSpec": {
                              "____types": "jsObject",
                              "test": {
                                "____types": "jsObject",
                                "TransitionOperator1": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "X2q-YtvCTrWx7csHq8R8Tw": {
                        "8167V4JrSc-47BMNONdxvQ": {
                          "isValid": true,
                          "toJSON": {
                            "operationID": "8167V4JrSc-47BMNONdxvQ",
                            "operationName": "TransitionOperator Test #2",
                            "operationDescription": "A simple test transition operator plug-in filter.",
                            "inputFilterSpec": {
                              "____label": "TransitionOperator Test #2 Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "opmBindingPath": {
                                  "____label": "OPM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "test": {
                                  "____types": "jsObject",
                                  "TransitionOperator1": {
                                    "____accept": "jsObject"
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "KANd4sK71iHrmf2JDGWXqQ",
                            "inputTypeVDID": "BySkn4WRkpHCIAVkbSQxug",
                            "outputTypeVIID": "YsakJ46SDRmRfChsq5EIIg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "fIaNRM-1tZNl0nuc7s7lcg"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "XsVRVdrxTNvzPj7OQrDwAg": {
              "sO15Cox_SVqcCgyrOllAwQ": {
                "harnessRequest": {
                  "id": "sO15Cox_SVqcCgyrOllAwQ",
                  "name": "Frame Latch OPM Test #1",
                  "description": "Run our Observable Frame Latch OPM declaration through the OPM test harness.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessModel": {
                          "constructorRequest": {
                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                            "name": "Observable Frame Latch",
                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                            "opmDataSpec": {
                              "____label": "Observable Frame Latch",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "clock": {
                                "____accept": "jsBoolean",
                                "____defaultValue": false
                              }
                            },
                            "steps": {
                              "uninitialized": {
                                "description": "Default starting process step.",
                                "transitions": [
                                  {
                                    "nextStep": "updated",
                                    "transitionIf": {
                                      "always": true
                                    }
                                  }
                                ],
                                "actions": {
                                  "exit": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "ocd": {
                                              "setBooleanFlag": {
                                                "path": "#.clock"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "updated": {
                                "description": "The value managed by the frame latch has been written.",
                                "transitions": [
                                  {
                                    "nextStep": "waiting",
                                    "transitionIf": {
                                      "always": true
                                    }
                                  }
                                ],
                                "actions": {
                                  "exit": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "ocd": {
                                              "clearBooleanFlag": {
                                                "path": "#.clock"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "waiting": {
                                "description": "Frame latch value has not changed since last signalled update.",
                                "transitions": [
                                  {
                                    "nextStep": "updated",
                                    "transitionIf": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isBooleanFlagSet": {
                                                "path": "#.clock"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "mC3pPO5wS3SxvhgZgMjsJQ": {
                        "sO15Cox_SVqcCgyrOllAwQ": {
                          "isValid": true,
                          "toJSON": {
                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                            "name": "Observable Frame Latch",
                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                            "opmDataSpec": {
                              "____label": "Observable Frame Latch",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "clock": {
                                "____accept": "jsBoolean",
                                "____defaultValue": false
                              }
                            },
                            "steps": {
                              "uninitialized": {
                                "description": "Default starting process step.",
                                "actions": {
                                  "enter": [],
                                  "exit": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "ocd": {
                                              "setBooleanFlag": {
                                                "path": "#.clock"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "always": true
                                    },
                                    "nextStep": "updated"
                                  }
                                ]
                              },
                              "updated": {
                                "description": "The value managed by the frame latch has been written.",
                                "actions": {
                                  "enter": [],
                                  "exit": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "ocd": {
                                              "clearBooleanFlag": {
                                                "path": "#.clock"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "always": true
                                    },
                                    "nextStep": "waiting"
                                  }
                                ]
                              },
                              "waiting": {
                                "description": "Frame latch value has not changed since last signalled update.",
                                "actions": {
                                  "enter": [],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isBooleanFlagSet": {
                                                "path": "#.clock"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "nextStep": "updated"
                                  }
                                ]
                              }
                            }
                          },
                          "getID": "z_mTe02hSWmaM1iRO1pBeA",
                          "getName": "Observable Frame Latch",
                          "getDescription": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                          "getDataSpec": {
                            "____label": "Observable Frame Latch",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            }
                          },
                          "getDigraph": {
                            "name": "[z_mTe02hSWmaM1iRO1pBeA::Observable Frame Latch] OPM Digraph",
                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                            "vlist": [
                              {
                                "u": "uninitialized",
                                "p": {
                                  "description": "Default starting process step.",
                                  "actions": {
                                    "enter": [],
                                    "exit": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "actions": {
                                              "ocd": {
                                                "setBooleanFlag": {
                                                  "path": "#.clock"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "u": "updated",
                                "p": {
                                  "description": "The value managed by the frame latch has been written.",
                                  "actions": {
                                    "enter": [],
                                    "exit": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "actions": {
                                              "ocd": {
                                                "clearBooleanFlag": {
                                                  "path": "#.clock"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "u": "waiting",
                                "p": {
                                  "description": "Frame latch value has not changed since last signalled update.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              }
                            ],
                            "elist": [
                              {
                                "e": {
                                  "u": "uninitialized",
                                  "v": "updated"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "updated",
                                  "v": "waiting"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "waiting",
                                  "v": "updated"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isBooleanFlagSet": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "uZN6-qpIQO6CkwmLDWtMCw": {
                "harnessRequest": {
                  "id": "uZN6-qpIQO6CkwmLDWtMCw",
                  "name": "OPC Frame Latch Test #1",
                  "description": "Try to apply the Frame Latch OPM in an OPC system.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "uZN6-qpIQO6CkwmLDWtMCw",
                            "name": "OPC Frame Latch Test #1",
                            "description": "Try to apply the Frame Latch OPM in an OPC system.",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "frameLatch": {
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                },
                                "value": {
                                  "____accept": "jsString",
                                  "____defaultValue": "default"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "z_mTe02hSWmaM1iRO1pBeA",
                                  "name": "Observable Frame Latch",
                                  "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                  "opmDataSpec": {
                                    "____label": "Observable Frame Latch",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "clock": {
                                      "____accept": "jsBoolean",
                                      "____defaultValue": false
                                    }
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "setBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    },
                                    "updated": {
                                      "description": "The value managed by the frame latch has been written.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "clearBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "waiting"
                                        }
                                      ]
                                    },
                                    "waiting": {
                                      "description": "Frame latch value has not changed since last signalled update.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                                  "operationName": "Clear Boolean Flag",
                                  "operationDescription": "Clears a Boolean flag in the OCD.",
                                  "inputFilterSpec": {
                                    "____label": "Clear Boolean Flag Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "clearBooleanFlag": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                                  "inputTypeVDID": "ouIsY-huis0tFd2_lHI_qA",
                                  "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                                  "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                                  "operationVDID": "21zxkmR-mjHNlBIwaJ2tSA"
                                },
                                {
                                  "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                                  "operationName": "Set Boolean Flag",
                                  "operationDescription": "Sets a Boolean flag in the OCD.",
                                  "inputFilterSpec": {
                                    "____label": "Set Boolean Flag Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "setBooleanFlag": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                                  "inputTypeVDID": "cERI940VZR5U7QOd6FeiGQ",
                                  "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                                  "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                                  "operationVDID": "bE_OksOp1jF7C44weUB_SA"
                                },
                                {
                                  "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                                  "operationName": "Write Frame Latch",
                                  "operationDescription": "Writes the value made observable by frame latch OPM instance.",
                                  "inputFilterSpec": {
                                    "____label": "Write Frame Latch Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "frameLatch": {
                                              "____types": "jsObject",
                                              "write": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____label": "Frame Latch Bound Namespace Path",
                                                  "____accept": "jsString"
                                                },
                                                "value": {
                                                  "____label": "Write Value",
                                                  "____opaque": true
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "Write Frame Latch Result",
                                    "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                                    "____opaque": true
                                  },
                                  "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                                  "inputTypeVDID": "_sHq6rzS5dLZDEfwpEy_Yw",
                                  "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                                  "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                                  "operationVDID": "E6VN-IT57adhKU13b50bSw"
                                },
                                {
                                  "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                  "operationName": "OCD Read Namespace Indirect",
                                  "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Read Namespace Indirect Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "readNamespaceIndirect": {
                                                "____types": "jsObject",
                                                "path2": {
                                                  "____label": "Target Path Namespace Path",
                                                  "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____opaque": true
                                  },
                                  "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                                  "inputTypeVDID": "nsUj_P5arQ5jRvvexu8DsA",
                                  "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                                  "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                  "operationVDID": "0NacE_oXqVe5Glvt_yxvtA"
                                },
                                {
                                  "operationID": "d2vRmtn2QA6Ox8W4PwDWNA",
                                  "operationName": "React Client View Rehydrate",
                                  "operationDescription": "Rehydrate server-rendered React view and connect UI event handlers.",
                                  "inputFilterSpec": {
                                    "____label": "React Client View Rehydrate Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "react": {
                                              "____types": "jsObject",
                                              "rehydrate": {
                                                "____types": "jsBoolean",
                                                "____inValueSet": [
                                                  true
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "dJjTV9BAp4Z9pSavLeZ-wQ",
                                  "inputTypeVDID": "dWayec_SLLNxaNT03o8KAQ",
                                  "outputTypeVIID": "8JLm4g169JeAd37FiSdhHA",
                                  "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                                  "operationVDID": "6hSNkiHYVjGWTpEw603mSA"
                                }
                              ]
                            ]
                          },
                          "actRequests": [
                            {
                              "actorName": "uZN6-qpIQO6CkwmLDWtMCw test action call",
                              "actorDescription": "A simple attempt to set a frame latch value.",
                              "actionRequest": {
                                "holarchy": {
                                  "sml": {
                                    "actions": {
                                      "frameLatch": {
                                        "write": {
                                          "path": "~.frameLatch",
                                          "value": "whatever"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "uZN6-qpIQO6CkwmLDWtMCw": {
                          "opcToJSON": {
                            "id": "uZN6-qpIQO6CkwmLDWtMCw",
                            "name": "OPC Frame Latch Test #1",
                            "description": "Try to apply the Frame Latch OPM in an OPC system.",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "z_mTe02hSWmaM1iRO1pBeA": {
                                "id": "z_mTe02hSWmaM1iRO1pBeA",
                                "name": "Observable Frame Latch",
                                "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                "opmDataSpec": {
                                  "____label": "Observable Frame Latch",
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "clock": {
                                    "____accept": "jsBoolean",
                                    "____defaultValue": false
                                  }
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "setBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "updated"
                                      }
                                    ]
                                  },
                                  "updated": {
                                    "description": "The value managed by the frame latch has been written.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "clearBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "waiting"
                                      }
                                    ]
                                  },
                                  "waiting": {
                                    "description": "Frame latch value has not changed since last signalled update.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isBooleanFlagSet": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "nextStep": "updated"
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.frameLatch",
                                "opmiRef": {
                                  "id": "z_mTe02hSWmaM1iRO1pBeA",
                                  "name": "Observable Frame Latch",
                                  "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                  "opmDataSpec": {
                                    "____label": "Observable Frame Latch",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "clock": {
                                      "____accept": "jsBoolean",
                                      "____defaultValue": false
                                    }
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "setBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    },
                                    "updated": {
                                      "description": "The value managed by the frame latch has been written.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "clearBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "waiting"
                                        }
                                      ]
                                    },
                                    "waiting": {
                                      "description": "Frame latch value has not changed since last signalled update.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "frameLatch": {
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                },
                                "value": {
                                  "____accept": "jsString",
                                  "____defaultValue": "default"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [uZN6-qpIQO6CkwmLDWtMCw::OPC Frame Latch Test #1] Observable Controller Data Store",
                              "____description": "OPC [uZN6-qpIQO6CkwmLDWtMCw::OPC Frame Latch Test #1] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "frameLatch": {
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                },
                                "value": {
                                  "____accept": "jsString",
                                  "____defaultValue": "default"
                                },
                                "____label": "Observable Frame Latch",
                                "____defaultValue": {},
                                "clock": {
                                  "____accept": "jsBoolean",
                                  "____defaultValue": false
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "frameLatch": {
                                "value": "default",
                                "clock": false,
                                "__opmiStep": "waiting"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "IKoGNsvxAZLjwaSho4PTlg",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "SdJrC3D28XyjpTSr948vKQ",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "sTJyFaoOy07ns2qwOvpuoQ",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "KbL0EzU0NVel1Y7t7XgUtA"
                              },
                              "supportedFilters": [
                                "[5rFEDGLYRSiZCeChMnkCHQ::Set Boolean Flag]",
                                "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                                "[_yxWfFLnTqqN-UxRdd7W5w::Clear Boolean Flag]",
                                "[d2vRmtn2QA6Ox8W4PwDWNA::React Client View Rehydrate]",
                                "[iyvk_9vhRn2qvrjOes5v7Q::Write Frame Latch]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 3,
                                    "frames": 3,
                                    "errors": 0,
                                    "transitions": 2
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 1,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [
                                          "rWatZg2xDbHwiPCI5s_mzw"
                                        ],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {
                                      "rWatZg2xDbHwiPCI5s_mzw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.frameLatch",
                                            "specPath": "~.frameLatch"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                                            "name": "Observable Frame Latch",
                                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                            "opmDataSpec": {
                                              "____label": "Observable Frame Latch",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "clock": {
                                                "____accept": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "setBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              },
                                              "updated": {
                                                "description": "The value managed by the frame latch has been written.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "clearBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "waiting"
                                                  }
                                                ]
                                              },
                                              "waiting": {
                                                "description": "Frame latch value has not changed since last signalled update.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "transitioned",
                                          "finishStep": "updated",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.frameLatch",
                                                    "ocdi": {
                                                      "frameLatch": {
                                                        "value": "default",
                                                        "clock": false,
                                                        "__opmiStep": "waiting"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "setBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "error": null
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": {
                                              "error": null,
                                              "result": "updated"
                                            }
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 1,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [
                                          "rWatZg2xDbHwiPCI5s_mzw"
                                        ],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {
                                      "rWatZg2xDbHwiPCI5s_mzw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.frameLatch",
                                            "specPath": "~.frameLatch"
                                          },
                                          "initialStep": "updated",
                                          "opmRef": {
                                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                                            "name": "Observable Frame Latch",
                                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                            "opmDataSpec": {
                                              "____label": "Observable Frame Latch",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "clock": {
                                                "____accept": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "setBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              },
                                              "updated": {
                                                "description": "The value managed by the frame latch has been written.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "clearBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "waiting"
                                                  }
                                                ]
                                              },
                                              "waiting": {
                                                "description": "Frame latch value has not changed since last signalled update.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "transitioned",
                                          "finishStep": "waiting",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.frameLatch",
                                                    "ocdi": {
                                                      "frameLatch": {
                                                        "value": "default",
                                                        "clock": false,
                                                        "__opmiStep": "waiting"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "clearBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "error": null
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": {
                                              "error": null,
                                              "result": "waiting"
                                            }
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 1,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {
                                      "rWatZg2xDbHwiPCI5s_mzw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.frameLatch",
                                            "specPath": "~.frameLatch"
                                          },
                                          "initialStep": "waiting",
                                          "opmRef": {
                                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                                            "name": "Observable Frame Latch",
                                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                            "opmDataSpec": {
                                              "____label": "Observable Frame Latch",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "clock": {
                                                "____accept": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "setBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              },
                                              "updated": {
                                                "description": "The value managed by the frame latch has been written.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "clearBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "waiting"
                                                  }
                                                ]
                                              },
                                              "waiting": {
                                                "description": "Frame latch value has not changed since last signalled update.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "noop",
                                          "finishStep": "waiting",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.frameLatch",
                                                    "ocdi": {
                                                      "frameLatch": {
                                                        "value": "default",
                                                        "clock": false,
                                                        "__opmiStep": "waiting"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "holarchy": {
                                                      "sml": {
                                                        "operators": {
                                                          "ocd": {
                                                            "isBooleanFlagSet": {
                                                              "path": "#.clock"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": false
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": [
                            {
                              "actRequest": {
                                "actorName": "uZN6-qpIQO6CkwmLDWtMCw test action call",
                                "actorDescription": "A simple attempt to set a frame latch value.",
                                "actionRequest": {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "frameLatch": {
                                          "write": {
                                            "path": "~.frameLatch",
                                            "value": "whatever"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "actResponse": {
                                "error": null,
                                "result": {
                                  "evalNumber": 1,
                                  "summary": {
                                    "counts": {
                                      "bindings": 3,
                                      "frames": 3,
                                      "errors": 0,
                                      "transitions": 2
                                    }
                                  },
                                  "evalFrames": [
                                    {
                                      "summary": {
                                        "counts": {
                                          "bindings": 1,
                                          "transitions": 1,
                                          "errors": 0
                                        },
                                        "reports": {
                                          "transitions": [
                                            "rWatZg2xDbHwiPCI5s_mzw"
                                          ],
                                          "errors": []
                                        }
                                      },
                                      "bindings": {
                                        "rWatZg2xDbHwiPCI5s_mzw": {
                                          "evalRequest": {
                                            "dataBinding": {
                                              "dataPath": "~.frameLatch",
                                              "specPath": "~.frameLatch"
                                            },
                                            "initialStep": "waiting",
                                            "opmRef": {
                                              "id": "z_mTe02hSWmaM1iRO1pBeA",
                                              "name": "Observable Frame Latch",
                                              "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                              "opmDataSpec": {
                                                "____label": "Observable Frame Latch",
                                                "____types": "jsObject",
                                                "____defaultValue": {},
                                                "clock": {
                                                  "____accept": "jsBoolean",
                                                  "____defaultValue": false
                                                }
                                              },
                                              "steps": {
                                                "uninitialized": {
                                                  "description": "Default starting process step.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "actions": {
                                                              "ocd": {
                                                                "setBooleanFlag": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "always": true
                                                      },
                                                      "nextStep": "updated"
                                                    }
                                                  ]
                                                },
                                                "updated": {
                                                  "description": "The value managed by the frame latch has been written.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "actions": {
                                                              "ocd": {
                                                                "clearBooleanFlag": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "always": true
                                                      },
                                                      "nextStep": "waiting"
                                                    }
                                                  ]
                                                },
                                                "waiting": {
                                                  "description": "Frame latch value has not changed since last signalled update.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": []
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isBooleanFlagSet": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nextStep": "updated"
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          },
                                          "evalResponse": {
                                            "status": "transitioned",
                                            "finishStep": "updated",
                                            "phases": {
                                              "p1_toperator": [
                                                {
                                                  "request": {
                                                    "context": {
                                                      "opmBindingPath": "~.frameLatch",
                                                      "ocdi": {
                                                        "frameLatch": {
                                                          "value": "whatever",
                                                          "clock": false,
                                                          "__opmiStep": "waiting"
                                                        }
                                                      },
                                                      "transitionDispatcher": {
                                                        "filterDescriptor": {
                                                          "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                          "operationName": "Discriminator Filter",
                                                          "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                          "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                          "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                          "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                          "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                        },
                                                        "supportedFilters": [
                                                          "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                          "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                          "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                          "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                          "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                          "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                          "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                        ],
                                                        "options": {
                                                          "action": "routeRequest"
                                                        }
                                                      }
                                                    },
                                                    "operatorRequest": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "response": {
                                                    "error": null,
                                                    "result": true
                                                  }
                                                }
                                              ],
                                              "p2_exit": [],
                                              "p3_enter": [],
                                              "p4_finalize": {
                                                "error": null,
                                                "result": "updated"
                                              }
                                            },
                                            "errors": {
                                              "p1_toperator": 0,
                                              "p2_exit": 0,
                                              "p3_enter": 0,
                                              "p4_finalize": 0,
                                              "total": 0
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "summary": {
                                        "counts": {
                                          "bindings": 1,
                                          "transitions": 1,
                                          "errors": 0
                                        },
                                        "reports": {
                                          "transitions": [
                                            "rWatZg2xDbHwiPCI5s_mzw"
                                          ],
                                          "errors": []
                                        }
                                      },
                                      "bindings": {
                                        "rWatZg2xDbHwiPCI5s_mzw": {
                                          "evalRequest": {
                                            "dataBinding": {
                                              "dataPath": "~.frameLatch",
                                              "specPath": "~.frameLatch"
                                            },
                                            "initialStep": "updated",
                                            "opmRef": {
                                              "id": "z_mTe02hSWmaM1iRO1pBeA",
                                              "name": "Observable Frame Latch",
                                              "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                              "opmDataSpec": {
                                                "____label": "Observable Frame Latch",
                                                "____types": "jsObject",
                                                "____defaultValue": {},
                                                "clock": {
                                                  "____accept": "jsBoolean",
                                                  "____defaultValue": false
                                                }
                                              },
                                              "steps": {
                                                "uninitialized": {
                                                  "description": "Default starting process step.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "actions": {
                                                              "ocd": {
                                                                "setBooleanFlag": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "always": true
                                                      },
                                                      "nextStep": "updated"
                                                    }
                                                  ]
                                                },
                                                "updated": {
                                                  "description": "The value managed by the frame latch has been written.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "actions": {
                                                              "ocd": {
                                                                "clearBooleanFlag": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "always": true
                                                      },
                                                      "nextStep": "waiting"
                                                    }
                                                  ]
                                                },
                                                "waiting": {
                                                  "description": "Frame latch value has not changed since last signalled update.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": []
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isBooleanFlagSet": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nextStep": "updated"
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          },
                                          "evalResponse": {
                                            "status": "transitioned",
                                            "finishStep": "waiting",
                                            "phases": {
                                              "p1_toperator": [
                                                {
                                                  "request": {
                                                    "context": {
                                                      "opmBindingPath": "~.frameLatch",
                                                      "ocdi": {
                                                        "frameLatch": {
                                                          "value": "whatever",
                                                          "clock": false,
                                                          "__opmiStep": "waiting"
                                                        }
                                                      },
                                                      "transitionDispatcher": {
                                                        "filterDescriptor": {
                                                          "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                          "operationName": "Discriminator Filter",
                                                          "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                          "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                          "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                          "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                          "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                        },
                                                        "supportedFilters": [
                                                          "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                          "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                          "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                          "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                          "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                          "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                          "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                        ],
                                                        "options": {
                                                          "action": "routeRequest"
                                                        }
                                                      }
                                                    },
                                                    "operatorRequest": {
                                                      "always": true
                                                    }
                                                  },
                                                  "response": {
                                                    "error": null,
                                                    "result": true
                                                  }
                                                }
                                              ],
                                              "p2_exit": [
                                                {
                                                  "request": {
                                                    "holarchy": {
                                                      "sml": {
                                                        "actions": {
                                                          "ocd": {
                                                            "clearBooleanFlag": {
                                                              "path": "#.clock"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "response": {
                                                    "error": null
                                                  }
                                                }
                                              ],
                                              "p3_enter": [],
                                              "p4_finalize": {
                                                "error": null,
                                                "result": "waiting"
                                              }
                                            },
                                            "errors": {
                                              "p1_toperator": 0,
                                              "p2_exit": 0,
                                              "p3_enter": 0,
                                              "p4_finalize": 0,
                                              "total": 0
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "summary": {
                                        "counts": {
                                          "bindings": 1,
                                          "transitions": 0,
                                          "errors": 0
                                        },
                                        "reports": {
                                          "transitions": [],
                                          "errors": []
                                        }
                                      },
                                      "bindings": {
                                        "rWatZg2xDbHwiPCI5s_mzw": {
                                          "evalRequest": {
                                            "dataBinding": {
                                              "dataPath": "~.frameLatch",
                                              "specPath": "~.frameLatch"
                                            },
                                            "initialStep": "waiting",
                                            "opmRef": {
                                              "id": "z_mTe02hSWmaM1iRO1pBeA",
                                              "name": "Observable Frame Latch",
                                              "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                              "opmDataSpec": {
                                                "____label": "Observable Frame Latch",
                                                "____types": "jsObject",
                                                "____defaultValue": {},
                                                "clock": {
                                                  "____accept": "jsBoolean",
                                                  "____defaultValue": false
                                                }
                                              },
                                              "steps": {
                                                "uninitialized": {
                                                  "description": "Default starting process step.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "actions": {
                                                              "ocd": {
                                                                "setBooleanFlag": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "always": true
                                                      },
                                                      "nextStep": "updated"
                                                    }
                                                  ]
                                                },
                                                "updated": {
                                                  "description": "The value managed by the frame latch has been written.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "actions": {
                                                              "ocd": {
                                                                "clearBooleanFlag": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "always": true
                                                      },
                                                      "nextStep": "waiting"
                                                    }
                                                  ]
                                                },
                                                "waiting": {
                                                  "description": "Frame latch value has not changed since last signalled update.",
                                                  "actions": {
                                                    "enter": [],
                                                    "exit": []
                                                  },
                                                  "transitions": [
                                                    {
                                                      "transitionIf": {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isBooleanFlagSet": {
                                                                  "path": "#.clock"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nextStep": "updated"
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          },
                                          "evalResponse": {
                                            "status": "noop",
                                            "finishStep": "waiting",
                                            "phases": {
                                              "p1_toperator": [
                                                {
                                                  "request": {
                                                    "context": {
                                                      "opmBindingPath": "~.frameLatch",
                                                      "ocdi": {
                                                        "frameLatch": {
                                                          "value": "whatever",
                                                          "clock": false,
                                                          "__opmiStep": "waiting"
                                                        }
                                                      },
                                                      "transitionDispatcher": {
                                                        "filterDescriptor": {
                                                          "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                          "operationName": "Discriminator Filter",
                                                          "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                          "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                          "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                          "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                          "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                        },
                                                        "supportedFilters": [
                                                          "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                          "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                          "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                          "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                          "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                          "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                          "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                        ],
                                                        "options": {
                                                          "action": "routeRequest"
                                                        }
                                                      }
                                                    },
                                                    "operatorRequest": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "response": {
                                                    "error": null,
                                                    "result": false
                                                  }
                                                }
                                              ],
                                              "p2_exit": [],
                                              "p3_enter": [],
                                              "p4_finalize": null
                                            },
                                            "errors": {
                                              "p1_toperator": 0,
                                              "p2_exit": 0,
                                              "p3_enter": 0,
                                              "p4_finalize": 0,
                                              "total": 0
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "XsVRVdrxTNvzPj7OQrDwAg": {
              "zUoUas3CTj2HLDfpNf4NTw": {
                "harnessRequest": {
                  "id": "zUoUas3CTj2HLDfpNf4NTw",
                  "name": "d2r2/React Client Output Processor OPM #1",
                  "description": "Attempt to instantiate the current d2r2/React Client Display Adaptor OPM declaration via our test harness.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessModel": {
                          "constructorRequest": {
                            "id": "IxoJ83u0TXmG7PLUYBvsyg",
                            "name": "d2r2/React Client Display Adaptor",
                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                            "opmDataSpec": {
                              "____label": "d2r2/React Client Display Adaptor Memory",
                              "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "inputs": {
                                "____label": "Adaptor Inputs",
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "ComponentRouter": {
                                  "____label": "d2r2 <ComponentRouter/>",
                                  "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                  "____accept": [
                                    "jsNull",
                                    "jsFunction"
                                  ],
                                  "____defaultValue": null
                                },
                                "DOMElement": {
                                  "____label": "d2r2 Target DOM Element",
                                  "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                  "____opaque": true,
                                  "____defaultValue": null
                                },
                                "pathRenderContext": {
                                  "____label": "Render Context OCD Path",
                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                },
                                "pathRenderData": {
                                  "____label": "Render Data OCD Path",
                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                },
                                "clock": {
                                  "____label": "React Output Processor Clock",
                                  "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                  "____types": "jsObject",
                                  "____appdsl": {
                                    "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                  },
                                  "value": {
                                    "____label": "Render Info",
                                    "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "renderCount": {
                                      "____accept": "jsNumber",
                                      "____defaultValue": -1
                                    }
                                  }
                                }
                              }
                            },
                            "steps": {
                              "uninitialized": {
                                "description": "Default OPM process step.",
                                "transitions": [
                                  {
                                    "nextStep": "wait_invariants",
                                    "transitionIf": {
                                      "always": true
                                    }
                                  }
                                ]
                              },
                              "wait_invariants": {
                                "description": "Waiting for input invariants to be satisfied.",
                                "transitions": [
                                  {
                                    "nextStep": "initialized",
                                    "transitionIf": {
                                      "and": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.ComponentRouter"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.DOMElement"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.pathRenderContext"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.pathRenderData"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "initialized": {
                                "description": "Input invariants have been satisfied.",
                                "transitions": [
                                  {
                                    "nextStep": "render",
                                    "transitionIf": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.clock.value"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "nextStep": "rehydrate",
                                    "transitionIf": {
                                      "always": true
                                    }
                                  }
                                ]
                              },
                              "rehydrate": {
                                "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                "actions": {
                                  "enter": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "react": {
                                              "rehydrate": true
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "transitions": [
                                  {
                                    "nextStep": "wait_clock",
                                    "transitionIf": {
                                      "always": true
                                    }
                                  }
                                ]
                              },
                              "render": {
                                "description": "Rendering client application view updates.",
                                "actions": {
                                  "enter": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "react": {
                                              "render": true
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "transitions": [
                                  {
                                    "nextStep": "wait_clock",
                                    "transitionIf": {
                                      "always": true
                                    }
                                  }
                                ]
                              },
                              "wait_clock": {
                                "description": "Waiting for next clock signal to re-render client application view.",
                                "transitions": [
                                  {
                                    "nextStep": "render",
                                    "transitionIf": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "opmInStep": {
                                              "path": "#.clock",
                                              "step": "updated"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "mC3pPO5wS3SxvhgZgMjsJQ": {
                        "zUoUas3CTj2HLDfpNf4NTw": {
                          "isValid": true,
                          "toJSON": {
                            "id": "IxoJ83u0TXmG7PLUYBvsyg",
                            "name": "d2r2/React Client Display Adaptor",
                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                            "opmDataSpec": {
                              "____label": "d2r2/React Client Display Adaptor Memory",
                              "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "inputs": {
                                "____label": "Adaptor Inputs",
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "ComponentRouter": {
                                  "____label": "d2r2 <ComponentRouter/>",
                                  "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                  "____accept": [
                                    "jsNull",
                                    "jsFunction"
                                  ],
                                  "____defaultValue": null
                                },
                                "DOMElement": {
                                  "____label": "d2r2 Target DOM Element",
                                  "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                  "____opaque": true,
                                  "____defaultValue": null
                                },
                                "pathRenderContext": {
                                  "____label": "Render Context OCD Path",
                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                },
                                "pathRenderData": {
                                  "____label": "Render Data OCD Path",
                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                },
                                "clock": {
                                  "____label": "React Output Processor Clock",
                                  "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                  "____types": "jsObject",
                                  "____appdsl": {
                                    "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                  },
                                  "value": {
                                    "____label": "Render Info",
                                    "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "renderCount": {
                                      "____accept": "jsNumber",
                                      "____defaultValue": -1
                                    }
                                  }
                                }
                              }
                            },
                            "steps": {
                              "uninitialized": {
                                "description": "Default OPM process step.",
                                "actions": {
                                  "enter": [],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "always": true
                                    },
                                    "nextStep": "wait_invariants"
                                  }
                                ]
                              },
                              "wait_invariants": {
                                "description": "Waiting for input invariants to be satisfied.",
                                "actions": {
                                  "enter": [],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "and": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.ComponentRouter"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.DOMElement"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.pathRenderContext"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.inputs.pathRenderData"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "nextStep": "initialized"
                                  }
                                ]
                              },
                              "initialized": {
                                "description": "Input invariants have been satisfied.",
                                "actions": {
                                  "enter": [],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.clock.value"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "nextStep": "render"
                                  },
                                  {
                                    "transitionIf": {
                                      "always": true
                                    },
                                    "nextStep": "rehydrate"
                                  }
                                ]
                              },
                              "rehydrate": {
                                "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                "actions": {
                                  "enter": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "react": {
                                              "rehydrate": true
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "always": true
                                    },
                                    "nextStep": "wait_clock"
                                  }
                                ]
                              },
                              "render": {
                                "description": "Rendering client application view updates.",
                                "actions": {
                                  "enter": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "actions": {
                                            "react": {
                                              "render": true
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "always": true
                                    },
                                    "nextStep": "wait_clock"
                                  }
                                ]
                              },
                              "wait_clock": {
                                "description": "Waiting for next clock signal to re-render client application view.",
                                "actions": {
                                  "enter": [],
                                  "exit": []
                                },
                                "transitions": [
                                  {
                                    "transitionIf": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "opmInStep": {
                                              "path": "#.clock",
                                              "step": "updated"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "nextStep": "render"
                                  }
                                ]
                              }
                            }
                          },
                          "getID": "IxoJ83u0TXmG7PLUYBvsyg",
                          "getName": "d2r2/React Client Display Adaptor",
                          "getDescription": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                          "getDataSpec": {
                            "____label": "d2r2/React Client Display Adaptor Memory",
                            "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "inputs": {
                              "____label": "Adaptor Inputs",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "ComponentRouter": {
                                "____label": "d2r2 <ComponentRouter/>",
                                "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                "____accept": [
                                  "jsNull",
                                  "jsFunction"
                                ],
                                "____defaultValue": null
                              },
                              "DOMElement": {
                                "____label": "d2r2 Target DOM Element",
                                "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                "____opaque": true,
                                "____defaultValue": null
                              },
                              "pathRenderContext": {
                                "____label": "Render Context OCD Path",
                                "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                "____accept": [
                                  "jsNull",
                                  "jsString"
                                ],
                                "____defaultValue": null
                              },
                              "pathRenderData": {
                                "____label": "Render Data OCD Path",
                                "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                "____accept": [
                                  "jsNull",
                                  "jsString"
                                ],
                                "____defaultValue": null
                              },
                              "clock": {
                                "____label": "React Output Processor Clock",
                                "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                },
                                "value": {
                                  "____label": "Render Info",
                                  "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "renderCount": {
                                    "____accept": "jsNumber",
                                    "____defaultValue": -1
                                  }
                                }
                              }
                            }
                          },
                          "getDigraph": {
                            "name": "[IxoJ83u0TXmG7PLUYBvsyg::d2r2/React Client Display Adaptor] OPM Digraph",
                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                            "vlist": [
                              {
                                "u": "uninitialized",
                                "p": {
                                  "description": "Default OPM process step.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "wait_invariants",
                                "p": {
                                  "description": "Waiting for input invariants to be satisfied.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "initialized",
                                "p": {
                                  "description": "Input invariants have been satisfied.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "rehydrate",
                                "p": {
                                  "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                  "actions": {
                                    "enter": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "actions": {
                                              "react": {
                                                "rehydrate": true
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "render",
                                "p": {
                                  "description": "Rendering client application view updates.",
                                  "actions": {
                                    "enter": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "actions": {
                                              "react": {
                                                "render": true
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "wait_clock",
                                "p": {
                                  "description": "Waiting for next clock signal to re-render client application view.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              }
                            ],
                            "elist": [
                              {
                                "e": {
                                  "u": "uninitialized",
                                  "v": "wait_invariants"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "wait_invariants",
                                  "v": "initialized"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "and": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.ComponentRouter"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.DOMElement"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.pathRenderContext"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.pathRenderData"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "initialized",
                                  "v": "render"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.clock.value"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "initialized",
                                  "v": "rehydrate"
                                },
                                "p": {
                                  "priority": 1,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "rehydrate",
                                  "v": "wait_clock"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "render",
                                  "v": "wait_clock"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "wait_clock",
                                  "v": "render"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "opmInStep": {
                                            "path": "#.clock",
                                            "step": "updated"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "dosRgxmiR66ongCbJB78ow": {
            "bvj2u51Uw5_SD1TRZNpwXA": {
              "fzuITg9BQbyV7jNv39Gv6w": {
                "harnessRequest": {
                  "id": "fzuITg9BQbyV7jNv39Gv6w",
                  "name": "d2r2/React Client Output Processor OPC #1",
                  "description": "Attempt to apply the d2r2/React Client Display Adaptor OPM inside of an OPC instance.",
                  "vectorRequest": {
                    "holistic": {
                      "holarchy": {
                        "ObservableProcessController": {
                          "constructorRequest": {
                            "id": "fzuITg9BQbyV7jNv39Gv6w",
                            "name": "d2r2/React Client Display Adaptor OPC #1",
                            "description": "Attempt to apply the d2r2/React Client Display Adaptor OPM inside of an OPC instance.",
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "d2r2ReactClientOutputProcessor": {
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "IxoJ83u0TXmG7PLUYBvsyg"
                                }
                              }
                            },
                            "observableProcessModelSets": [
                              [
                                {
                                  "id": "z_mTe02hSWmaM1iRO1pBeA",
                                  "name": "Observable Frame Latch",
                                  "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                  "opmDataSpec": {
                                    "____label": "Observable Frame Latch",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "clock": {
                                      "____accept": "jsBoolean",
                                      "____defaultValue": false
                                    }
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "setBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    },
                                    "updated": {
                                      "description": "The value managed by the frame latch has been written.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "clearBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "waiting"
                                        }
                                      ]
                                    },
                                    "waiting": {
                                      "description": "Frame latch value has not changed since last signalled update.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                  "name": "d2r2/React Client Display Adaptor",
                                  "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                  "opmDataSpec": {
                                    "____label": "d2r2/React Client Display Adaptor Memory",
                                    "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "inputs": {
                                      "____label": "Adaptor Inputs",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "ComponentRouter": {
                                        "____label": "d2r2 <ComponentRouter/>",
                                        "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                        "____accept": [
                                          "jsNull",
                                          "jsFunction"
                                        ],
                                        "____defaultValue": null
                                      },
                                      "DOMElement": {
                                        "____label": "d2r2 Target DOM Element",
                                        "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                        "____opaque": true,
                                        "____defaultValue": null
                                      },
                                      "pathRenderContext": {
                                        "____label": "Render Context OCD Path",
                                        "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                        "____accept": [
                                          "jsNull",
                                          "jsString"
                                        ],
                                        "____defaultValue": null
                                      },
                                      "pathRenderData": {
                                        "____label": "Render Data OCD Path",
                                        "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                        "____accept": [
                                          "jsNull",
                                          "jsString"
                                        ],
                                        "____defaultValue": null
                                      },
                                      "clock": {
                                        "____label": "React Output Processor Clock",
                                        "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                        "____types": "jsObject",
                                        "____appdsl": {
                                          "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                        },
                                        "value": {
                                          "____label": "Render Info",
                                          "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                          "____types": "jsObject",
                                          "____defaultValue": {},
                                          "renderCount": {
                                            "____accept": "jsNumber",
                                            "____defaultValue": -1
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default OPM process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "wait_invariants"
                                        }
                                      ]
                                    },
                                    "wait_invariants": {
                                      "description": "Waiting for input invariants to be satisfied.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "and": [
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.ComponentRouter"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.DOMElement"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.pathRenderContext"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.pathRenderData"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "nextStep": "initialized"
                                        }
                                      ]
                                    },
                                    "initialized": {
                                      "description": "Input invariants have been satisfied.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isNamespaceTruthy": {
                                                      "path": "#.clock.value"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "render"
                                        },
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "rehydrate"
                                        }
                                      ]
                                    },
                                    "rehydrate": {
                                      "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "react": {
                                                    "rehydrate": true
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "wait_clock"
                                        }
                                      ]
                                    },
                                    "render": {
                                      "description": "Rendering client application view updates.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "react": {
                                                    "render": true
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "wait_clock"
                                        }
                                      ]
                                    },
                                    "wait_clock": {
                                      "description": "Waiting for next clock signal to re-render client application view.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "opmInStep": {
                                                    "path": "#.clock",
                                                    "step": "updated"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "render"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "transitionOperatorSets": [
                              [
                                {
                                  "operationID": "YgABX95wR86GCYrYaDLISA",
                                  "operationName": "AND Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff all suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "AND Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "and": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                                  "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                                  "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                                },
                                {
                                  "operationID": "TLSHkl73SO-utuzM7dyN2g",
                                  "operationName": "NOT Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                  "inputFilterSpec": {
                                    "____label": "NOT Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "not": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                                  "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                                  "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                                },
                                {
                                  "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                                  "operationName": "OR Transition Expression Operator",
                                  "operationDescription": "Returns Boolean true iff any suboperations return true.",
                                  "inputFilterSpec": {
                                    "____label": "OR Transition Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "or": {
                                        "____types": "jsArray",
                                        "operandOperatorVariant": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                                  "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                                  "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                                },
                                {
                                  "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                                  "operationName": "Always returns Boolean true unconditionally.",
                                  "operationDescription": "Always returns true.",
                                  "inputFilterSpec": {
                                    "____label": "Always returns Boolean true unconditionally. Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "always": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                                  "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                                  "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                                },
                                {
                                  "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                                  "operationName": "OPM In Step Expression Operator",
                                  "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                                  "inputFilterSpec": {
                                    "____label": "OPM In Step Expression Operator Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "opmi": {
                                              "____types": "jsObject",
                                              "inStep": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                },
                                                "step": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                                  "inputTypeVDID": "JI94Ix-sn-tgo2-20gNnZw",
                                  "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "wnUhRFZzvpO6TDOctCBccg"
                                },
                                {
                                  "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                                  "operationName": "OCD Namespace Is Truthy",
                                  "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Namespace Is Truthy Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isNamespaceTruthy": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                                  "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                                  "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                                },
                                {
                                  "operationID": "UeLs9PcASwuC7KR190eYhA",
                                  "operationName": "OCD Boolean Flag Is Set",
                                  "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Boolean Flag Is Set Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "transitionDispatcher": {
                                        "____label": "OPC Transition Dispatcher",
                                        "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                        "____accept": "jsObject"
                                      }
                                    },
                                    "operatorRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "operators": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "isBooleanFlagSet": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsBoolean"
                                  },
                                  "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                                  "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                                  "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                                  "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                                  "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                                }
                              ]
                            ],
                            "controllerActionSets": [
                              [
                                {
                                  "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                                  "operationName": "Clear Boolean Flag",
                                  "operationDescription": "Clears a Boolean flag in the OCD.",
                                  "inputFilterSpec": {
                                    "____label": "Clear Boolean Flag Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "clearBooleanFlag": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                                  "inputTypeVDID": "ouIsY-huis0tFd2_lHI_qA",
                                  "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                                  "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                                  "operationVDID": "21zxkmR-mjHNlBIwaJ2tSA"
                                },
                                {
                                  "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                                  "operationName": "Set Boolean Flag",
                                  "operationDescription": "Sets a Boolean flag in the OCD.",
                                  "inputFilterSpec": {
                                    "____label": "Set Boolean Flag Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "setBooleanFlag": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                                  "inputTypeVDID": "cERI940VZR5U7QOd6FeiGQ",
                                  "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                                  "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                                  "operationVDID": "bE_OksOp1jF7C44weUB_SA"
                                },
                                {
                                  "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                                  "operationName": "Write Frame Latch",
                                  "operationDescription": "Writes the value made observable by frame latch OPM instance.",
                                  "inputFilterSpec": {
                                    "____label": "Write Frame Latch Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "frameLatch": {
                                              "____types": "jsObject",
                                              "write": {
                                                "____types": "jsObject",
                                                "path": {
                                                  "____label": "Frame Latch Bound Namespace Path",
                                                  "____accept": "jsString"
                                                },
                                                "value": {
                                                  "____label": "Write Value",
                                                  "____opaque": true
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____label": "Write Frame Latch Result",
                                    "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                                    "____opaque": true
                                  },
                                  "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                                  "inputTypeVDID": "_sHq6rzS5dLZDEfwpEy_Yw",
                                  "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                                  "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                                  "operationVDID": "E6VN-IT57adhKU13b50bSw"
                                },
                                {
                                  "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                  "operationName": "OCD Read Namespace Indirect",
                                  "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                                  "inputFilterSpec": {
                                    "____label": "OCD Read Namespace Indirect Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "ocd": {
                                              "____types": "jsObject",
                                              "readNamespaceIndirect": {
                                                "____types": "jsObject",
                                                "path2": {
                                                  "____label": "Target Path Namespace Path",
                                                  "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                                  "____accept": "jsString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____opaque": true
                                  },
                                  "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                                  "inputTypeVDID": "nsUj_P5arQ5jRvvexu8DsA",
                                  "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                                  "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                  "operationVDID": "0NacE_oXqVe5Glvt_yxvtA"
                                },
                                {
                                  "operationID": "d2vRmtn2QA6Ox8W4PwDWNA",
                                  "operationName": "React Client View Rehydrate",
                                  "operationDescription": "Rehydrate server-rendered React view and connect UI event handlers.",
                                  "inputFilterSpec": {
                                    "____label": "React Client View Rehydrate Request",
                                    "____types": "jsObject",
                                    "context": {
                                      "____label": "OPC Context Descriptor",
                                      "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                      "____types": "jsObject",
                                      "opmBindingPath": {
                                        "____label": "OPM Binding Path",
                                        "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                        "____accept": "jsString"
                                      },
                                      "ocdi": {
                                        "____label": "OCD Store Instance",
                                        "____description": "A reference to the OCD store instance managed by OPC.",
                                        "____accept": "jsObject"
                                      },
                                      "act": {
                                        "____label": "OPC.act Method",
                                        "____description": "A reference to ObservableProcessController.act method.",
                                        "____accept": "jsFunction"
                                      }
                                    },
                                    "actionRequest": {
                                      "____types": "jsObject",
                                      "holarchy": {
                                        "____types": "jsObject",
                                        "sml": {
                                          "____types": "jsObject",
                                          "actions": {
                                            "____types": "jsObject",
                                            "react": {
                                              "____types": "jsObject",
                                              "rehydrate": {
                                                "____types": "jsBoolean",
                                                "____inValueSet": [
                                                  true
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputFilterSpec": {
                                    "____accept": "jsUndefined"
                                  },
                                  "inputTypeVIID": "dJjTV9BAp4Z9pSavLeZ-wQ",
                                  "inputTypeVDID": "dWayec_SLLNxaNT03o8KAQ",
                                  "outputTypeVIID": "8JLm4g169JeAd37FiSdhHA",
                                  "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                                  "operationVDID": "6hSNkiHYVjGWTpEw603mSA"
                                }
                              ]
                            ]
                          }
                        },
                        "actionRequest": []
                      }
                    }
                  }
                },
                "harnessResponse": {
                  "error": null,
                  "result": {
                    "harnessOptions": {
                      "idempotent": true,
                      "gitDiffHunkSize": 0
                    },
                    "harnessDispatch": {
                      "54MiSgQdSiukMX4fIZJimg": {
                        "fzuITg9BQbyV7jNv39Gv6w": {
                          "opcToJSON": {
                            "id": "fzuITg9BQbyV7jNv39Gv6w",
                            "name": "d2r2/React Client Display Adaptor OPC #1",
                            "description": "Attempt to apply the d2r2/React Client Display Adaptor OPM inside of an OPC instance.",
                            "options": {
                              "evaluate": {
                                "maxFrames": 16,
                                "firstEvaluation": "constructor"
                              }
                            },
                            "opmMap": {
                              "z_mTe02hSWmaM1iRO1pBeA": {
                                "id": "z_mTe02hSWmaM1iRO1pBeA",
                                "name": "Observable Frame Latch",
                                "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                "opmDataSpec": {
                                  "____label": "Observable Frame Latch",
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "clock": {
                                    "____accept": "jsBoolean",
                                    "____defaultValue": false
                                  }
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default starting process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "setBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "updated"
                                      }
                                    ]
                                  },
                                  "updated": {
                                    "description": "The value managed by the frame latch has been written.",
                                    "actions": {
                                      "enter": [],
                                      "exit": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "clearBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "waiting"
                                      }
                                    ]
                                  },
                                  "waiting": {
                                    "description": "Frame latch value has not changed since last signalled update.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isBooleanFlagSet": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "nextStep": "updated"
                                      }
                                    ]
                                  }
                                }
                              },
                              "IxoJ83u0TXmG7PLUYBvsyg": {
                                "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                "name": "d2r2/React Client Display Adaptor",
                                "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                "opmDataSpec": {
                                  "____label": "d2r2/React Client Display Adaptor Memory",
                                  "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "inputs": {
                                    "____label": "Adaptor Inputs",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "ComponentRouter": {
                                      "____label": "d2r2 <ComponentRouter/>",
                                      "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                      "____accept": [
                                        "jsNull",
                                        "jsFunction"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "DOMElement": {
                                      "____label": "d2r2 Target DOM Element",
                                      "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                      "____opaque": true,
                                      "____defaultValue": null
                                    },
                                    "pathRenderContext": {
                                      "____label": "Render Context OCD Path",
                                      "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                      "____accept": [
                                        "jsNull",
                                        "jsString"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "pathRenderData": {
                                      "____label": "Render Data OCD Path",
                                      "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                      "____accept": [
                                        "jsNull",
                                        "jsString"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "clock": {
                                      "____label": "React Output Processor Clock",
                                      "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                      "____types": "jsObject",
                                      "____appdsl": {
                                        "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                      },
                                      "value": {
                                        "____label": "Render Info",
                                        "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "renderCount": {
                                          "____accept": "jsNumber",
                                          "____defaultValue": -1
                                        }
                                      }
                                    }
                                  }
                                },
                                "steps": {
                                  "uninitialized": {
                                    "description": "Default OPM process step.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "wait_invariants"
                                      }
                                    ]
                                  },
                                  "wait_invariants": {
                                    "description": "Waiting for input invariants to be satisfied.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "and": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.ComponentRouter"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.DOMElement"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.pathRenderContext"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.pathRenderData"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "nextStep": "initialized"
                                      }
                                    ]
                                  },
                                  "initialized": {
                                    "description": "Input invariants have been satisfied.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "ocd": {
                                                  "isNamespaceTruthy": {
                                                    "path": "#.clock.value"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "nextStep": "render"
                                      },
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "rehydrate"
                                      }
                                    ]
                                  },
                                  "rehydrate": {
                                    "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "react": {
                                                  "rehydrate": true
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "wait_clock"
                                      }
                                    ]
                                  },
                                  "render": {
                                    "description": "Rendering client application view updates.",
                                    "actions": {
                                      "enter": [
                                        {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "react": {
                                                  "render": true
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "always": true
                                        },
                                        "nextStep": "wait_clock"
                                      }
                                    ]
                                  },
                                  "wait_clock": {
                                    "description": "Waiting for next clock signal to re-render client application view.",
                                    "actions": {
                                      "enter": [],
                                      "exit": []
                                    },
                                    "transitions": [
                                      {
                                        "transitionIf": {
                                          "holarchy": {
                                            "sml": {
                                              "operators": {
                                                "opmInStep": {
                                                  "path": "#.clock",
                                                  "step": "updated"
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "nextStep": "render"
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "opmiSpecPaths": [
                              {
                                "specPath": "~.d2r2ReactClientOutputProcessor",
                                "opmiRef": {
                                  "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                  "name": "d2r2/React Client Display Adaptor",
                                  "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                  "opmDataSpec": {
                                    "____label": "d2r2/React Client Display Adaptor Memory",
                                    "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "inputs": {
                                      "____label": "Adaptor Inputs",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "ComponentRouter": {
                                        "____label": "d2r2 <ComponentRouter/>",
                                        "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                        "____accept": [
                                          "jsNull",
                                          "jsFunction"
                                        ],
                                        "____defaultValue": null
                                      },
                                      "DOMElement": {
                                        "____label": "d2r2 Target DOM Element",
                                        "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                        "____opaque": true,
                                        "____defaultValue": null
                                      },
                                      "pathRenderContext": {
                                        "____label": "Render Context OCD Path",
                                        "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                        "____accept": [
                                          "jsNull",
                                          "jsString"
                                        ],
                                        "____defaultValue": null
                                      },
                                      "pathRenderData": {
                                        "____label": "Render Data OCD Path",
                                        "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                        "____accept": [
                                          "jsNull",
                                          "jsString"
                                        ],
                                        "____defaultValue": null
                                      },
                                      "clock": {
                                        "____label": "React Output Processor Clock",
                                        "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                        "____types": "jsObject",
                                        "____appdsl": {
                                          "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                        },
                                        "value": {
                                          "____label": "Render Info",
                                          "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                          "____types": "jsObject",
                                          "____defaultValue": {},
                                          "renderCount": {
                                            "____accept": "jsNumber",
                                            "____defaultValue": -1
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default OPM process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "wait_invariants"
                                        }
                                      ]
                                    },
                                    "wait_invariants": {
                                      "description": "Waiting for input invariants to be satisfied.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "and": [
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.ComponentRouter"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.DOMElement"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.pathRenderContext"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.pathRenderData"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "nextStep": "initialized"
                                        }
                                      ]
                                    },
                                    "initialized": {
                                      "description": "Input invariants have been satisfied.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isNamespaceTruthy": {
                                                      "path": "#.clock.value"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "render"
                                        },
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "rehydrate"
                                        }
                                      ]
                                    },
                                    "rehydrate": {
                                      "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "react": {
                                                    "rehydrate": true
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "wait_clock"
                                        }
                                      ]
                                    },
                                    "render": {
                                      "description": "Rendering client application view updates.",
                                      "actions": {
                                        "enter": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "react": {
                                                    "render": true
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "wait_clock"
                                        }
                                      ]
                                    },
                                    "wait_clock": {
                                      "description": "Waiting for next clock signal to re-render client application view.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "opmInStep": {
                                                    "path": "#.clock",
                                                    "step": "updated"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "render"
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              {
                                "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                "opmiRef": {
                                  "id": "z_mTe02hSWmaM1iRO1pBeA",
                                  "name": "Observable Frame Latch",
                                  "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                  "opmDataSpec": {
                                    "____label": "Observable Frame Latch",
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "clock": {
                                      "____accept": "jsBoolean",
                                      "____defaultValue": false
                                    }
                                  },
                                  "steps": {
                                    "uninitialized": {
                                      "description": "Default starting process step.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "setBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    },
                                    "updated": {
                                      "description": "The value managed by the frame latch has been written.",
                                      "actions": {
                                        "enter": [],
                                        "exit": [
                                          {
                                            "holarchy": {
                                              "sml": {
                                                "actions": {
                                                  "ocd": {
                                                    "clearBooleanFlag": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "always": true
                                          },
                                          "nextStep": "waiting"
                                        }
                                      ]
                                    },
                                    "waiting": {
                                      "description": "Frame latch value has not changed since last signalled update.",
                                      "actions": {
                                        "enter": [],
                                        "exit": []
                                      },
                                      "transitions": [
                                        {
                                          "transitionIf": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "nextStep": "updated"
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            ],
                            "ocdTemplateSpec": {
                              "____types": "jsObject",
                              "d2r2ReactClientOutputProcessor": {
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "IxoJ83u0TXmG7PLUYBvsyg"
                                }
                              }
                            },
                            "ocdRuntimeSpec": {
                              "____label": "OPC [fzuITg9BQbyV7jNv39Gv6w::d2r2/React Client Display Adaptor OPC #1] Observable Controller Data Store",
                              "____description": "OPC [fzuITg9BQbyV7jNv39Gv6w::d2r2/React Client Display Adaptor OPC #1] system process runtime state data managed by OPC instance.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "d2r2ReactClientOutputProcessor": {
                                "____types": "jsObject",
                                "____appdsl": {
                                  "opm": "IxoJ83u0TXmG7PLUYBvsyg"
                                },
                                "____label": "d2r2/React Client Display Adaptor Memory",
                                "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                "____defaultValue": {},
                                "inputs": {
                                  "____label": "Adaptor Inputs",
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "ComponentRouter": {
                                    "____label": "d2r2 <ComponentRouter/>",
                                    "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                    "____accept": [
                                      "jsNull",
                                      "jsFunction"
                                    ],
                                    "____defaultValue": null
                                  },
                                  "DOMElement": {
                                    "____label": "d2r2 Target DOM Element",
                                    "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                    "____opaque": true,
                                    "____defaultValue": null
                                  },
                                  "pathRenderContext": {
                                    "____label": "Render Context OCD Path",
                                    "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                    "____accept": [
                                      "jsNull",
                                      "jsString"
                                    ],
                                    "____defaultValue": null
                                  },
                                  "pathRenderData": {
                                    "____label": "Render Data OCD Path",
                                    "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                    "____accept": [
                                      "jsNull",
                                      "jsString"
                                    ],
                                    "____defaultValue": null
                                  },
                                  "clock": {
                                    "____label": "Observable Frame Latch",
                                    "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                    "____types": "jsObject",
                                    "____appdsl": {
                                      "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                    },
                                    "value": {
                                      "____label": "Render Info",
                                      "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "renderCount": {
                                        "____accept": "jsNumber",
                                        "____defaultValue": -1
                                      }
                                    },
                                    "____defaultValue": {},
                                    "clock": {
                                      "____accept": "jsBoolean",
                                      "____defaultValue": false
                                    },
                                    "__opmiStep": {
                                      "____accept": "jsString",
                                      "____defaultValue": "uninitialized"
                                    }
                                  }
                                },
                                "__opmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "ocdi": {
                              "d2r2ReactClientOutputProcessor": {
                                "inputs": {
                                  "ComponentRouter": null,
                                  "DOMElement": null,
                                  "pathRenderContext": null,
                                  "pathRenderData": null,
                                  "clock": {
                                    "value": {
                                      "renderCount": -1
                                    },
                                    "clock": false,
                                    "__opmiStep": "waiting"
                                  }
                                },
                                "__opmiStep": "wait_invariants"
                              }
                            },
                            "transitionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                              },
                              "supportedFilters": [
                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "actionDispatcher": {
                              "filterDescriptor": {
                                "operationID": "IKoGNsvxAZLjwaSho4PTlg",
                                "operationName": "Discriminator Filter",
                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                "inputTypeVIID": "SdJrC3D28XyjpTSr948vKQ",
                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "outputTypeVIID": "sTJyFaoOy07ns2qwOvpuoQ",
                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                "operationVDID": "KbL0EzU0NVel1Y7t7XgUtA"
                              },
                              "supportedFilters": [
                                "[5rFEDGLYRSiZCeChMnkCHQ::Set Boolean Flag]",
                                "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                                "[_yxWfFLnTqqN-UxRdd7W5w::Clear Boolean Flag]",
                                "[d2vRmtn2QA6Ox8W4PwDWNA::React Client View Rehydrate]",
                                "[iyvk_9vhRn2qvrjOes5v7Q::Write Frame Latch]"
                              ],
                              "options": {
                                "action": "routeRequest"
                              }
                            },
                            "opcActorStack": [],
                            "evalCount": 1,
                            "lastEvalResponse": {
                              "error": null,
                              "result": {
                                "evalNumber": 0,
                                "summary": {
                                  "counts": {
                                    "bindings": 6,
                                    "frames": 3,
                                    "errors": 0,
                                    "transitions": 3
                                  }
                                },
                                "evalFrames": [
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 2,
                                        "transitions": 2,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [
                                          "Qf5B_mFgYWCyRbJFtNW01Q",
                                          "6KIVQm2l_Kkuh0qvYBQ-nw"
                                        ],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {
                                      "Qf5B_mFgYWCyRbJFtNW01Q": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.d2r2ReactClientOutputProcessor",
                                            "specPath": "~.d2r2ReactClientOutputProcessor"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                            "name": "d2r2/React Client Display Adaptor",
                                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                            "opmDataSpec": {
                                              "____label": "d2r2/React Client Display Adaptor Memory",
                                              "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "inputs": {
                                                "____label": "Adaptor Inputs",
                                                "____types": "jsObject",
                                                "____defaultValue": {},
                                                "ComponentRouter": {
                                                  "____label": "d2r2 <ComponentRouter/>",
                                                  "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsFunction"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "DOMElement": {
                                                  "____label": "d2r2 Target DOM Element",
                                                  "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                                  "____opaque": true,
                                                  "____defaultValue": null
                                                },
                                                "pathRenderContext": {
                                                  "____label": "Render Context OCD Path",
                                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsString"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "pathRenderData": {
                                                  "____label": "Render Data OCD Path",
                                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsString"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "clock": {
                                                  "____label": "React Output Processor Clock",
                                                  "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                                  "____types": "jsObject",
                                                  "____appdsl": {
                                                    "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                                  },
                                                  "value": {
                                                    "____label": "Render Info",
                                                    "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                                    "____types": "jsObject",
                                                    "____defaultValue": {},
                                                    "renderCount": {
                                                      "____accept": "jsNumber",
                                                      "____defaultValue": -1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default OPM process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_invariants"
                                                  }
                                                ]
                                              },
                                              "wait_invariants": {
                                                "description": "Waiting for input invariants to be satisfied.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "and": [
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.ComponentRouter"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.DOMElement"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.pathRenderContext"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.pathRenderData"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "nextStep": "initialized"
                                                  }
                                                ]
                                              },
                                              "initialized": {
                                                "description": "Input invariants have been satisfied.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isNamespaceTruthy": {
                                                                "path": "#.clock.value"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "render"
                                                  },
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "rehydrate"
                                                  }
                                                ]
                                              },
                                              "rehydrate": {
                                                "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "react": {
                                                              "rehydrate": true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_clock"
                                                  }
                                                ]
                                              },
                                              "render": {
                                                "description": "Rendering client application view updates.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "react": {
                                                              "render": true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_clock"
                                                  }
                                                ]
                                              },
                                              "wait_clock": {
                                                "description": "Waiting for next clock signal to re-render client application view.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "opmInStep": {
                                                              "path": "#.clock",
                                                              "step": "updated"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "render"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "transitioned",
                                          "finishStep": "wait_invariants",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.d2r2ReactClientOutputProcessor",
                                                    "ocdi": {
                                                      "d2r2ReactClientOutputProcessor": {
                                                        "inputs": {
                                                          "ComponentRouter": null,
                                                          "DOMElement": null,
                                                          "pathRenderContext": null,
                                                          "pathRenderData": null,
                                                          "clock": {
                                                            "value": {
                                                              "renderCount": -1
                                                            },
                                                            "clock": false,
                                                            "__opmiStep": "waiting"
                                                          }
                                                        },
                                                        "__opmiStep": "wait_invariants"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": {
                                              "error": null,
                                              "result": "wait_invariants"
                                            }
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      },
                                      "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                            "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                          },
                                          "initialStep": "uninitialized",
                                          "opmRef": {
                                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                                            "name": "Observable Frame Latch",
                                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                            "opmDataSpec": {
                                              "____label": "Observable Frame Latch",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "clock": {
                                                "____accept": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "setBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              },
                                              "updated": {
                                                "description": "The value managed by the frame latch has been written.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "clearBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "waiting"
                                                  }
                                                ]
                                              },
                                              "waiting": {
                                                "description": "Frame latch value has not changed since last signalled update.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "transitioned",
                                          "finishStep": "updated",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                                    "ocdi": {
                                                      "d2r2ReactClientOutputProcessor": {
                                                        "inputs": {
                                                          "ComponentRouter": null,
                                                          "DOMElement": null,
                                                          "pathRenderContext": null,
                                                          "pathRenderData": null,
                                                          "clock": {
                                                            "value": {
                                                              "renderCount": -1
                                                            },
                                                            "clock": false,
                                                            "__opmiStep": "waiting"
                                                          }
                                                        },
                                                        "__opmiStep": "wait_invariants"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "setBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "error": null
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": {
                                              "error": null,
                                              "result": "updated"
                                            }
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 2,
                                        "transitions": 1,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [
                                          "6KIVQm2l_Kkuh0qvYBQ-nw"
                                        ],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {
                                      "Qf5B_mFgYWCyRbJFtNW01Q": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.d2r2ReactClientOutputProcessor",
                                            "specPath": "~.d2r2ReactClientOutputProcessor"
                                          },
                                          "initialStep": "wait_invariants",
                                          "opmRef": {
                                            "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                            "name": "d2r2/React Client Display Adaptor",
                                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                            "opmDataSpec": {
                                              "____label": "d2r2/React Client Display Adaptor Memory",
                                              "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "inputs": {
                                                "____label": "Adaptor Inputs",
                                                "____types": "jsObject",
                                                "____defaultValue": {},
                                                "ComponentRouter": {
                                                  "____label": "d2r2 <ComponentRouter/>",
                                                  "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsFunction"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "DOMElement": {
                                                  "____label": "d2r2 Target DOM Element",
                                                  "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                                  "____opaque": true,
                                                  "____defaultValue": null
                                                },
                                                "pathRenderContext": {
                                                  "____label": "Render Context OCD Path",
                                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsString"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "pathRenderData": {
                                                  "____label": "Render Data OCD Path",
                                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsString"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "clock": {
                                                  "____label": "React Output Processor Clock",
                                                  "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                                  "____types": "jsObject",
                                                  "____appdsl": {
                                                    "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                                  },
                                                  "value": {
                                                    "____label": "Render Info",
                                                    "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                                    "____types": "jsObject",
                                                    "____defaultValue": {},
                                                    "renderCount": {
                                                      "____accept": "jsNumber",
                                                      "____defaultValue": -1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default OPM process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_invariants"
                                                  }
                                                ]
                                              },
                                              "wait_invariants": {
                                                "description": "Waiting for input invariants to be satisfied.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "and": [
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.ComponentRouter"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.DOMElement"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.pathRenderContext"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.pathRenderData"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "nextStep": "initialized"
                                                  }
                                                ]
                                              },
                                              "initialized": {
                                                "description": "Input invariants have been satisfied.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isNamespaceTruthy": {
                                                                "path": "#.clock.value"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "render"
                                                  },
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "rehydrate"
                                                  }
                                                ]
                                              },
                                              "rehydrate": {
                                                "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "react": {
                                                              "rehydrate": true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_clock"
                                                  }
                                                ]
                                              },
                                              "render": {
                                                "description": "Rendering client application view updates.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "react": {
                                                              "render": true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_clock"
                                                  }
                                                ]
                                              },
                                              "wait_clock": {
                                                "description": "Waiting for next clock signal to re-render client application view.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "opmInStep": {
                                                              "path": "#.clock",
                                                              "step": "updated"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "render"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "noop",
                                          "finishStep": "wait_invariants",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.d2r2ReactClientOutputProcessor",
                                                    "ocdi": {
                                                      "d2r2ReactClientOutputProcessor": {
                                                        "inputs": {
                                                          "ComponentRouter": null,
                                                          "DOMElement": null,
                                                          "pathRenderContext": null,
                                                          "pathRenderData": null,
                                                          "clock": {
                                                            "value": {
                                                              "renderCount": -1
                                                            },
                                                            "clock": false,
                                                            "__opmiStep": "waiting"
                                                          }
                                                        },
                                                        "__opmiStep": "wait_invariants"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "and": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.ComponentRouter"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.DOMElement"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.pathRenderContext"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.pathRenderData"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": false
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      },
                                      "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                            "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                          },
                                          "initialStep": "updated",
                                          "opmRef": {
                                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                                            "name": "Observable Frame Latch",
                                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                            "opmDataSpec": {
                                              "____label": "Observable Frame Latch",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "clock": {
                                                "____accept": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "setBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              },
                                              "updated": {
                                                "description": "The value managed by the frame latch has been written.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "clearBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "waiting"
                                                  }
                                                ]
                                              },
                                              "waiting": {
                                                "description": "Frame latch value has not changed since last signalled update.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "transitioned",
                                          "finishStep": "waiting",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                                    "ocdi": {
                                                      "d2r2ReactClientOutputProcessor": {
                                                        "inputs": {
                                                          "ComponentRouter": null,
                                                          "DOMElement": null,
                                                          "pathRenderContext": null,
                                                          "pathRenderData": null,
                                                          "clock": {
                                                            "value": {
                                                              "renderCount": -1
                                                            },
                                                            "clock": false,
                                                            "__opmiStep": "waiting"
                                                          }
                                                        },
                                                        "__opmiStep": "wait_invariants"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "always": true
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": true
                                                }
                                              }
                                            ],
                                            "p2_exit": [
                                              {
                                                "request": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "clearBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "error": null
                                                }
                                              }
                                            ],
                                            "p3_enter": [],
                                            "p4_finalize": {
                                              "error": null,
                                              "result": "waiting"
                                            }
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "summary": {
                                      "counts": {
                                        "bindings": 2,
                                        "transitions": 0,
                                        "errors": 0
                                      },
                                      "reports": {
                                        "transitions": [],
                                        "errors": []
                                      }
                                    },
                                    "bindings": {
                                      "Qf5B_mFgYWCyRbJFtNW01Q": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.d2r2ReactClientOutputProcessor",
                                            "specPath": "~.d2r2ReactClientOutputProcessor"
                                          },
                                          "initialStep": "wait_invariants",
                                          "opmRef": {
                                            "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                            "name": "d2r2/React Client Display Adaptor",
                                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                            "opmDataSpec": {
                                              "____label": "d2r2/React Client Display Adaptor Memory",
                                              "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "inputs": {
                                                "____label": "Adaptor Inputs",
                                                "____types": "jsObject",
                                                "____defaultValue": {},
                                                "ComponentRouter": {
                                                  "____label": "d2r2 <ComponentRouter/>",
                                                  "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsFunction"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "DOMElement": {
                                                  "____label": "d2r2 Target DOM Element",
                                                  "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                                  "____opaque": true,
                                                  "____defaultValue": null
                                                },
                                                "pathRenderContext": {
                                                  "____label": "Render Context OCD Path",
                                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsString"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "pathRenderData": {
                                                  "____label": "Render Data OCD Path",
                                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                                  "____accept": [
                                                    "jsNull",
                                                    "jsString"
                                                  ],
                                                  "____defaultValue": null
                                                },
                                                "clock": {
                                                  "____label": "React Output Processor Clock",
                                                  "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                                  "____types": "jsObject",
                                                  "____appdsl": {
                                                    "opm": "z_mTe02hSWmaM1iRO1pBeA"
                                                  },
                                                  "value": {
                                                    "____label": "Render Info",
                                                    "____description": "Info useful for debugging the d2r2/React Output Processor.",
                                                    "____types": "jsObject",
                                                    "____defaultValue": {},
                                                    "renderCount": {
                                                      "____accept": "jsNumber",
                                                      "____defaultValue": -1
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default OPM process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_invariants"
                                                  }
                                                ]
                                              },
                                              "wait_invariants": {
                                                "description": "Waiting for input invariants to be satisfied.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "and": [
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.ComponentRouter"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.DOMElement"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.pathRenderContext"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        {
                                                          "holarchy": {
                                                            "sml": {
                                                              "operators": {
                                                                "ocd": {
                                                                  "isNamespaceTruthy": {
                                                                    "path": "#.inputs.pathRenderData"
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "nextStep": "initialized"
                                                  }
                                                ]
                                              },
                                              "initialized": {
                                                "description": "Input invariants have been satisfied.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isNamespaceTruthy": {
                                                                "path": "#.clock.value"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "render"
                                                  },
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "rehydrate"
                                                  }
                                                ]
                                              },
                                              "rehydrate": {
                                                "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "react": {
                                                              "rehydrate": true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_clock"
                                                  }
                                                ]
                                              },
                                              "render": {
                                                "description": "Rendering client application view updates.",
                                                "actions": {
                                                  "enter": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "react": {
                                                              "render": true
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "wait_clock"
                                                  }
                                                ]
                                              },
                                              "wait_clock": {
                                                "description": "Waiting for next clock signal to re-render client application view.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "opmInStep": {
                                                              "path": "#.clock",
                                                              "step": "updated"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "render"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "noop",
                                          "finishStep": "wait_invariants",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.d2r2ReactClientOutputProcessor",
                                                    "ocdi": {
                                                      "d2r2ReactClientOutputProcessor": {
                                                        "inputs": {
                                                          "ComponentRouter": null,
                                                          "DOMElement": null,
                                                          "pathRenderContext": null,
                                                          "pathRenderData": null,
                                                          "clock": {
                                                            "value": {
                                                              "renderCount": -1
                                                            },
                                                            "clock": false,
                                                            "__opmiStep": "waiting"
                                                          }
                                                        },
                                                        "__opmiStep": "wait_invariants"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "and": [
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.ComponentRouter"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.DOMElement"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.pathRenderContext"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "holarchy": {
                                                          "sml": {
                                                            "operators": {
                                                              "ocd": {
                                                                "isNamespaceTruthy": {
                                                                  "path": "#.inputs.pathRenderData"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": false
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      },
                                      "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                        "evalRequest": {
                                          "dataBinding": {
                                            "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                            "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                          },
                                          "initialStep": "waiting",
                                          "opmRef": {
                                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                                            "name": "Observable Frame Latch",
                                            "description": "Observable frame latch model buffers a value in an OPM-bound namespace for one evaluation frame.",
                                            "opmDataSpec": {
                                              "____label": "Observable Frame Latch",
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "clock": {
                                                "____accept": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "steps": {
                                              "uninitialized": {
                                                "description": "Default starting process step.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "setBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              },
                                              "updated": {
                                                "description": "The value managed by the frame latch has been written.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": [
                                                    {
                                                      "holarchy": {
                                                        "sml": {
                                                          "actions": {
                                                            "ocd": {
                                                              "clearBooleanFlag": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  ]
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "always": true
                                                    },
                                                    "nextStep": "waiting"
                                                  }
                                                ]
                                              },
                                              "waiting": {
                                                "description": "Frame latch value has not changed since last signalled update.",
                                                "actions": {
                                                  "enter": [],
                                                  "exit": []
                                                },
                                                "transitions": [
                                                  {
                                                    "transitionIf": {
                                                      "holarchy": {
                                                        "sml": {
                                                          "operators": {
                                                            "ocd": {
                                                              "isBooleanFlagSet": {
                                                                "path": "#.clock"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nextStep": "updated"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        },
                                        "evalResponse": {
                                          "status": "noop",
                                          "finishStep": "waiting",
                                          "phases": {
                                            "p1_toperator": [
                                              {
                                                "request": {
                                                  "context": {
                                                    "opmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                                    "ocdi": {
                                                      "d2r2ReactClientOutputProcessor": {
                                                        "inputs": {
                                                          "ComponentRouter": null,
                                                          "DOMElement": null,
                                                          "pathRenderContext": null,
                                                          "pathRenderData": null,
                                                          "clock": {
                                                            "value": {
                                                              "renderCount": -1
                                                            },
                                                            "clock": false,
                                                            "__opmiStep": "waiting"
                                                          }
                                                        },
                                                        "__opmiStep": "wait_invariants"
                                                      }
                                                    },
                                                    "transitionDispatcher": {
                                                      "filterDescriptor": {
                                                        "operationID": "zBn6TTKHzZedlXcUODLYJw",
                                                        "operationName": "Discriminator Filter",
                                                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                        "inputTypeVIID": "mqEOsGO28qQ1KW1noGOseA",
                                                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "outputTypeVIID": "tz-SfIiHlJfuFS3x6tS1cg",
                                                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                        "operationVDID": "VIT0E5CwNVeIpo7tBtgUtA"
                                                      },
                                                      "supportedFilters": [
                                                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                      ],
                                                      "options": {
                                                        "action": "routeRequest"
                                                      }
                                                    }
                                                  },
                                                  "operatorRequest": {
                                                    "holarchy": {
                                                      "sml": {
                                                        "operators": {
                                                          "ocd": {
                                                            "isBooleanFlagSet": {
                                                              "path": "#.clock"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "response": {
                                                  "error": null,
                                                  "result": false
                                                }
                                              }
                                            ],
                                            "p2_exit": [],
                                            "p3_enter": [],
                                            "p4_finalize": null
                                          },
                                          "errors": {
                                            "p1_toperator": 0,
                                            "p2_exit": 0,
                                            "p3_enter": 0,
                                            "p4_finalize": 0,
                                            "total": 0
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "constructionWarnings": []
                          },
                          "actionEvaluations": []
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
  }
}
