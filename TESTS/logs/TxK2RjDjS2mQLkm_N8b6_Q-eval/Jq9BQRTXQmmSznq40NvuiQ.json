{
  "dosRgxmiR66ongCbJB78ow": {
    "T-BP4MgzyDOa-pr65Zrlmg": {
      "Jq9BQRTXQmmSznq40NvuiQ": {
        "harnessRequest": {
          "id": "Jq9BQRTXQmmSznq40NvuiQ",
          "name": "CPM Child Processes All In Step Operator Test",
          "description": "Tests the CPM child processes all in step transition operator.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "CellProcessor": {
                  "options": {
                    "failTestIf": {
                      "postTestAnalysis": {
                        "CellProcessManager": {
                          "ownedProcessTableEmpty": "fail-if-no-owned-processes"
                        }
                      }
                    }
                  },
                  "constructorRequest": {
                    "id": "Jq9BQRTXQmmSznq40NvuiQ",
                    "name": "CPM Child Processes All In Step Operator Test",
                    "description": "Tests the CPM child processes all in step transition operator.",
                    "cellmodel": {
                      "id": "OfLkkeNgQDm3xLb7TJqNRg",
                      "vdid": "8zwruE_gKQ4TwwRAbJKs3Q",
                      "name": "CPM Child Processes All In Step Operator Test Model",
                      "description": "A model to test the CPM child processes all in step operator.",
                      "cmat": {
                        "error": null,
                        "result": {
                          "INDEX_CM": {
                            "type": "INDEX",
                            "OfLkkeNgQDm3xLb7TJqNRg": {
                              "id": "OfLkkeNgQDm3xLb7TJqNRg",
                              "vdid": "8zwruE_gKQ4TwwRAbJKs3Q",
                              "name": "CPM Child Processes All In Step Operator Test Model",
                              "description": "A model to test the CPM child processes all in step operator.",
                              "type": "CM",
                              "vjz7U4NWRE2_UlAvAjmS6g": {
                                "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                "name": "CPM Child Processes All In Step Operator Test Process",
                                "description": "A model to test the CPM child processes all in step operator.",
                                "type": "APM"
                              },
                              "fUQKrIPcQmingXFEQ4Pt9A": {
                                "id": "fUQKrIPcQmingXFEQ4Pt9A",
                                "vdid": "2fI0AaJ-wi2lnUuIo81NKQ",
                                "name": "Dummy Process A Cell Model",
                                "description": "A simple cell model that carries a regressive APM for testing various CPM actions and operators.",
                                "type": "CM",
                                "3E27IH_CQeqBUFsGm4tIIA": {
                                  "id": "3E27IH_CQeqBUFsGm4tIIA",
                                  "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                                  "name": "Dummy Process A Process",
                                  "description": "Implements a trivial cell process that does nothing.",
                                  "type": "APM"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "actRequests": [
                    {
                      "actorName": "CPM Child Processes All In Step Test",
                      "actorTaskDescription": "Start the first process instance. We will use this process as our test.",
                      "actionRequest": {
                        "CellProcessor": {
                          "process": {
                            "activate": {},
                            "processCoordinates": {
                              "apmID": "vjz7U4NWRE2_UlAvAjmS6g",
                              "instanceName": "Test Process"
                            }
                          }
                        }
                      }
                    },
                    {
                      "actorName": "CPM Child Processes All In Step Test",
                      "actorTaskDescription": "Start the second process instance. We will use this process to trigger a process step change in the first test process instance.",
                      "actionRequest": {
                        "CellProcessor": {
                          "cell": {
                            "delegate": {
                              "actionRequest": {
                                "CellProcessor": {
                                  "process": {
                                    "activate": {},
                                    "processCoordinates": {
                                      "apmID": "3E27IH_CQeqBUFsGm4tIIA",
                                      "instanceName": "Child Process"
                                    }
                                  }
                                }
                              }
                            },
                            "cellCoordinates": {
                              "apmID": "vjz7U4NWRE2_UlAvAjmS6g",
                              "instanceName": "Test Process"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "UBSclp3gSqCCmSvoG3W4tw": {
                "Jq9BQRTXQmmSznq40NvuiQ": {
                  "vectorOptions": {
                    "failTestIf": {
                      "CellProcessor": {
                        "instanceValidity": "fail-if-instance-invalid",
                        "validInstanceHasOPCWarnings": "fail-if-opc-has-warnings",
                        "validInstanceHasOPCErrors": "fail-if-opc-has-errors"
                      },
                      "postTestAnalysis": {
                        "CellProcessManager": {
                          "ownedProcessTableEmpty": "fail-if-no-owned-processes",
                          "sharedProcessTableEmpty": "fail-if-any-shared-processes"
                        }
                      }
                    }
                  },
                  "vectorFailed": false,
                  "construction": {
                    "isValid": true,
                    "postConstructionToJSON": {
                      "cm": {
                        "id": "6fXp9WhwaHB7HnsejSKNIg",
                        "vdid": "bU-UqLF9jOcHjoOvEwa8lQ",
                        "name": "CPM Child Processes All In Step Operator Test Runtime Host CellProcessManager",
                        "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host.",
                        "cmat": {
                          "error": null,
                          "result": {
                            "INDEX_CM": {
                              "type": "INDEX",
                              "6fXp9WhwaHB7HnsejSKNIg": {
                                "id": "6fXp9WhwaHB7HnsejSKNIg",
                                "vdid": "bU-UqLF9jOcHjoOvEwa8lQ",
                                "name": "CPM Child Processes All In Step Operator Test Runtime Host CellProcessManager",
                                "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host.",
                                "type": "CM",
                                "htWG1ffm9-bcMtwyAawBrA": {
                                  "id": "htWG1ffm9-bcMtwyAawBrA",
                                  "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                  "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                  "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host.",
                                  "type": "APM"
                                },
                                "DxL0zD_ERu-0kNGX2FvoGg": {
                                  "id": "DxL0zD_ERu-0kNGX2FvoGg",
                                  "vdid": "SCCLmlJih8_upULrPln89A",
                                  "name": "Cell Process Manager: Operator Request On Cell (opOn)",
                                  "description": "Generically re-routes the TransitionOperator request specified by operatorRequest to the active cell indicated by apmBindingPath + path, or path (iff path is fully-qualified).",
                                  "type": "TOP"
                                },
                                "9tNY7o5GTUGH_xda2GhP-w": {
                                  "id": "9tNY7o5GTUGH_xda2GhP-w",
                                  "vdid": "1LEwnh2s1u8LRnUeqbEV6Q",
                                  "name": "Cell Process Manager: Cell In Step Operator",
                                  "description": "Returns Boolean true iff the indicated cell is active and is in one of N >=1 APM process step label(s).",
                                  "type": "TOP"
                                },
                                "gJnA-VJTTLa0g9TKFmjv1Q": {
                                  "id": "gJnA-VJTTLa0g9TKFmjv1Q",
                                  "vdid": "-4GitYYnl3Xx5Fb-8EDSxw",
                                  "name": "Cell Process Manager: Ancestor Processes Active",
                                  "description": "Return Boolean true if request.context.apmBindingPath is a cell process with active ancestor processes.",
                                  "type": "TOP"
                                },
                                "6j5F3HmKTLG9Q8kD1-QWYA": {
                                  "id": "6j5F3HmKTLG9Q8kD1-QWYA",
                                  "vdid": "TuodjWXV_UwGKA70s9qq9g",
                                  "name": "Cell Process Manager: Ancestor Processes All In Step",
                                  "description": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) all in the specified process step(s).",
                                  "type": "TOP"
                                },
                                "jFxFmpHSSPaeWEFfLh8eWw": {
                                  "id": "jFxFmpHSSPaeWEFfLh8eWw",
                                  "vdid": "pMNCIG2HZRQNnbW7fo0hPg",
                                  "name": "Cell Process Manager: Ancestor Processes Any In Step",
                                  "description": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) any of which are in the specified process step(s).",
                                  "type": "TOP"
                                },
                                "xIRhBHueTRGO0xq63UUbyQ": {
                                  "id": "xIRhBHueTRGO0xq63UUbyQ",
                                  "vdid": "xlPHi8-AGHvBBDpxxE1jEw",
                                  "name": "Cell Process Manager: Child Processes Active",
                                  "description": "Returns Boolean true iff request.context.apmBindingPath is a cell process with one or more child cell processes.",
                                  "type": "TOP"
                                },
                                "5P2MHjL4TXCqScp_xNrJyA": {
                                  "id": "5P2MHjL4TXCqScp_xNrJyA",
                                  "vdid": "F31SQobBk-8B1FAh8qTQLw",
                                  "name": "Cell Process Manager: Child Processes All In Step",
                                  "description": "Returns Boolean true request.context.apmBindingPath is a cell process whose child processes are all in the specified process step.",
                                  "type": "TOP"
                                },
                                "esuJGgmERrSV3AFvFOMyhw": {
                                  "id": "esuJGgmERrSV3AFvFOMyhw",
                                  "vdid": "p5PwQb6vyqR3_BfwrUNVkg",
                                  "name": "Cell Process Manager: Child Processes Any In Step",
                                  "description": "Returns Boolean true request.context.apmBindingPath is a cell process with any child cell process in the specified process step.",
                                  "type": "TOP"
                                },
                                "Fs6tE76WR5yTOdbwQ_N_FQ": {
                                  "id": "Fs6tE76WR5yTOdbwQ_N_FQ",
                                  "vdid": "Lyd_1YunX3Uu88i2WHOUBA",
                                  "name": "Cell Process Manager: Descendant Processes Active",
                                  "description": "Returns Boolean true if request.context.apmBindingPath is a cell process with active dependant cell processes.",
                                  "type": "TOP"
                                },
                                "DX5GfJcwRNq0xW20KzMSJQ": {
                                  "id": "DX5GfJcwRNq0xW20KzMSJQ",
                                  "vdid": "Bq7qyiK-_kNCUE3-j7FE3g",
                                  "name": "Cell Process Manager: Descendant Processes All In Step",
                                  "description": "Returns Boolean true request.context.apmBindingPath is a cell process with all descendant cell processes in the specified process step.",
                                  "type": "TOP"
                                },
                                "DzlsRZBOReO03GSPsU3CIg": {
                                  "id": "DzlsRZBOReO03GSPsU3CIg",
                                  "vdid": "mcOi_9eI9HifU_IJKnIFMQ",
                                  "name": "Cell Process Manager: Descendant Processes Any In Step",
                                  "description": "Returns Boolean true request.context.apmBindingPath is a cell process whose descendant cell processes contain any cell process(es) in the specified process step.",
                                  "type": "TOP"
                                },
                                "9HNGDusyTtKpleXFae7O5A": {
                                  "id": "9HNGDusyTtKpleXFae7O5A",
                                  "vdid": "hON7P5mqvkUAp_97L121Eg",
                                  "name": "Cell Process Manager: Parent Process Active",
                                  "description": "Returns Boolean true iff request.context.apmBindingPath is a cell process with an active parent process.",
                                  "type": "TOP"
                                },
                                "PHPSWivjRyK80Gtymsp-pA": {
                                  "id": "PHPSWivjRyK80Gtymsp-pA",
                                  "vdid": "cVctW-ugMbwGS5qHLZVaZQ",
                                  "name": "Cell Process Manager: Parent Process In Step",
                                  "description": "Returns Boolean true request.context.apmBindingPath is a cell process whose parent cell process is in the specified process step.",
                                  "type": "TOP"
                                },
                                "VNaA0AMsTXawb32xLaNGTA": {
                                  "id": "VNaA0AMsTXawb32xLaNGTA",
                                  "vdid": "V4GPOwexeEfFbNqLhwpiCg",
                                  "name": "Cell Process Manager: Initialize",
                                  "description": "Performs initialization of Cell Process Manager cell process (the root and parent process of all cell processes executing in a CellProcess runtime host instance).",
                                  "type": "ACT"
                                },
                                "SdL0-5kmTuiNrWNu7zGZhg": {
                                  "id": "SdL0-5kmTuiNrWNu7zGZhg",
                                  "vdid": "WDm3PgR-m2S3ILVJuyQQWw",
                                  "name": "Cell Process Manager: Process Create",
                                  "description": "Create a new child cell process bound to the specified APM that is owned by the requesting cell process, #. Or, the specified parent cell process (via override).",
                                  "type": "ACT"
                                },
                                "4s_DUfKnQ4aS-xRjewAfUQ": {
                                  "id": "4s_DUfKnQ4aS-xRjewAfUQ",
                                  "vdid": "gTH_grWRmSBhxNXs3I0Ckg",
                                  "name": "Cell Process Manager: Process Delete",
                                  "description": "Requests that the Cell Process Manager delete a branch of the cell process tree.",
                                  "type": "ACT"
                                },
                                "r-JgxABoS_a-mSE2c1nvKA": {
                                  "id": "r-JgxABoS_a-mSE2c1nvKA",
                                  "vdid": "lJGhthBCfZCuwe5PAlOdHw",
                                  "name": "Cell Process Manager: Process Query",
                                  "description": "Performs a query on a specific cell process managed by the Cell Process Manager.",
                                  "type": "ACT"
                                },
                                "wB5QKMYtS7yY2-v7Y3tGWA": {
                                  "id": "wB5QKMYtS7yY2-v7Y3tGWA",
                                  "vdid": "KNMJ-uyVFAg_Bp0UF8sEvA",
                                  "name": "Cell Process Manager: ControllerAction Request On Cell (actOn)",
                                  "description": "Generically re-routes the ControllerAction request specified by actRequest to the active cell specified by apmBindingPath + path, or path (iff path is fully-qualified).",
                                  "type": "ACT"
                                },
                                "LG9CCSEmSYaU6Mp9J0wZ5g": {
                                  "id": "LG9CCSEmSYaU6Mp9J0wZ5g",
                                  "vdid": "rPKyz638Np9iskmr9R0AEw",
                                  "name": "Cell Process Proxy Helper Model",
                                  "description": "A resuable helper cell model that allows developers to link namespace(s) defined in their own AbstractProcessModel(s) memory specifications to other cell processes.",
                                  "type": "CM",
                                  "CPPU-UPgS8eWiMap3Ixovg": {
                                    "id": "CPPU-UPgS8eWiMap3Ixovg",
                                    "vdid": "t1ic1gI5tpJcj5Oc8OQheg",
                                    "name": "Holarchy Cell Process Proxy Helper Process",
                                    "description": "Defines a helper process that functions as a proxy for action and operator calls to some (any) shared cell process.",
                                    "type": "APM"
                                  },
                                  "c-n6U_maQa23j9jWFDsgOw": {
                                    "id": "c-n6U_maQa23j9jWFDsgOw",
                                    "vdid": "s3pip6Xw8W7cIFYLMXzfiA",
                                    "name": "Cell Process Proxy: Proxy Status",
                                    "description": "Returns Boolean true if the cell process proxy helper cell was logically connected to an owned local cell process that has been deleted.",
                                    "type": "TOP"
                                  },
                                  "FTxze-WaRp6HS0Dlr_Ke6A": {
                                    "id": "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "vdid": "wUgsc48Siyg3e3z6hiLMBg",
                                    "name": "Cell Process Proxy: Proxy Operator",
                                    "description": "Forwards the specified operator request to the local cell process to which the proxy is currently connected.",
                                    "type": "TOP"
                                  },
                                  "X6ck_Bo4RmWTVHl-vk-urw": {
                                    "id": "X6ck_Bo4RmWTVHl-vk-urw",
                                    "vdid": "AkuTmpBuX0BpI4rkhlFeVw",
                                    "name": "Cell Process Proxy: Connect Proxy",
                                    "description": "Disconnect a connected cell process proxy process (if connected). And, connect the proxy to the specified local cell process.",
                                    "type": "ACT"
                                  },
                                  "ySiBEGcaRGWVOZmwBRyhrA": {
                                    "id": "ySiBEGcaRGWVOZmwBRyhrA",
                                    "vdid": "NWQbBUDkvSTmmFDnSCTz7Q",
                                    "name": "Cell Process Proxy: Disconnect Proxy",
                                    "description": "Disconnect a connected cell process proxy from whatever local cell process it is currently connected to.",
                                    "type": "ACT"
                                  },
                                  "rua1glcmTsOlYcfpZuiXnA": {
                                    "id": "rua1glcmTsOlYcfpZuiXnA",
                                    "vdid": "br9uI-cxQnlsQHN7zdRSjQ",
                                    "name": "Cell Process Proxy: Proxy Action",
                                    "description": "Forwards the specified action request to the local cell process to which the proxy is currently connected.",
                                    "type": "ACT"
                                  }
                                },
                                "MDVBKW89TvO9T62Ge7GmNg": {
                                  "id": "MDVBKW89TvO9T62Ge7GmNg",
                                  "vdid": "-hAMe3rgTcwy4rIqEPi7eQ",
                                  "name": "Holarchy Core",
                                  "description": "Low-level glue models, actions, and operators for building re-usable infrastructure for execution within an ObservableProcessController (OPC) runtime host instance.",
                                  "type": "CM",
                                  "RW8Y2O-kRNSv87yXT962wQ": {
                                    "id": "RW8Y2O-kRNSv87yXT962wQ",
                                    "vdid": "e4dxj77HMqe_v4l_aOzwwA",
                                    "name": "Holarchy Core Logic",
                                    "description": "A collection of TranitionOperator plug-ins that implement generic logic functions AND, OR, NOT, TRUE.",
                                    "type": "CM",
                                    "YgABX95wR86GCYrYaDLISA": {
                                      "id": "YgABX95wR86GCYrYaDLISA",
                                      "vdid": "5Ebtc8mARWrvCY6U_wzdDA",
                                      "name": "Logical AND",
                                      "description": "Returns Boolean true iff all suboperations return true.",
                                      "type": "TOP"
                                    },
                                    "0JIva4IFSm6Xm7i38g8uUA": {
                                      "id": "0JIva4IFSm6Xm7i38g8uUA",
                                      "vdid": "FAh08f8CZQHnj-Pkilu-rw",
                                      "name": "Logical OR",
                                      "description": "Returns Boolean true iff any suboperations return true.",
                                      "type": "TOP"
                                    },
                                    "TLSHkl73SO-utuzM7dyN2g": {
                                      "id": "TLSHkl73SO-utuzM7dyN2g",
                                      "vdid": "ASh3z9ynLmUqRJElxWHVjQ",
                                      "name": "Logical NOT",
                                      "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                      "type": "TOP"
                                    },
                                    "e89cwnP4Qd6MocAhzdOJgw": {
                                      "id": "e89cwnP4Qd6MocAhzdOJgw",
                                      "vdid": "NmKPVm8o5IAXQE-GgWcCDA",
                                      "name": "Logical TRUE",
                                      "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                                      "type": "TOP"
                                    }
                                  },
                                  "jQxlhOe-RDilxY0sNIierQ": {
                                    "id": "jQxlhOe-RDilxY0sNIierQ",
                                    "vdid": "la9u8vIGh_WglwTdEwbNZg",
                                    "name": "Holarchy Core Memory Actions & Operators",
                                    "description": "A collection of TransitionOperator plug-ins that perform logical comparisons operatations on cell processs memory.",
                                    "type": "CM",
                                    "oaF3-dXwQkusjD3I2o9-8g": {
                                      "id": "oaF3-dXwQkusjD3I2o9-8g",
                                      "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                                      "name": "OCD Array Length Equal to Value",
                                      "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                                      "type": "TOP"
                                    },
                                    "2w7n6KxdR8mdIliePJesLQ": {
                                      "id": "2w7n6KxdR8mdIliePJesLQ",
                                      "vdid": "LxdR4ZycXiKfJOoUpmcnUg",
                                      "name": "OCD Namespace A ? B Value Comparison",
                                      "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator. Note either A and/or B may be specified by value or path.",
                                      "type": "TOP"
                                    },
                                    "UeLs9PcASwuC7KR190eYhA": {
                                      "id": "UeLs9PcASwuC7KR190eYhA",
                                      "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                                      "name": "OCD Boolean Flag Is Set",
                                      "description": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                      "type": "TOP"
                                    },
                                    "ggsavKiARsq7rjwn-lxdfA": {
                                      "id": "ggsavKiARsq7rjwn-lxdfA",
                                      "vdid": "zo88N4oEjk34PxGoXmyTUA",
                                      "name": "OCD Namespace Is Greater Than Value",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                                      "type": "TOP"
                                    },
                                    "k7THIKKDQMKOac1Rxh9tEQ": {
                                      "id": "k7THIKKDQMKOac1Rxh9tEQ",
                                      "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                                      "name": "OCD Namespace Is Identical To Value",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                                      "type": "TOP"
                                    },
                                    "XxX_a1sQS1OlJbWAYfx6tQ": {
                                      "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                                      "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                                      "name": "OCD Namespace Is Less Than Value",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                                      "type": "TOP"
                                    },
                                    "kD1PcgqYQlm7fJatNG2ZsA": {
                                      "id": "kD1PcgqYQlm7fJatNG2ZsA",
                                      "vdid": "cNihhVrtDPl_5j7cSfcRug",
                                      "name": "OCD Namespace Is Truthy",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                      "type": "TOP"
                                    },
                                    "pj9a6tQpSXWp7WZZ8VbKLQ": {
                                      "id": "pj9a6tQpSXWp7WZZ8VbKLQ",
                                      "vdid": "zquEh0gwCPP_d9hmBD3uAQ",
                                      "name": "OCD Namespace Is Array Empty",
                                      "description": "Returns Boolean true iff the indicated OCD namespace value is an array AND value.length !== 0.",
                                      "type": "TOP"
                                    },
                                    "fS5liuD1RBSdaPBEhsoxXw": {
                                      "id": "fS5liuD1RBSdaPBEhsoxXw",
                                      "vdid": "DmRYzsWPhe-U6ZWFhMH9-w",
                                      "name": "OCD Namespace Is Map Keyless",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is declared as a map in the OCD filter spec AND the OCD value is an object AND Object.key(value) !== 0.",
                                      "type": "TOP"
                                    },
                                    "Ve_kEFkGSMSgOqUWu9Yo_w": {
                                      "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                      "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                                      "name": "OCD Read Namespace Indirect",
                                      "description": "Reads and returns the value of OCD namespace via path indirection.",
                                      "type": "ACT"
                                    },
                                    "5rFEDGLYRSiZCeChMnkCHQ": {
                                      "id": "5rFEDGLYRSiZCeChMnkCHQ",
                                      "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                                      "name": "OCD Boolean Flag Set",
                                      "description": "Set the Boolean-type OCD namespace specified by path to value true.",
                                      "type": "ACT"
                                    },
                                    "_yxWfFLnTqqN-UxRdd7W5w": {
                                      "id": "_yxWfFLnTqqN-UxRdd7W5w",
                                      "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                                      "name": "OCD Boolean Flag Clear",
                                      "description": "Set the Boolean-type OCD namespace specified by path to value false.",
                                      "type": "ACT"
                                    },
                                    "aXju3wSBQnufe0r51Y04wg": {
                                      "id": "aXju3wSBQnufe0r51Y04wg",
                                      "vdid": "1cu2zJ4iw9XB4K-RljVPPQ",
                                      "name": "Write Sub-Action Response",
                                      "description": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace.",
                                      "type": "ACT"
                                    }
                                  }
                                },
                                "OfLkkeNgQDm3xLb7TJqNRg": {
                                  "id": "OfLkkeNgQDm3xLb7TJqNRg",
                                  "vdid": "8zwruE_gKQ4TwwRAbJKs3Q",
                                  "name": "CPM Child Processes All In Step Operator Test Model",
                                  "description": "A model to test the CPM child processes all in step operator.",
                                  "type": "CM",
                                  "vjz7U4NWRE2_UlAvAjmS6g": {
                                    "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                    "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                    "name": "CPM Child Processes All In Step Operator Test Process",
                                    "description": "A model to test the CPM child processes all in step operator.",
                                    "type": "APM"
                                  },
                                  "fUQKrIPcQmingXFEQ4Pt9A": {
                                    "id": "fUQKrIPcQmingXFEQ4Pt9A",
                                    "vdid": "2fI0AaJ-wi2lnUuIo81NKQ",
                                    "name": "Dummy Process A Cell Model",
                                    "description": "A simple cell model that carries a regressive APM for testing various CPM actions and operators.",
                                    "type": "CM",
                                    "3E27IH_CQeqBUFsGm4tIIA": {
                                      "id": "3E27IH_CQeqBUFsGm4tIIA",
                                      "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                                      "name": "Dummy Process A Process",
                                      "description": "Implements a trivial cell process that does nothing.",
                                      "type": "APM"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "opc": {
                        "id": "sp3KSxGZpT9WlUFuJkCPrw",
                        "name": "CPM Child Processes All In Step Operator Test Runtime Host ObservableProcessController",
                        "description": "Provides generic shared memory and runtime evaluation services (aka \"cell plane\") for 'CPM Child Processes All In Step Operator Test Runtime Host' CellProcessor instance.",
                        "options": {
                          "evaluate": {
                            "maxFrames": 64,
                            "firstEvaluation": "constructor"
                          }
                        },
                        "apmMap": {
                          "vjz7U4NWRE2_UlAvAjmS6g": {
                            "id": "vjz7U4NWRE2_UlAvAjmS6g",
                            "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                            "name": "CPM Child Processes All In Step Operator Test Process",
                            "description": "A model to test the CPM child processes all in step operator."
                          },
                          "htWG1ffm9-bcMtwyAawBrA": {
                            "id": "htWG1ffm9-bcMtwyAawBrA",
                            "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                            "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                            "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                          },
                          "3E27IH_CQeqBUFsGm4tIIA": {
                            "id": "3E27IH_CQeqBUFsGm4tIIA",
                            "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                            "name": "Dummy Process A Process",
                            "description": "Implements a trivial cell process that does nothing."
                          },
                          "CPPU-UPgS8eWiMap3Ixovg": {
                            "id": "CPPU-UPgS8eWiMap3Ixovg",
                            "vdid": "t1ic1gI5tpJcj5Oc8OQheg",
                            "name": "Holarchy Cell Process Proxy Helper Process",
                            "description": "Defines a helper process that functions as a proxy for action and operator calls to some (any) shared cell process."
                          }
                        },
                        "opmiSpecPaths": [
                          {
                            "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                            "opmiRef": {
                              "id": "htWG1ffm9-bcMtwyAawBrA",
                              "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                              "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                              "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                            }
                          },
                          {
                            "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID",
                            "opmiRef": {
                              "id": "vjz7U4NWRE2_UlAvAjmS6g",
                              "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                              "name": "CPM Child Processes All In Step Operator Test Process",
                              "description": "A model to test the CPM child processes all in step operator."
                            }
                          },
                          {
                            "specPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.cellProcessID",
                            "opmiRef": {
                              "id": "3E27IH_CQeqBUFsGm4tIIA",
                              "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                              "name": "Dummy Process A Process",
                              "description": "Implements a trivial cell process that does nothing."
                            }
                          }
                        ],
                        "ocdTemplateSpec": {
                          "____types": "jsObject",
                          "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                            "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Processes Memory",
                            "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process].",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "cellProcessMap": {
                              "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Map",
                              "____description": "A map of [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                              "____types": "jsObject",
                              "____asMap": true,
                              "____defaultValue": {},
                              "cellProcessID": {
                                "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Instance",
                                "____description": "Cell process instance memory for [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process]: A model to test the CPM child processes all in step operator.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "apm": "vjz7U4NWRE2_UlAvAjmS6g"
                                }
                              }
                            },
                            "revision": {
                              "____accept": "jsNumber",
                              "____defaultValue": 0
                            }
                          },
                          "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                            "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Processes Memory",
                            "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process].",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "cellProcessMap": {
                              "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Map",
                              "____description": "A map of [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                              "____types": "jsObject",
                              "____asMap": true,
                              "____defaultValue": {},
                              "cellProcessID": {
                                "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Instance",
                                "____description": "Cell process instance memory for [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process]: Implements a trivial cell process that does nothing.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "apm": "3E27IH_CQeqBUFsGm4tIIA"
                                }
                              }
                            },
                            "revision": {
                              "____accept": "jsNumber",
                              "____defaultValue": 0
                            }
                          },
                          "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "____appdsl": {
                              "apm": "htWG1ffm9-bcMtwyAawBrA"
                            }
                          }
                        },
                        "ocdRuntimeSpec": {
                          "____label": "OPC [sp3KSxGZpT9WlUFuJkCPrw::CPM Child Processes All In Step Operator Test Runtime Host ObservableProcessController] Observable Controller Data Store",
                          "____description": "OPC [sp3KSxGZpT9WlUFuJkCPrw::CPM Child Processes All In Step Operator Test Runtime Host ObservableProcessController] system process runtime state data managed by OPC instance.",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                            "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Processes Memory",
                            "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process].",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "cellProcessMap": {
                              "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Map",
                              "____description": "A map of [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                              "____types": "jsObject",
                              "____asMap": true,
                              "____defaultValue": {},
                              "cellProcessID": {
                                "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Instance",
                                "____description": "Cell process instance memory for [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process]: A model to test the CPM child processes all in step operator.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "apm": "vjz7U4NWRE2_UlAvAjmS6g"
                                },
                                "____defaultValue": {},
                                "__apmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "revision": {
                              "____accept": "jsNumber",
                              "____defaultValue": 0
                            }
                          },
                          "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                            "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Processes Memory",
                            "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process].",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "cellProcessMap": {
                              "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Map",
                              "____description": "A map of [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                              "____types": "jsObject",
                              "____asMap": true,
                              "____defaultValue": {},
                              "cellProcessID": {
                                "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Instance",
                                "____description": "Cell process instance memory for [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process]: Implements a trivial cell process that does nothing.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "apm": "3E27IH_CQeqBUFsGm4tIIA"
                                },
                                "____defaultValue": {},
                                "__apmiStep": {
                                  "____accept": "jsString",
                                  "____defaultValue": "uninitialized"
                                }
                              }
                            },
                            "revision": {
                              "____accept": "jsNumber",
                              "____defaultValue": 0
                            }
                          },
                          "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "____appdsl": {
                              "apm": "htWG1ffm9-bcMtwyAawBrA"
                            },
                            "____label": "Cell Process Manager",
                            "____description": "Namespace reserved for storage of root cell process manager data structures. Access this information only via ControllerActions and TransitionOperators.",
                            "ownedCellProcesses": {
                              "____label": "Owned Cell Processes Data",
                              "____description": "Data used by the CPM to track and manage the lifespan of cell processes tree created & destroyed w/the CPM process create & delete actions respectively.",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "revision": {
                                "____label": "Owned Cell Processes Data Revision",
                                "____description": "A monotonically-increasing counter value that is incremented every time a cell process is created or deleted via ControllerAction call.",
                                "____accept": "jsNumber",
                                "____defaultValue": 0
                              },
                              "digraph": {
                                "____label": "Owned Cell Processes Data Model",
                                "____description": "A deserialized @encapsule/arccore.graph DirectedGraph class instance leveraged by the cell process manager action interface.",
                                "____accept": [
                                  "jsUndefined",
                                  "jsObject"
                                ]
                              }
                            },
                            "sharedCellProcesses": {
                              "____label": "Shared Cell Processes Data",
                              "____description": "Data used by the CPM to track and manage the lifespan of reference-counted, shared, cell processes accessed via embedded helper cells that function as local in-cell-process proxies to other cell process(es).",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "revision": {
                                "____label": "Shared Cell Processes Data Revision",
                                "____description": "A monotonically-increasing counter value that is incremented every time a shared cell process is created or deleted via ControllerAction call.",
                                "____accept": "jsNumber",
                                "____defaultValue": 0
                              },
                              "digraph": {
                                "____label": "Shared Cell Processes Data Model",
                                "____description": "A deserialized @encapsule/arccore.graph DirectedGraph class instance leveraged by the cell process manager action interface.",
                                "____accept": [
                                  "jsUndefined",
                                  "jsObject"
                                ]
                              }
                            },
                            "__apmiStep": {
                              "____accept": "jsString",
                              "____defaultValue": "uninitialized"
                            }
                          }
                        },
                        "ocdi": {
                          "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                            "cellProcessMap": {},
                            "revision": 0
                          },
                          "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                            "cellProcessMap": {},
                            "revision": 0
                          },
                          "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                            "ownedCellProcesses": {
                              "revision": 0,
                              "digraph": {
                                "name": "Owned Cell Processes Tree Model",
                                "description": "Tracks parent/child relationships between dynamically created cellular processes executing within a CellProcessor runtime host instance.",
                                "vlist": [
                                  {
                                    "u": "U1NTU1paWlqwsLCwxMTExA",
                                    "p": {
                                      "apmBindingPath": "~",
                                      "name": "Cell Process Manager"
                                    }
                                  }
                                ],
                                "elist": []
                              }
                            },
                            "sharedCellProcesses": {
                              "revision": 0,
                              "digraph": {
                                "name": "Shared Cell Processes Digraph Model",
                                "description": "Tracks reference-counted relationships between shared cell processes and embedded worker cell processes.",
                                "vlist": [],
                                "elist": []
                              }
                            },
                            "__apmiStep": "ready"
                          }
                        },
                        "transitionDispatcher": {
                          "filterDescriptor": {
                            "operationID": "HO1zVbhpLTT0Nb7ZdE5UWg",
                            "operationName": "Discriminator Filter",
                            "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                            "inputTypeVIID": "_Jljnn1ufDY6sHDYWIjC4Q",
                            "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "outputTypeVIID": "YFN4T-NG8C_KlehunsbXsA",
                            "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "operationVDID": "4YT0E3MvNVeuV47tQ4IUtA"
                          },
                          "supportedFilters": [
                            "[gJnA-VJTTLa0g9TKFmjv1Q::Cell Process Manager: Ancestor Processes Active]",
                            "[6j5F3HmKTLG9Q8kD1-QWYA::Cell Process Manager: Ancestor Processes All In Step]",
                            "[jFxFmpHSSPaeWEFfLh8eWw::Cell Process Manager: Ancestor Processes Any In Step]",
                            "[9tNY7o5GTUGH_xda2GhP-w::Cell Process Manager: Cell In Step Operator]",
                            "[xIRhBHueTRGO0xq63UUbyQ::Cell Process Manager: Child Processes Active]",
                            "[5P2MHjL4TXCqScp_xNrJyA::Cell Process Manager: Child Processes All In Step]",
                            "[esuJGgmERrSV3AFvFOMyhw::Cell Process Manager: Child Processes Any In Step]",
                            "[Fs6tE76WR5yTOdbwQ_N_FQ::Cell Process Manager: Descendant Processes Active]",
                            "[DX5GfJcwRNq0xW20KzMSJQ::Cell Process Manager: Descendant Processes All In Step]",
                            "[DzlsRZBOReO03GSPsU3CIg::Cell Process Manager: Descendant Processes Any In Step]",
                            "[DxL0zD_ERu-0kNGX2FvoGg::Cell Process Manager: Operator Request On Cell (opOn)]",
                            "[9HNGDusyTtKpleXFae7O5A::Cell Process Manager: Parent Process Active]",
                            "[PHPSWivjRyK80Gtymsp-pA::Cell Process Manager: Parent Process In Step]",
                            "[FTxze-WaRp6HS0Dlr_Ke6A::Cell Process Proxy: Proxy Operator]",
                            "[c-n6U_maQa23j9jWFDsgOw::Cell Process Proxy: Proxy Status]",
                            "[YgABX95wR86GCYrYaDLISA::Logical AND]",
                            "[TLSHkl73SO-utuzM7dyN2g::Logical NOT]",
                            "[0JIva4IFSm6Xm7i38g8uUA::Logical OR]",
                            "[e89cwnP4Qd6MocAhzdOJgw::Logical TRUE]",
                            "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]",
                            "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                            "[2w7n6KxdR8mdIliePJesLQ::OCD Namespace A ? B Value Comparison]",
                            "[pj9a6tQpSXWp7WZZ8VbKLQ::OCD Namespace Is Array Empty]",
                            "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                            "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                            "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                            "[fS5liuD1RBSdaPBEhsoxXw::OCD Namespace Is Map Keyless]",
                            "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                          ],
                          "requestSpace": {
                            "name": "Discriminator Decission Tree Model",
                            "description": "Models the combined input filter specifications of Filter ID's: [gJnA-VJTTLa0g9TKFmjv1Q, 6j5F3HmKTLG9Q8kD1-QWYA, jFxFmpHSSPaeWEFfLh8eWw, 9tNY7o5GTUGH_xda2GhP-w, xIRhBHueTRGO0xq63UUbyQ, 5P2MHjL4TXCqScp_xNrJyA, esuJGgmERrSV3AFvFOMyhw, Fs6tE76WR5yTOdbwQ_N_FQ, DX5GfJcwRNq0xW20KzMSJQ, DzlsRZBOReO03GSPsU3CIg, DxL0zD_ERu-0kNGX2FvoGg, 9HNGDusyTtKpleXFae7O5A, PHPSWivjRyK80Gtymsp-pA, FTxze-WaRp6HS0Dlr_Ke6A, c-n6U_maQa23j9jWFDsgOw, YgABX95wR86GCYrYaDLISA, TLSHkl73SO-utuzM7dyN2g, 0JIva4IFSm6Xm7i38g8uUA, e89cwnP4Qd6MocAhzdOJgw, oaF3-dXwQkusjD3I2o9-8g, UeLs9PcASwuC7KR190eYhA, 2w7n6KxdR8mdIliePJesLQ, pj9a6tQpSXWp7WZZ8VbKLQ, ggsavKiARsq7rjwn-lxdfA, k7THIKKDQMKOac1Rxh9tEQ, XxX_a1sQS1OlJbWAYfx6tQ, fS5liuD1RBSdaPBEhsoxXw, kD1PcgqYQlm7fJatNG2ZsA].",
                            "vlist": [
                              {
                                "u": "request",
                                "p": {
                                  "color": "green",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "filters1": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject)",
                                "p": {
                                  "filterSpecPath": "request",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.context",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsObject",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject).apmBindingPath(jsString)",
                                "p": {
                                  "filterSpecPath": "request.context.apmBindingPath",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsString",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject).ocdi(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.context.ocdi",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsObject",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject).transitionDispatcher(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.context.transitionDispatcher",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA",
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "TLSHkl73SO-utuzM7dyN2g",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "YgABX95wR86GCYrYaDLISA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "e89cwnP4Qd6MocAhzdOJgw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsObject",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "c-n6U_maQa23j9jWFDsgOw",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DxL0zD_ERu-0kNGX2FvoGg",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA",
                                    "6j5F3HmKTLG9Q8kD1-QWYA",
                                    "9HNGDusyTtKpleXFae7O5A",
                                    "9tNY7o5GTUGH_xda2GhP-w",
                                    "DX5GfJcwRNq0xW20KzMSJQ",
                                    "DzlsRZBOReO03GSPsU3CIg",
                                    "Fs6tE76WR5yTOdbwQ_N_FQ",
                                    "PHPSWivjRyK80Gtymsp-pA",
                                    "esuJGgmERrSV3AFvFOMyhw",
                                    "gJnA-VJTTLa0g9TKFmjv1Q",
                                    "jFxFmpHSSPaeWEFfLh8eWw",
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesActive(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesActive",
                                  "filters": [
                                    "gJnA-VJTTLa0g9TKFmjv1Q"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "gJnA-VJTTLa0g9TKFmjv1Q"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAllInStep",
                                  "filters": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAllInStep.apmStep",
                                  "filters": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAllInStep.apmStep",
                                  "filters": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAllInStep.apmStep.stepName",
                                  "filters": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "6j5F3HmKTLG9Q8kD1-QWYA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAnyInStep",
                                  "filters": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAnyInStep.apmStep",
                                  "filters": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAnyInStep.apmStep",
                                  "filters": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.ancestorProcessesAnyInStep.apmStep.stepName",
                                  "filters": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "jFxFmpHSSPaeWEFfLh8eWw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.inStep",
                                  "filters": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.inStep.apmStep",
                                  "filters": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.inStep.apmStep",
                                  "filters": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.inStep.apmStep.stepName",
                                  "filters": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "9tNY7o5GTUGH_xda2GhP-w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesActive(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesActive",
                                  "filters": [
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "xIRhBHueTRGO0xq63UUbyQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesAllInStep",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesAllInStep.apmStep",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesAllInStep.apmStep",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesAllInStep.apmStep.stepName",
                                  "filters": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "5P2MHjL4TXCqScp_xNrJyA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAnyInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesAnyInStep",
                                  "filters": [
                                    "esuJGgmERrSV3AFvFOMyhw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "esuJGgmERrSV3AFvFOMyhw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAnyInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.childProcessesAnyInStep.apmStep",
                                  "filters": [
                                    "esuJGgmERrSV3AFvFOMyhw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "esuJGgmERrSV3AFvFOMyhw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesActive(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesActive",
                                  "filters": [
                                    "Fs6tE76WR5yTOdbwQ_N_FQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "Fs6tE76WR5yTOdbwQ_N_FQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAllInStep",
                                  "filters": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAllInStep.apmStep",
                                  "filters": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAllInStep.apmStep",
                                  "filters": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAllInStep.apmStep.stepName",
                                  "filters": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "DX5GfJcwRNq0xW20KzMSJQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAnyInStep",
                                  "filters": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAnyInStep.apmStep",
                                  "filters": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAnyInStep.apmStep",
                                  "filters": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.descendantProcessesAnyInStep.apmStep.stepName",
                                  "filters": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "DzlsRZBOReO03GSPsU3CIg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.delegate",
                                  "filters": [
                                    "DxL0zD_ERu-0kNGX2FvoGg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "DxL0zD_ERu-0kNGX2FvoGg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject).operatorRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.delegate.operatorRequest",
                                  "filters": [
                                    "DxL0zD_ERu-0kNGX2FvoGg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "DxL0zD_ERu-0kNGX2FvoGg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessActive(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.parentProcessActive",
                                  "filters": [
                                    "9HNGDusyTtKpleXFae7O5A"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "9HNGDusyTtKpleXFae7O5A"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.parentProcessInStep",
                                  "filters": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.parentProcessInStep.apmStep",
                                  "filters": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.parentProcessInStep.apmStep",
                                  "filters": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsString).stepName(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.cell.query.parentProcessInStep.apmStep.stepName",
                                  "filters": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "PHPSWivjRyK80Gtymsp-pA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "FTxze-WaRp6HS0Dlr_Ke6A",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.CellProcessProxy",
                                  "filters": [
                                    "FTxze-WaRp6HS0Dlr_Ke6A"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "FTxze-WaRp6HS0Dlr_Ke6A"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.CellProcessProxy.proxy",
                                  "filters": [
                                    "FTxze-WaRp6HS0Dlr_Ke6A"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "FTxze-WaRp6HS0Dlr_Ke6A"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject).operatorRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.CellProcessProxy.proxy.operatorRequest",
                                  "filters": [
                                    "FTxze-WaRp6HS0Dlr_Ke6A"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "FTxze-WaRp6HS0Dlr_Ke6A"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.proxy",
                                  "filters": [
                                    "c-n6U_maQa23j9jWFDsgOw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "c-n6U_maQa23j9jWFDsgOw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.proxy.connect",
                                  "filters": [
                                    "c-n6U_maQa23j9jWFDsgOw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "c-n6U_maQa23j9jWFDsgOw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).statusIs(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.CellProcessor.proxy.connect.statusIs",
                                  "filters": [
                                    "c-n6U_maQa23j9jWFDsgOw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "c-n6U_maQa23j9jWFDsgOw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).and(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.and",
                                  "filters": [
                                    "YgABX95wR86GCYrYaDLISA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "YgABX95wR86GCYrYaDLISA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).not(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.not",
                                  "filters": [
                                    "TLSHkl73SO-utuzM7dyN2g"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "TLSHkl73SO-utuzM7dyN2g"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).or(jsArray)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.or",
                                  "filters": [
                                    "0JIva4IFSm6Xm7i38g8uUA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsArray",
                                  "filters1": [
                                    "0JIva4IFSm6Xm7i38g8uUA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).always(jsBoolean)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.always",
                                  "filters": [
                                    "e89cwnP4Qd6MocAhzdOJgw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsBoolean",
                                  "filters1": [
                                    "e89cwnP4Qd6MocAhzdOJgw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ",
                                    "UeLs9PcASwuC7KR190eYhA",
                                    "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "fS5liuD1RBSdaPBEhsoxXw",
                                    "ggsavKiARsq7rjwn-lxdfA",
                                    "k7THIKKDQMKOac1Rxh9tEQ",
                                    "kD1PcgqYQlm7fJatNG2ZsA",
                                    "oaF3-dXwQkusjD3I2o9-8g",
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.array",
                                  "filters": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.array.path",
                                  "filters": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.array.length",
                                  "filters": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject).equalToValue(jsNumber)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.array.length.equalToValue",
                                  "filters": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsNumber",
                                  "filters1": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject).equalToValue(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.array.length.equalToValue",
                                  "filters": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "oaF3-dXwQkusjD3I2o9-8g"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isBooleanFlagSet(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isBooleanFlagSet",
                                  "filters": [
                                    "UeLs9PcASwuC7KR190eYhA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "UeLs9PcASwuC7KR190eYhA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isBooleanFlagSet(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isBooleanFlagSet.path",
                                  "filters": [
                                    "UeLs9PcASwuC7KR190eYhA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "UeLs9PcASwuC7KR190eYhA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.compare",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.compare.values",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject).a(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.compare.values.a",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject).b(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.compare.values.b",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject).operator(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.compare.values.operator",
                                  "filters": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "2w7n6KxdR8mdIliePJesLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).arrayIsEmpty(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.arrayIsEmpty",
                                  "filters": [
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).arrayIsEmpty(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.arrayIsEmpty.path",
                                  "filters": [
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "pj9a6tQpSXWp7WZZ8VbKLQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceGreaterThanValue",
                                  "filters": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceGreaterThanValue.path",
                                  "filters": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject).value(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceGreaterThanValue.value",
                                  "filters": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject).value(jsNumber)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceGreaterThanValue.value",
                                  "filters": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsNumber",
                                  "filters1": [
                                    "ggsavKiARsq7rjwn-lxdfA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceIdenticalToValue",
                                  "filters": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceIdenticalToValue.path",
                                  "filters": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject).value(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceIdenticalToValue.value",
                                  "filters": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject).value(jsNumber)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceIdenticalToValue.value",
                                  "filters": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsNumber",
                                  "filters1": [
                                    "k7THIKKDQMKOac1Rxh9tEQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceLessThanValue",
                                  "filters": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceLessThanValue.path",
                                  "filters": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject).value(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceLessThanValue.value",
                                  "filters": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject).value(jsNumber)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceLessThanValue.value",
                                  "filters": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsNumber",
                                  "filters1": [
                                    "XxX_a1sQS1OlJbWAYfx6tQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).mapIsKeyless(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.mapIsKeyless",
                                  "filters": [
                                    "fS5liuD1RBSdaPBEhsoxXw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "fS5liuD1RBSdaPBEhsoxXw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).mapIsKeyless(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.mapIsKeyless.path",
                                  "filters": [
                                    "fS5liuD1RBSdaPBEhsoxXw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "fS5liuD1RBSdaPBEhsoxXw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceTruthy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceTruthy",
                                  "filters": [
                                    "kD1PcgqYQlm7fJatNG2ZsA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "kD1PcgqYQlm7fJatNG2ZsA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceTruthy(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.operatorRequest.holarchy.cm.operators.ocd.isNamespaceTruthy.path",
                                  "filters": [
                                    "kD1PcgqYQlm7fJatNG2ZsA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "kD1PcgqYQlm7fJatNG2ZsA"
                                  ]
                                }
                              }
                            ],
                            "elist": [
                              {
                                "e": {
                                  "u": "request",
                                  "v": "request(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject)",
                                  "v": "request(jsObject).context(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).context(jsObject)",
                                  "v": "request(jsObject).context(jsObject).apmBindingPath(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).context(jsObject)",
                                  "v": "request(jsObject).context(jsObject).ocdi(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).context(jsObject)",
                                  "v": "request(jsObject).context(jsObject).transitionDispatcher(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).and(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).not(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).or(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).always(jsBoolean)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesActive(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesActive(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAnyInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesActive(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessActive(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAllInStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).ancestorProcessesAnyInStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).inStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAllInStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAnyInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).childProcessesAnyInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAllInStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).descendantProcessesAnyInStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject).operatorRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsArray)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsString)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject).parentProcessInStep(jsObject).apmStep(jsString).stepName(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject).operatorRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).statusIs(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isBooleanFlagSet(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).arrayIsEmpty(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).mapIsKeyless(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceTruthy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject).equalToValue(jsNumber)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).array(jsObject).length(jsObject).equalToValue(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isBooleanFlagSet(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isBooleanFlagSet(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject).a(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject).b(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).compare(jsObject).values(jsObject).operator(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).arrayIsEmpty(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).arrayIsEmpty(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject).value(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceGreaterThanValue(jsObject).value(jsNumber)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject).value(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceIdenticalToValue(jsObject).value(jsNumber)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject).value(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceLessThanValue(jsObject).value(jsNumber)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).mapIsKeyless(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).mapIsKeyless(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceTruthy(jsObject)",
                                  "v": "request(jsObject).operatorRequest(jsObject).holarchy(jsObject).cm(jsObject).operators(jsObject).ocd(jsObject).isNamespaceTruthy(jsObject).path(jsString)"
                                }
                              }
                            ]
                          },
                          "options": {
                            "action": "getFilter"
                          }
                        },
                        "transitionDispatcherFilterMap": {
                          "gJnA-VJTTLa0g9TKFmjv1Q": {
                            "filterDescriptor": {
                              "operationID": "gJnA-VJTTLa0g9TKFmjv1Q",
                              "operationName": "Cell Process Manager: Ancestor Processes Active",
                              "operationDescription": "Return Boolean true if request.context.apmBindingPath is a cell process with active ancestor processes.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Ancestor Processes Active Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "ancestorProcessesActive": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "q31ohudaRnc-2yxFujIWLQ",
                              "inputTypeVDID": "1adLBO9BcJMOkVVhV4f-ig",
                              "outputTypeVIID": "7rmmJsOAG_On-Qsu_aOLCw",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "yPAIRLFbtZMPz4ScbhSwcg"
                            }
                          },
                          "6j5F3HmKTLG9Q8kD1-QWYA": {
                            "filterDescriptor": {
                              "operationID": "6j5F3HmKTLG9Q8kD1-QWYA",
                              "operationName": "Cell Process Manager: Ancestor Processes All In Step",
                              "operationDescription": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) all in the specified process step(s).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Ancestor Processes All In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "ancestorProcessesAllInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          },
                                          "omitCellProcessor": {
                                            "____label": "Omit CellProcessor",
                                            "____description": "Exclude the CellProcessor's Cell Process Manger process step.",
                                            "____accept": "jsBoolean",
                                            "____defaultValue": true
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "LCjyzgMewHLQtavsni6ugw",
                              "inputTypeVDID": "s-89F8jui_EQZNcuJEAMtQ",
                              "outputTypeVIID": "cPIdL7lhl0gnxyaDt0xclw",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "Vw4xRHNl3JN7ABac0KEpcg"
                            }
                          },
                          "jFxFmpHSSPaeWEFfLh8eWw": {
                            "filterDescriptor": {
                              "operationID": "jFxFmpHSSPaeWEFfLh8eWw",
                              "operationName": "Cell Process Manager: Ancestor Processes Any In Step",
                              "operationDescription": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) any of which are in the specified process step(s).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Ancestor Processes Any In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "ancestorProcessesAnyInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          },
                                          "omitCellProcessor": {
                                            "____label": "Omit CellProcessor",
                                            "____description": "Exclude the CellProcessor's Cell Process Manger process step.",
                                            "____accept": "jsBoolean",
                                            "____defaultValue": true
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "qh7wt5MghqHkf8TA970Isg",
                              "inputTypeVDID": "9O89jojui_qKZNcSFkAMpQ",
                              "outputTypeVIID": "dVyh7xX7wxDVc-vzANMU_Q",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "ES9dRLsnUJOS7xOciuWLcg"
                            }
                          },
                          "9tNY7o5GTUGH_xda2GhP-w": {
                            "filterDescriptor": {
                              "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                              "operationName": "Cell Process Manager: Cell In Step Operator",
                              "operationDescription": "Returns Boolean true iff the indicated cell is active and is in one of N >=1 APM process step label(s).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Cell In Step Operator Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "inStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                              "inputTypeVDID": "aI4QIJhguitjCjfhlL545A",
                              "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "woacRFYIn5O6_v2ctBUIcg"
                            }
                          },
                          "xIRhBHueTRGO0xq63UUbyQ": {
                            "filterDescriptor": {
                              "operationID": "xIRhBHueTRGO0xq63UUbyQ",
                              "operationName": "Cell Process Manager: Child Processes Active",
                              "operationDescription": "Returns Boolean true iff request.context.apmBindingPath is a cell process with one or more child cell processes.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Child Processes Active Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "childProcessesActive": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "4UQ1MuswyqVTGQqxY3GkxQ",
                              "inputTypeVDID": "zjrQa4NVsxyEGYv-32eBBw",
                              "outputTypeVIID": "IlcDahOM8PmLJGCSc8LYWA",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "RdQrRKRRv5Ne54ycUjkEcg"
                            }
                          },
                          "5P2MHjL4TXCqScp_xNrJyA": {
                            "filterDescriptor": {
                              "operationID": "5P2MHjL4TXCqScp_xNrJyA",
                              "operationName": "Cell Process Manager: Child Processes All In Step",
                              "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process whose child processes are all in the specified process step.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Child Processes All In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "childProcessesAllInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "CyItwqKglka3fL_yymT2Hw",
                              "inputTypeVDID": "2vNtggMLdy0h6q-JQYnZhw",
                              "outputTypeVIID": "2lRyd2mNBpsj8UUItbMgfA",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "x_A9RN5kT5NLrqucp39acg"
                            }
                          },
                          "esuJGgmERrSV3AFvFOMyhw": {
                            "filterDescriptor": {
                              "operationID": "esuJGgmERrSV3AFvFOMyhw",
                              "operationName": "Cell Process Manager: Child Processes Any In Step",
                              "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process with any child cell process in the specified process step.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Child Processes Any In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "childProcessesAnyInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "oZS-VRf4CsfWWzLjNiCBig",
                              "inputTypeVDID": "I96B4ynyZdTUGqD3lugS8g",
                              "outputTypeVIID": "KBov9UbxYf95j29LOwQo_Q",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "qk9tRNblOpNts3ucMFSEcg"
                            }
                          },
                          "Fs6tE76WR5yTOdbwQ_N_FQ": {
                            "filterDescriptor": {
                              "operationID": "Fs6tE76WR5yTOdbwQ_N_FQ",
                              "operationName": "Cell Process Manager: Descendant Processes Active",
                              "operationDescription": "Returns Boolean true if request.context.apmBindingPath is a cell process with active dependant cell processes.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Descendant Processes Active Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "descendantProcessesActive": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "Vtu0SajLKSxee9YIxyp_gg",
                              "inputTypeVDID": "v4tIiq2MEGhWH2NDs42_Rw",
                              "outputTypeVIID": "aIHtnWnyQJxHUdYGWTiOYw",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "wCHBRHRHg5PSohecfSgecg"
                            }
                          },
                          "DX5GfJcwRNq0xW20KzMSJQ": {
                            "filterDescriptor": {
                              "operationID": "DX5GfJcwRNq0xW20KzMSJQ",
                              "operationName": "Cell Process Manager: Descendant Processes All In Step",
                              "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process with all descendant cell processes in the specified process step.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Descendant Processes All In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "descendantProcessesAllInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "G97lcJCcq1Rx4hW8oXkDLA",
                              "inputTypeVDID": "J7XlhVO8Ovop8hsJiqGJZw",
                              "outputTypeVIID": "77mlDPUzGqgBoJa9TdESRg",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "hbPYRC6yqZOu07qcLH01cg"
                            }
                          },
                          "DzlsRZBOReO03GSPsU3CIg": {
                            "filterDescriptor": {
                              "operationID": "DzlsRZBOReO03GSPsU3CIg",
                              "operationName": "Cell Process Manager: Descendant Processes Any In Step",
                              "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process whose descendant cell processes contain any cell process(es) in the specified process step.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Descendant Processes Any In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "descendantProcessesAnyInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "rMeX5xCbb1ya4Li0DCcFoQ",
                              "inputTypeVDID": "xbXlnnm8OpAM8hsjXKGJUQ",
                              "outputTypeVIID": "wgVg3qZpo0RYtr_G6szN5A",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "8GtMRAPYQ5OeYWmcJuUMcg"
                            }
                          },
                          "DxL0zD_ERu-0kNGX2FvoGg": {
                            "filterDescriptor": {
                              "operationID": "DxL0zD_ERu-0kNGX2FvoGg",
                              "operationName": "Cell Process Manager: Operator Request On Cell (opOn)",
                              "operationDescription": "Generically re-routes the TransitionOperator request specified by operatorRequest to the active cell indicated by apmBindingPath + path, or path (iff path is fully-qualified).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Operator Request On Cell (opOn) Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "delegate": {
                                        "____types": "jsObject",
                                        "operatorRequest": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "YLFJL6iCghMv4NEjeMpjUg",
                              "inputTypeVDID": "Q-D0uRXRxgtMHqHPg3rtvg",
                              "outputTypeVIID": "yhlYdTxhXIXWTUsdh8nWEQ",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "5F54RH4lIpPZVDacnzxZcg"
                            }
                          },
                          "9HNGDusyTtKpleXFae7O5A": {
                            "filterDescriptor": {
                              "operationID": "9HNGDusyTtKpleXFae7O5A",
                              "operationName": "Cell Process Manager: Parent Process Active",
                              "operationDescription": "Returns Boolean true iff request.context.apmBindingPath is a cell process with an active parent process.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Parent Process Active Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "parentProcessActive": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "58apLhwPX-DwA865eK8Njw",
                              "inputTypeVDID": "mtRMYnGblaU-TYBdsAIhbw",
                              "outputTypeVIID": "sh_MqQTDccMxBIGxw7FQaw",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "L6GPRLzhVJNXJDGctUdhcg"
                            }
                          },
                          "PHPSWivjRyK80Gtymsp-pA": {
                            "filterDescriptor": {
                              "operationID": "PHPSWivjRyK80Gtymsp-pA",
                              "operationName": "Cell Process Manager: Parent Process In Step",
                              "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process whose parent cell process is in the specified process step.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Parent Process In Step Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "parentProcessInStep": {
                                          "____types": "jsObject",
                                          "apmStep": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "stepName": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "M2yeGPTmuArpYN5z5fWfGQ",
                              "inputTypeVDID": "iQZF-0oDkIWrnQV1vOyY0w",
                              "outputTypeVIID": "bvlMy4KaarvmQhlFw7HvKQ",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "of3IRHcfqpOz_JecgBr0cg"
                            }
                          },
                          "FTxze-WaRp6HS0Dlr_Ke6A": {
                            "filterDescriptor": {
                              "operationID": "FTxze-WaRp6HS0Dlr_Ke6A",
                              "operationName": "Cell Process Proxy: Proxy Operator",
                              "operationDescription": "Forwards the specified operator request to the local cell process to which the proxy is currently connected.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Proxy: Proxy Operator Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "CellProcessProxy": {
                                      "____types": "jsObject",
                                      "proxy": {
                                        "____types": "jsObject",
                                        "operatorRequest": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "ooFMvEOukuVa0x6ZXU8QYw",
                              "inputTypeVDID": "wt7Czz2MTKwfn3R_jPCbYw",
                              "outputTypeVIID": "ftWRWl9xc_cfwE1RhIu4ig",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "2T5xRHmCB5O0aEWc6ERmcg"
                            }
                          },
                          "c-n6U_maQa23j9jWFDsgOw": {
                            "filterDescriptor": {
                              "operationID": "c-n6U_maQa23j9jWFDsgOw",
                              "operationName": "Cell Process Proxy: Proxy Status",
                              "operationDescription": "Returns Boolean true if the cell process proxy helper cell was logically connected to an owned local cell process that has been deleted.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Proxy: Proxy Status Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "proxy": {
                                      "____types": "jsObject",
                                      "proxyCoordinates": {
                                        "____label": "Cell Process Proxy Helper Cell Coordinates Variant (Optional)",
                                        "____accept": "jsString",
                                        "____defaultValue": "#"
                                      },
                                      "connect": {
                                        "____types": "jsObject",
                                        "statusIs": {
                                          "____accept": "jsString",
                                          "____inValueSet": [
                                            "connected",
                                            "disconnected",
                                            "broken"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "5RayNO1bsuyAC3nJxgqNYQ",
                              "inputTypeVDID": "Yss_8yOIwEJc7pMKxWajIw",
                              "outputTypeVIID": "HfQhdWTbdkYrpdNDU5_mFQ",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "OexkRJ5JZJOITt2cXU4ocg"
                            }
                          },
                          "YgABX95wR86GCYrYaDLISA": {
                            "filterDescriptor": {
                              "operationID": "YgABX95wR86GCYrYaDLISA",
                              "operationName": "Logical AND",
                              "operationDescription": "Returns Boolean true iff all suboperations return true.",
                              "inputFilterSpec": {
                                "____label": "Logical AND Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "and": {
                                    "____types": "jsArray",
                                    "operandOperatorVariant": {
                                      "____accept": "jsObject"
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                              "inputTypeVDID": "aZ0313jYspKqFYbxLUobFA",
                              "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "9jcTRLaZgJMBefycqJ3Wcg"
                            }
                          },
                          "TLSHkl73SO-utuzM7dyN2g": {
                            "filterDescriptor": {
                              "operationID": "TLSHkl73SO-utuzM7dyN2g",
                              "operationName": "Logical NOT",
                              "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                              "inputFilterSpec": {
                                "____label": "Logical NOT Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "not": {
                                    "____accept": "jsObject"
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                              "inputTypeVDID": "b3mPoTvLTsPNNEE5vSl4Ig",
                              "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "MSNYRHRjqZPIbkKcBH-Scg"
                            }
                          },
                          "0JIva4IFSm6Xm7i38g8uUA": {
                            "filterDescriptor": {
                              "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                              "operationName": "Logical OR",
                              "operationDescription": "Returns Boolean true iff any suboperations return true.",
                              "inputFilterSpec": {
                                "____label": "Logical OR Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "or": {
                                    "____types": "jsArray",
                                    "operandOperatorVariant": {
                                      "____accept": "jsObject"
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                              "inputTypeVDID": "-JaOoCpSpMXUBcCaKY9fVw",
                              "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "4CecRIW4PJNmp1qcOG6ncg"
                            }
                          },
                          "e89cwnP4Qd6MocAhzdOJgw": {
                            "filterDescriptor": {
                              "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                              "operationName": "Logical TRUE",
                              "operationDescription": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                              "inputFilterSpec": {
                                "____label": "Logical TRUE Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "always": {
                                    "____accept": "jsBoolean",
                                    "____inValueSet": [
                                      true
                                    ]
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                              "inputTypeVDID": "C5XIeECWu2mxDmCCOEFunQ",
                              "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "7g4dROZHqpP8SX2c1AJhcg"
                            }
                          },
                          "oaF3-dXwQkusjD3I2o9-8g": {
                            "filterDescriptor": {
                              "operationID": "oaF3-dXwQkusjD3I2o9-8g",
                              "operationName": "OCD Array Length Equal to Value",
                              "operationDescription": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                              "inputFilterSpec": {
                                "____label": "OCD Array Length Equal to Value Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "array": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            },
                                            "length": {
                                              "____types": "jsObject",
                                              "equalToValue": {
                                                "____accept": [
                                                  "jsNumber",
                                                  "jsString"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "1w1jkkL88zPbGh1huUa66A",
                              "inputTypeVDID": "mlQwgyCDl-ST91MGpgC1VQ",
                              "outputTypeVIID": "ll5aBQHmBVx07i4pBJMThw",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "yhC0RNrN1ZMX5F-ckUIncg"
                            }
                          },
                          "UeLs9PcASwuC7KR190eYhA": {
                            "filterDescriptor": {
                              "operationID": "UeLs9PcASwuC7KR190eYhA",
                              "operationName": "OCD Boolean Flag Is Set",
                              "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                              "inputFilterSpec": {
                                "____label": "OCD Boolean Flag Is Set Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "isBooleanFlagSet": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                              "inputTypeVDID": "XaY0xWS0bd69voTSU_w3aA",
                              "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "6eZxRIQnF5PpgaiccabWcg"
                            }
                          },
                          "2w7n6KxdR8mdIliePJesLQ": {
                            "filterDescriptor": {
                              "operationID": "2w7n6KxdR8mdIliePJesLQ",
                              "operationName": "OCD Namespace A ? B Value Comparison",
                              "operationDescription": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator. Note either A and/or B may be specified by value or path.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace A ? B Value Comparison Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "compare": {
                                            "____types": "jsObject",
                                            "values": {
                                              "____types": "jsObject",
                                              "a": {
                                                "____label": "Operand A",
                                                "____description": "Operand A for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                                "____types": "jsObject",
                                                "value": {
                                                  "____accept": [
                                                    "jsUndefined",
                                                    "jsNull",
                                                    "jsString",
                                                    "jsNumber",
                                                    "jsBoolean"
                                                  ]
                                                },
                                                "path": {
                                                  "____accept": [
                                                    "jsUndefined",
                                                    "jsString"
                                                  ]
                                                }
                                              },
                                              "b": {
                                                "____label": "Operand B",
                                                "____description": "Operand B for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                                "____types": "jsObject",
                                                "value": {
                                                  "____accept": [
                                                    "jsUndefined",
                                                    "jsNull",
                                                    "jsString",
                                                    "jsNumber",
                                                    "jsBoolean"
                                                  ]
                                                },
                                                "path": {
                                                  "____accept": [
                                                    "jsUndefined",
                                                    "jsString"
                                                  ]
                                                }
                                              },
                                              "operator": {
                                                "____label": "Comparison Operator",
                                                "____description": "A string enum indicating the comparison operator to use.",
                                                "____accept": "jsString",
                                                "____inValueSet": [
                                                  "===",
                                                  "==",
                                                  "<",
                                                  "<=",
                                                  ">",
                                                  ">="
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "Vd7i-lH1mj84kJrcpYoR9g",
                              "inputTypeVDID": "we4gsONAq8XLVofHZjgx5w",
                              "outputTypeVIID": "kxjuRwQKX01DJDkjruKvXg",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "l60yRNc4cZMrOtqcKqP9cg"
                            }
                          },
                          "pj9a6tQpSXWp7WZZ8VbKLQ": {
                            "filterDescriptor": {
                              "operationID": "pj9a6tQpSXWp7WZZ8VbKLQ",
                              "operationName": "OCD Namespace Is Array Empty",
                              "operationDescription": "Returns Boolean true iff the indicated OCD namespace value is an array AND value.length !== 0.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace Is Array Empty Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "arrayIsEmpty": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "8WDm-CC4lQnnKYro89MK2g",
                              "inputTypeVDID": "Q-Htr-yHRojgL8p4HkS4bw",
                              "outputTypeVIID": "lcDQLsyLvx_9RfG-kyHwhA",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "53cpRDV7MZOYdMOcMW07cg"
                            }
                          },
                          "ggsavKiARsq7rjwn-lxdfA": {
                            "filterDescriptor": {
                              "operationID": "ggsavKiARsq7rjwn-lxdfA",
                              "operationName": "OCD Namespace Is Greater Than Value",
                              "operationDescription": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace Is Greater Than Value Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "isNamespaceGreaterThanValue": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            },
                                            "value": {
                                              "____accept": [
                                                "jsString",
                                                "jsNumber"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "CF-H4WojwJ7B1YyWvKlnMQ",
                              "inputTypeVDID": "LRU9vcBpToNeHesuiIxokw",
                              "outputTypeVIID": "vevJRLqsD_7D5r52vqsYNg",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "soEGROP6ipOrHwqcgR0Icg"
                            }
                          },
                          "k7THIKKDQMKOac1Rxh9tEQ": {
                            "filterDescriptor": {
                              "operationID": "k7THIKKDQMKOac1Rxh9tEQ",
                              "operationName": "OCD Namespace Is Identical To Value",
                              "operationDescription": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace Is Identical To Value Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "isNamespaceIdenticalToValue": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            },
                                            "value": {
                                              "____accept": [
                                                "jsString",
                                                "jsNumber"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "2lapAiv6Y2wX3rSyYd_aXA",
                              "inputTypeVDID": "9RU9alRpThHQHeu-ZIxoLg",
                              "outputTypeVIID": "a4e-UB9BqYvz755bPVZ4AA",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "aCc3RHCjwpMQ7XKc0o4mcg"
                            }
                          },
                          "XxX_a1sQS1OlJbWAYfx6tQ": {
                            "filterDescriptor": {
                              "operationID": "XxX_a1sQS1OlJbWAYfx6tQ",
                              "operationName": "OCD Namespace Is Less Than Value",
                              "operationDescription": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace Is Less Than Value Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "isNamespaceLessThanValue": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            },
                                            "value": {
                                              "____accept": [
                                                "jsString",
                                                "jsNumber"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "SdjtRCNawPzfg3fuyxpeog",
                              "inputTypeVDID": "ZuD2TKtYUqU87dkAt67RVA",
                              "outputTypeVIID": "C3a0V2HEKW7fH5xudFSe2Q",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "l9RzRDh_y5NJEa-c2o72cg"
                            }
                          },
                          "fS5liuD1RBSdaPBEhsoxXw": {
                            "filterDescriptor": {
                              "operationID": "fS5liuD1RBSdaPBEhsoxXw",
                              "operationName": "OCD Namespace Is Map Keyless",
                              "operationDescription": "Returns Boolean true iff the indicated OCD namespace is declared as a map in the OCD filter spec AND the OCD value is an object AND Object.key(value) !== 0.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace Is Map Keyless Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "mapIsKeyless": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "AhSGTfAi0eXWxin8HSY6dA",
                              "inputTypeVDID": "JOHtpQqHRiCYL8pNDES4Rg",
                              "outputTypeVIID": "D2SJBJGJrPn0GyV2XgoWJw",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "U6xLRDGfAJP2ayWcc4jWcg"
                            }
                          },
                          "kD1PcgqYQlm7fJatNG2ZsA": {
                            "filterDescriptor": {
                              "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                              "operationName": "OCD Namespace Is Truthy",
                              "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                              "inputFilterSpec": {
                                "____label": "OCD Namespace Is Truthy Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "transitionDispatcher": {
                                    "____label": "OPC Transition Dispatcher",
                                    "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                    "____accept": "jsObject"
                                  }
                                },
                                "operatorRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "operators": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "isNamespaceTruthy": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsBoolean"
                              },
                              "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                              "inputTypeVDID": "IqY0aMK0bZrZvoSd7_w3IQ",
                              "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                              "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                              "operationVDID": "vqWEROJwL5P3HeKc3FBvcg"
                            }
                          }
                        },
                        "actionDispatcher": {
                          "filterDescriptor": {
                            "operationID": "ZTB_AGxYa2hLiSr1ca2oQw",
                            "operationName": "Discriminator Filter",
                            "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                            "inputTypeVIID": "A3vkri00JGmELaaIvKVzTg",
                            "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "outputTypeVIID": "cRnIop6bh-mauWMvRNaiqw",
                            "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "operationVDID": "7xv0E79ONVcnqI7tcfgUtA"
                          },
                          "supportedFilters": [
                            "[wB5QKMYtS7yY2-v7Y3tGWA::Cell Process Manager: ControllerAction Request On Cell (actOn)]",
                            "[VNaA0AMsTXawb32xLaNGTA::Cell Process Manager: Initialize]",
                            "[SdL0-5kmTuiNrWNu7zGZhg::Cell Process Manager: Process Create]",
                            "[4s_DUfKnQ4aS-xRjewAfUQ::Cell Process Manager: Process Delete]",
                            "[r-JgxABoS_a-mSE2c1nvKA::Cell Process Manager: Process Query]",
                            "[X6ck_Bo4RmWTVHl-vk-urw::Cell Process Proxy: Connect Proxy]",
                            "[ySiBEGcaRGWVOZmwBRyhrA::Cell Process Proxy: Disconnect Proxy]",
                            "[rua1glcmTsOlYcfpZuiXnA::Cell Process Proxy: Proxy Action]",
                            "[_yxWfFLnTqqN-UxRdd7W5w::OCD Boolean Flag Clear]",
                            "[5rFEDGLYRSiZCeChMnkCHQ::OCD Boolean Flag Set]",
                            "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                            "[aXju3wSBQnufe0r51Y04wg::Write Sub-Action Response]",
                            "[KX0V_aQ3RzG01tzBS24MGw::OPC Intrinsic NOOP Action]",
                            "[S1GqYjTtSQazSxkIL9vtpA::OPC Intrinsic Status Action]"
                          ],
                          "requestSpace": {
                            "name": "Discriminator Decission Tree Model",
                            "description": "Models the combined input filter specifications of Filter ID's: [wB5QKMYtS7yY2-v7Y3tGWA, VNaA0AMsTXawb32xLaNGTA, SdL0-5kmTuiNrWNu7zGZhg, 4s_DUfKnQ4aS-xRjewAfUQ, r-JgxABoS_a-mSE2c1nvKA, X6ck_Bo4RmWTVHl-vk-urw, ySiBEGcaRGWVOZmwBRyhrA, rua1glcmTsOlYcfpZuiXnA, _yxWfFLnTqqN-UxRdd7W5w, 5rFEDGLYRSiZCeChMnkCHQ, Ve_kEFkGSMSgOqUWu9Yo_w, aXju3wSBQnufe0r51Y04wg, KX0V_aQ3RzG01tzBS24MGw, S1GqYjTtSQazSxkIL9vtpA].",
                            "vlist": [
                              {
                                "u": "request",
                                "p": {
                                  "color": "green",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "filters1": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject)",
                                "p": {
                                  "filterSpecPath": "request",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.context",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsObject",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject).apmBindingPath(jsString)",
                                "p": {
                                  "filterSpecPath": "request.context.apmBindingPath",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsString",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject).ocdi(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.context.ocdi",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsObject",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).context(jsObject).act(jsFunction)",
                                "p": {
                                  "filterSpecPath": "request.context.act",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "rua1glcmTsOlYcfpZuiXnA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "black",
                                  "typeConstraint": "jsFunction",
                                  "filters1": []
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "SdL0-5kmTuiNrWNu7zGZhg",
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.cell",
                                  "filters": [
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "r-JgxABoS_a-mSE2c1nvKA",
                                    "wB5QKMYtS7yY2-v7Y3tGWA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.cell.delegate",
                                  "filters": [
                                    "wB5QKMYtS7yY2-v7Y3tGWA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "wB5QKMYtS7yY2-v7Y3tGWA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject).actionRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.cell.delegate.actionRequest",
                                  "filters": [
                                    "wB5QKMYtS7yY2-v7Y3tGWA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "wB5QKMYtS7yY2-v7Y3tGWA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy",
                                  "filters": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA",
                                    "VNaA0AMsTXawb32xLaNGTA",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w",
                                    "aXju3wSBQnufe0r51Y04wg",
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessor(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.CellProcessor",
                                  "filters": [
                                    "VNaA0AMsTXawb32xLaNGTA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "VNaA0AMsTXawb32xLaNGTA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessor(jsObject).initialize(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.CellProcessor.initialize",
                                  "filters": [
                                    "VNaA0AMsTXawb32xLaNGTA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "VNaA0AMsTXawb32xLaNGTA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.process",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "SdL0-5kmTuiNrWNu7zGZhg"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ",
                                    "SdL0-5kmTuiNrWNu7zGZhg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject).activate(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.process.activate",
                                  "filters": [
                                    "SdL0-5kmTuiNrWNu7zGZhg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "SdL0-5kmTuiNrWNu7zGZhg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject).deactivate(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.process.deactivate",
                                  "filters": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "4s_DUfKnQ4aS-xRjewAfUQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.cell.query",
                                  "filters": [
                                    "r-JgxABoS_a-mSE2c1nvKA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "r-JgxABoS_a-mSE2c1nvKA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy",
                                  "filters": [
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "X6ck_Bo4RmWTVHl-vk-urw",
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy.connect",
                                  "filters": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy.connect.processCoordinates",
                                  "filters": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy.connect.processCoordinates",
                                  "filters": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsString).apmID(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy.connect.processCoordinates.apmID",
                                  "filters": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsObject).apmID(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy.connect.processCoordinates.apmID",
                                  "filters": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "X6ck_Bo4RmWTVHl-vk-urw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).disconnect(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.CellProcessor.proxy.disconnect",
                                  "filters": [
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "ySiBEGcaRGWVOZmwBRyhrA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.CellProcessProxy",
                                  "filters": [
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.CellProcessProxy.proxy",
                                  "filters": [
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject).actionRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.CellProcessProxy.proxy.actionRequest",
                                  "filters": [
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "rua1glcmTsOlYcfpZuiXnA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm",
                                  "filters": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions",
                                  "filters": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd",
                                  "filters": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5rFEDGLYRSiZCeChMnkCHQ",
                                    "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).clearBooleanFlag(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd.clearBooleanFlag",
                                  "filters": [
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).clearBooleanFlag(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd.clearBooleanFlag.path",
                                  "filters": [
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "_yxWfFLnTqqN-UxRdd7W5w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).setBooleanFlag(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd.setBooleanFlag",
                                  "filters": [
                                    "5rFEDGLYRSiZCeChMnkCHQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "5rFEDGLYRSiZCeChMnkCHQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).setBooleanFlag(jsObject).path(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd.setBooleanFlag.path",
                                  "filters": [
                                    "5rFEDGLYRSiZCeChMnkCHQ"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "5rFEDGLYRSiZCeChMnkCHQ"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).readNamespaceIndirect(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd.readNamespaceIndirect",
                                  "filters": [
                                    "Ve_kEFkGSMSgOqUWu9Yo_w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "Ve_kEFkGSMSgOqUWu9Yo_w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).readNamespaceIndirect(jsObject).path2(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.cm.actions.ocd.readNamespaceIndirect.path2",
                                  "filters": [
                                    "Ve_kEFkGSMSgOqUWu9Yo_w"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "Ve_kEFkGSMSgOqUWu9Yo_w"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.core",
                                  "filters": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.core.writeSubactionResponse",
                                  "filters": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject).subactionRequest(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.core.writeSubactionResponse.subactionRequest",
                                  "filters": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject).writeResponsePath(jsString)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.core.writeSubactionResponse.writeResponsePath",
                                  "filters": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsString",
                                  "filters1": [
                                    "aXju3wSBQnufe0r51Y04wg"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.opc",
                                  "filters": [
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA"
                                  ],
                                  "color": "green",
                                  "typeConstraint": "jsObject",
                                  "filters1": [
                                    "KX0V_aQ3RzG01tzBS24MGw",
                                    "S1GqYjTtSQazSxkIL9vtpA"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject).noop(jsBoolean)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.opc.noop",
                                  "filters": [
                                    "KX0V_aQ3RzG01tzBS24MGw"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsBoolean",
                                  "filters1": [
                                    "KX0V_aQ3RzG01tzBS24MGw"
                                  ]
                                }
                              },
                              {
                                "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject).status(jsBoolean)",
                                "p": {
                                  "filterSpecPath": "request.actionRequest.holarchy.opc.status",
                                  "filters": [
                                    "S1GqYjTtSQazSxkIL9vtpA"
                                  ],
                                  "color": "gold",
                                  "typeConstraint": "jsBoolean",
                                  "filters1": [
                                    "S1GqYjTtSQazSxkIL9vtpA"
                                  ]
                                }
                              }
                            ],
                            "elist": [
                              {
                                "e": {
                                  "u": "request",
                                  "v": "request(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject)",
                                  "v": "request(jsObject).context(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).context(jsObject)",
                                  "v": "request(jsObject).context(jsObject).apmBindingPath(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).context(jsObject)",
                                  "v": "request(jsObject).context(jsObject).ocdi(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).context(jsObject)",
                                  "v": "request(jsObject).context(jsObject).act(jsFunction)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).query(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).cell(jsObject).delegate(jsObject).actionRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessor(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessor(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessor(jsObject).initialize(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject).activate(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).process(jsObject).deactivate(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).disconnect(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsString)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsString).apmID(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).CellProcessor(jsObject).proxy(jsObject).connect(jsObject).processCoordinates(jsObject).apmID(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).CellProcessProxy(jsObject).proxy(jsObject).actionRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).clearBooleanFlag(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).setBooleanFlag(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).readNamespaceIndirect(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).clearBooleanFlag(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).clearBooleanFlag(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).setBooleanFlag(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).setBooleanFlag(jsObject).path(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).readNamespaceIndirect(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).cm(jsObject).actions(jsObject).ocd(jsObject).readNamespaceIndirect(jsObject).path2(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject).subactionRequest(jsObject)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).core(jsObject).writeSubactionResponse(jsObject).writeResponsePath(jsString)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject).noop(jsBoolean)"
                                }
                              },
                              {
                                "e": {
                                  "u": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject)",
                                  "v": "request(jsObject).actionRequest(jsObject).holarchy(jsObject).opc(jsObject).status(jsBoolean)"
                                }
                              }
                            ]
                          },
                          "options": {
                            "action": "getFilter"
                          }
                        },
                        "actionDispatcherFilterMap": {
                          "wB5QKMYtS7yY2-v7Y3tGWA": {
                            "filterDescriptor": {
                              "operationID": "wB5QKMYtS7yY2-v7Y3tGWA",
                              "operationName": "Cell Process Manager: ControllerAction Request On Cell (actOn)",
                              "operationDescription": "Generically re-routes the ControllerAction request specified by actRequest to the active cell specified by apmBindingPath + path, or path (iff path is fully-qualified).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: ControllerAction Request On Cell (actOn) Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "delegate": {
                                        "____types": "jsObject",
                                        "actionRequest": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____opaque": true
                              },
                              "inputTypeVIID": "xlhmOyBVsNE2aEhprpj6vg",
                              "inputTypeVDID": "QZ6DlSj0BUWnSHV_q0FDRQ",
                              "outputTypeVIID": "L35hYFmSkJGtY4epRd-hcw",
                              "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                              "operationVDID": "XBn7E3ND1ldv18XtR_kEtA"
                            }
                          },
                          "VNaA0AMsTXawb32xLaNGTA": {
                            "filterDescriptor": {
                              "operationID": "VNaA0AMsTXawb32xLaNGTA",
                              "operationName": "Cell Process Manager: Initialize",
                              "operationDescription": "Performs initialization of Cell Process Manager cell process (the root and parent process of all cell processes executing in a CellProcess runtime host instance).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Initialize Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "CellProcessor": {
                                      "____types": "jsObject",
                                      "initialize": {
                                        "____types": "jsObject",
                                        "options": {
                                          "____accept": [
                                            "jsUndefined",
                                            "jsObject"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsUndefined"
                              },
                              "inputTypeVIID": "9Z4DiWZgE5FZWn8BWGELxQ",
                              "inputTypeVDID": "x-u1EofawpIc4T7FPkAGYQ",
                              "outputTypeVIID": "lMKXDxhWJyUadol-UoiO1w",
                              "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                              "operationVDID": "329Gkp9dLDHMBCEweD_BSA"
                            }
                          },
                          "SdL0-5kmTuiNrWNu7zGZhg": {
                            "filterDescriptor": {
                              "operationID": "SdL0-5kmTuiNrWNu7zGZhg",
                              "operationName": "Cell Process Manager: Process Create",
                              "operationDescription": "Create a new child cell process bound to the specified APM that is owned by the requesting cell process, #. Or, the specified parent cell process (via override).",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Process Create Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "process": {
                                      "____types": "jsObject",
                                      "processCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "activate": {
                                        "____types": "jsObject",
                                        "processData": {
                                          "____accept": [
                                            "jsUndefined",
                                            "jsObject"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                },
                                "cellProcessID": {
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                }
                              },
                              "inputTypeVIID": "QDRiVzJHN1R8D34LBGwj7w",
                              "inputTypeVDID": "wDSnQe4xOsAMGc15hAu3Xw",
                              "outputTypeVIID": "I_uaQqYwTc6JXEjnIn7x1w",
                              "outputTypeVDID": "SiNf_yYQsz88lV04PLIrIQ",
                              "operationVDID": "Z_ONzbt6sGhHW0ceeQro2Q"
                            }
                          },
                          "4s_DUfKnQ4aS-xRjewAfUQ": {
                            "filterDescriptor": {
                              "operationID": "4s_DUfKnQ4aS-xRjewAfUQ",
                              "operationName": "Cell Process Manager: Process Delete",
                              "operationDescription": "Requests that the Cell Process Manager delete a branch of the cell process tree.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Process Delete Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "process": {
                                      "____types": "jsObject",
                                      "processCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "deactivate": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____accept": "jsString"
                                },
                                "cellProcessID": {
                                  "____accept": "jsString"
                                }
                              },
                              "inputTypeVIID": "03zn7aDOwRLqUUx_Yoxxjg",
                              "inputTypeVDID": "afoNsW5qDEH-SV7WF0GYMA",
                              "outputTypeVIID": "Q3j31XEnUGjaNC_FN5gxcw",
                              "outputTypeVDID": "9eKi_3wFnxJsHWIU3kSK7Q",
                              "operationVDID": "j1kuCQ9Ix5RKIVj0PVpPrg"
                            }
                          },
                          "r-JgxABoS_a-mSE2c1nvKA": {
                            "filterDescriptor": {
                              "operationID": "r-JgxABoS_a-mSE2c1nvKA",
                              "operationName": "Cell Process Manager: Process Query",
                              "operationDescription": "Performs a query on a specific cell process managed by the Cell Process Manager.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Manager: Process Query Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "cellCoordinates": {
                                        "____types": [
                                          "jsString",
                                          "jsObject"
                                        ],
                                        "____defaultValue": "#",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "instanceName": {
                                          "____accept": "jsString",
                                          "____defaultValue": "singleton"
                                        }
                                      },
                                      "query": {
                                        "____types": "jsObject",
                                        "filterBy": {
                                          "____label": "Optional Filter-By APM Binding",
                                          "____description": "An optional APM ID or array of APM ID's that must be matched in query response result.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmIDs": {
                                            "____types": [
                                              "jsString",
                                              "jsArray"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        },
                                        "resultSets": {
                                          "____types": "jsObject",
                                          "____defaultValue": {
                                            "parent": true,
                                            "ancestors": true,
                                            "children": true,
                                            "descendants": true
                                          },
                                          "parent": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          },
                                          "ancestors": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          },
                                          "children": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          },
                                          "descendants": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____label": "Query Cell Process Action Result",
                                "____description": "A descriptor object returned by act call to Cell Process Manager cell process query via response.result.actionResult.",
                                "____types": "jsObject",
                                "query": {
                                  "____label": "Query Cell Process",
                                  "____description": "The cell process ID and apmBindingPath of the queried cell process.",
                                  "____types": "jsObject",
                                  "cellProcessID": {
                                    "____accept": "jsString"
                                  },
                                  "apmBindingPath": {
                                    "____accept": "jsString"
                                  },
                                  "apmID": {
                                    "____accept": "jsString"
                                  },
                                  "resultSets": {
                                    "____types": "jsObject",
                                    "parent": {
                                      "____accept": "jsBoolean"
                                    },
                                    "ancestors": {
                                      "____accept": "jsBoolean"
                                    },
                                    "children": {
                                      "____accept": "jsBoolean"
                                    },
                                    "descendants": {
                                      "____accept": "jsBoolean"
                                    }
                                  }
                                },
                                "parent": {
                                  "____label": "Parent Cell Process",
                                  "____description": "The cell process ID and apmBindingPath of the queried cell process' parent cell process.",
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "cellProcessID": {
                                    "____accept": [
                                      "jsString",
                                      "jsNull"
                                    ],
                                    "____defaultValue": null
                                  },
                                  "apmBindingPath": {
                                    "____accept": [
                                      "jsString",
                                      "jsNull"
                                    ],
                                    "____defaultValue": null
                                  },
                                  "apmID": {
                                    "____accept": [
                                      "jsString",
                                      "jsNull"
                                    ],
                                    "____defaultValue": null
                                  }
                                },
                                "ancestors": {
                                  "____label": "Ancestor Cell Processes",
                                  "____description": "An array of cell process ID and apmBindingPath descriptor objects that include the queried cell process' parent, it's parent...",
                                  "____types": [
                                    "jsUndefined",
                                    "jsArray"
                                  ],
                                  "cellProcessDescriptor": {
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "cellProcessID": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "apmBindingPath": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "apmID": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    }
                                  }
                                },
                                "children": {
                                  "____label": "Child Cell Processes",
                                  "____description": "An array of cell process ID and apmBindingPath descriptor objects that include the queried cell process' child processes.",
                                  "____types": [
                                    "jsUndefined",
                                    "jsArray"
                                  ],
                                  "childProcessDescriptor": {
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "cellProcessID": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "apmBindingPath": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "apmID": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    }
                                  }
                                },
                                "descendants": {
                                  "____label": "Descendant Cell Processes",
                                  "____description": "An array of cell process ID and apmBindingPath descriptor objects that include the queried cell process' children, their children...",
                                  "____types": [
                                    "jsUndefined",
                                    "jsArray"
                                  ],
                                  "descendantProcessDescriptor": {
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "cellProcessID": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "apmBindingPath": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    },
                                    "apmID": {
                                      "____accept": [
                                        "jsString",
                                        "jsNull"
                                      ],
                                      "____defaultValue": null
                                    }
                                  }
                                }
                              },
                              "inputTypeVIID": "vtARkNRniM94mES9BVDdDg",
                              "inputTypeVDID": "PPuoreuQdRpBD0zG3SWnEw",
                              "outputTypeVIID": "JtnG3qmcahv2W5qo9IoPnw",
                              "outputTypeVDID": "rRcfFnGcxrjgQ1q8bpA-Fg",
                              "operationVDID": "1sLSyF6l6Aypbz4FaZi9Bg"
                            }
                          },
                          "X6ck_Bo4RmWTVHl-vk-urw": {
                            "filterDescriptor": {
                              "operationID": "X6ck_Bo4RmWTVHl-vk-urw",
                              "operationName": "Cell Process Proxy: Connect Proxy",
                              "operationDescription": "Disconnect a connected cell process proxy process (if connected). And, connect the proxy to the specified local cell process.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Proxy: Connect Proxy Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "proxy": {
                                      "____types": "jsObject",
                                      "proxyCoordinates": {
                                        "____label": "Cell Process Proxy Helper Cell Coordinates Variant (Optional)",
                                        "____accept": "jsString",
                                        "____defaultValue": "#"
                                      },
                                      "connect": {
                                        "____types": "jsObject",
                                        "processCoordinates": {
                                          "____label": "Cell Process Coordinates Variant (Required)",
                                          "____types": [
                                            "jsString",
                                            "jsObject"
                                          ],
                                          "apmID": {
                                            "____accept": "jsString"
                                          },
                                          "instanceName": {
                                            "____accept": "jsString",
                                            "____defaultValue": "singleton"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsObject"
                              },
                              "inputTypeVIID": "tyyJO-xMV2o0PtVr2ON4CA",
                              "inputTypeVDID": "HFNEu3g566SnP9zG9uRULg",
                              "outputTypeVIID": "w46nFkDwQGGu0ASHsdx-Zg",
                              "outputTypeVDID": "Pn9jkiuUyFDMIvHds8fQ2A",
                              "operationVDID": "peFcT5fFbhruYfqIbwIRWA"
                            }
                          },
                          "ySiBEGcaRGWVOZmwBRyhrA": {
                            "filterDescriptor": {
                              "operationID": "ySiBEGcaRGWVOZmwBRyhrA",
                              "operationName": "Cell Process Proxy: Disconnect Proxy",
                              "operationDescription": "Disconnect a connected cell process proxy from whatever local cell process it is currently connected to.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Proxy: Disconnect Proxy Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "proxy": {
                                      "____types": "jsObject",
                                      "proxyCoordinates": {
                                        "____label": "Cell Process Proxy Helper Cell Coordinates Variant (Optional)",
                                        "____accept": "jsString",
                                        "____defaultValue": "#"
                                      },
                                      "disconnect": {
                                        "____accept": "jsObject"
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsObject"
                              },
                              "inputTypeVIID": "h6l9mMigEod2Xwz_hwJIFA",
                              "inputTypeVDID": "mvtDLQ-TDTlf0toBzsHihA",
                              "outputTypeVIID": "QAhxEJeD9pT1iEi640CbKg",
                              "outputTypeVDID": "Pn9jkiuUyFDMIvHds8fQ2A",
                              "operationVDID": "NWMST9RlkBq5NsWIFfL7WA"
                            }
                          },
                          "rua1glcmTsOlYcfpZuiXnA": {
                            "filterDescriptor": {
                              "operationID": "rua1glcmTsOlYcfpZuiXnA",
                              "operationName": "Cell Process Proxy: Proxy Action",
                              "operationDescription": "Forwards the specified action request to the local cell process to which the proxy is currently connected.",
                              "inputFilterSpec": {
                                "____label": "Cell Process Proxy: Proxy Action Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "CellProcessProxy": {
                                      "____types": "jsObject",
                                      "proxy": {
                                        "____types": "jsObject",
                                        "actionRequest": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____opaque": true
                              },
                              "inputTypeVIID": "wvVjeksTupOn_69OUmomJg",
                              "inputTypeVDID": "AuRHxuuY5bj6VFtZUarDPg",
                              "outputTypeVIID": "jZDkQbYcqjnTQHMZvYiTTw",
                              "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                              "operationVDID": "uda6E9cwtVdlmljtcghxtA"
                            }
                          },
                          "_yxWfFLnTqqN-UxRdd7W5w": {
                            "filterDescriptor": {
                              "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                              "operationName": "OCD Boolean Flag Clear",
                              "operationDescription": "Set the Boolean-type OCD namespace specified by path to value false.",
                              "inputFilterSpec": {
                                "____label": "OCD Boolean Flag Clear Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "actions": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "clearBooleanFlag": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsUndefined"
                              },
                              "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                              "inputTypeVDID": "9JJ6pBweTCwI2oO98eA5jA",
                              "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                              "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                              "operationVDID": "22s0kmR4PDHNH1MwaETpSA"
                            }
                          },
                          "5rFEDGLYRSiZCeChMnkCHQ": {
                            "filterDescriptor": {
                              "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                              "operationName": "OCD Boolean Flag Set",
                              "operationDescription": "Set the Boolean-type OCD namespace specified by path to value true.",
                              "inputFilterSpec": {
                                "____label": "OCD Boolean Flag Set Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "actions": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "setBooleanFlag": {
                                            "____types": "jsObject",
                                            "path": {
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____accept": "jsUndefined"
                              },
                              "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                              "inputTypeVDID": "0SvJjLbCiM4zgfkcsCtG9w",
                              "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                              "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                              "operationVDID": "bCv1ksN_4DF7HKQweU68SA"
                            }
                          },
                          "Ve_kEFkGSMSgOqUWu9Yo_w": {
                            "filterDescriptor": {
                              "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                              "operationName": "OCD Read Namespace Indirect",
                              "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                              "inputFilterSpec": {
                                "____label": "OCD Read Namespace Indirect Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "actions": {
                                        "____types": "jsObject",
                                        "ocd": {
                                          "____types": "jsObject",
                                          "readNamespaceIndirect": {
                                            "____types": "jsObject",
                                            "path2": {
                                              "____label": "Target Path Namespace Path",
                                              "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____opaque": true
                              },
                              "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                              "inputTypeVDID": "IOgWXFaAcQ5ZA6pPH8_2xg",
                              "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                              "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                              "operationVDID": "0IU7E_qFb1e52MDt_6IqtA"
                            }
                          },
                          "aXju3wSBQnufe0r51Y04wg": {
                            "filterDescriptor": {
                              "operationID": "aXju3wSBQnufe0r51Y04wg",
                              "operationName": "Write Sub-Action Response",
                              "operationDescription": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace.",
                              "inputFilterSpec": {
                                "____label": "Write Sub-Action Response Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "core": {
                                      "____types": "jsObject",
                                      "writeSubactionResponse": {
                                        "____types": "jsObject",
                                        "subactionRequest": {
                                          "____label": "Sub-Action Request",
                                          "____description": "Some caller-specified action request that we're to dispatch on their behalf so that we can save the response in shared memory.",
                                          "____accept": "jsObject"
                                        },
                                        "writeResponsePath": {
                                          "____label": "Write Response Path",
                                          "____description": "Absolute (begins in ~), cell-relative (begins in #), OCD path to write the subaction response. Note that relative paths are also supported here.",
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____label": "No Result (Default)",
                                "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                                "____accept": "jsUndefined"
                              },
                              "inputTypeVIID": "HiwULbPvbF4NiFgugv_ZSg",
                              "inputTypeVDID": "nUNjRm6k756h54bBy4S8Eg",
                              "outputTypeVIID": "YXPCMgl_OxPwupnLbcirow",
                              "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                              "operationVDID": "CHvoeVRpOtYpgVSkh0mYBw"
                            }
                          },
                          "KX0V_aQ3RzG01tzBS24MGw": {
                            "filterDescriptor": {
                              "operationID": "KX0V_aQ3RzG01tzBS24MGw",
                              "operationName": "OPC Intrinsic NOOP Action",
                              "operationDescription": "OPC-intrinsic performs no operation (noop). When invoked via OPC.act, the effect is to perform no read/write operations on OPC-instanced shared memory. And, then perform an evaluation.",
                              "inputFilterSpec": {
                                "____label": "OPC Intrinsic NOOP Action Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "opc": {
                                      "____types": "jsObject",
                                      "noop": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____opaque": true
                              },
                              "inputTypeVIID": "txJFSr26_WFausq9BG5NZg",
                              "inputTypeVDID": "BiObVoNbI4_uMMaTBVkFXQ",
                              "outputTypeVIID": "kuQ7tcKRU28cS2Qj0GX17A",
                              "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                              "operationVDID": "x0rQE0TkE1dfHMftLnWXtA"
                            }
                          },
                          "S1GqYjTtSQazSxkIL9vtpA": {
                            "filterDescriptor": {
                              "operationID": "S1GqYjTtSQazSxkIL9vtpA",
                              "operationName": "OPC Intrinsic Status Action",
                              "operationDescription": "OPC-intrinsic performs a retrieval of transitive OPC instance status.",
                              "inputFilterSpec": {
                                "____label": "OPC Intrinsic Status Action Request",
                                "____types": "jsObject",
                                "context": {
                                  "____label": "OPC Context Descriptor",
                                  "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                  "____types": "jsObject",
                                  "apmBindingPath": {
                                    "____label": "APM Binding Path",
                                    "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                    "____accept": "jsString"
                                  },
                                  "ocdi": {
                                    "____label": "OCD Store Instance",
                                    "____description": "A reference to the OCD store instance managed by OPC.",
                                    "____accept": "jsObject"
                                  },
                                  "act": {
                                    "____label": "OPC.act Method",
                                    "____description": "A reference to ObservableProcessController.act method.",
                                    "____accept": "jsFunction"
                                  }
                                },
                                "actionRequest": {
                                  "____types": "jsObject",
                                  "holarchy": {
                                    "____types": "jsObject",
                                    "opc": {
                                      "____types": "jsObject",
                                      "status": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "outputFilterSpec": {
                                "____opaque": true
                              },
                              "inputTypeVIID": "vncGN9bjl9Mmy3r-EUnmKg",
                              "inputTypeVDID": "es2e3G-BC0wtoR59QSPlgg",
                              "outputTypeVIID": "A0mnQJBJD4gdX6rrM6Txtw",
                              "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                              "operationVDID": "LolDE0qGUVe0PlPtvVfktA"
                            }
                          }
                        },
                        "opcActorStack": [],
                        "evalCount": 1,
                        "lastEvalResponse": {
                          "error": null,
                          "result": {
                            "evalNumber": 0,
                            "summary": {
                              "counts": {
                                "bindings": 3,
                                "frames": 3,
                                "errors": 0,
                                "transitions": 2
                              }
                            },
                            "evalFrames": [
                              {
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "transitions": 1,
                                    "errors": 0
                                  },
                                  "reports": {
                                    "transitions": [
                                      "YI9gj9oX2hdfEV8RmbuZuw"
                                    ],
                                    "errors": []
                                  }
                                },
                                "bindings": {
                                  "YI9gj9oX2hdfEV8RmbuZuw": {
                                    "evalRequest": {
                                      "dataBinding": {
                                        "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                        "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                      },
                                      "initialStep": "uninitialized",
                                      "apmRef": {
                                        "id": "htWG1ffm9-bcMtwyAawBrA",
                                        "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                        "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                        "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                      }
                                    },
                                    "evalResponse": {
                                      "status": "transitioned",
                                      "finishStep": "initializing",
                                      "phases": {
                                        "p1_toperator": [
                                          {
                                            "request": {
                                              "context": {
                                                "apmBindingPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                              },
                                              "operatorRequest": {
                                                "always": true
                                              }
                                            },
                                            "response": {
                                              "error": null,
                                              "result": true
                                            }
                                          }
                                        ],
                                        "p2_exit": [],
                                        "p3_enter": [
                                          {
                                            "request": {
                                              "holarchy": {
                                                "CellProcessor": {
                                                  "initialize": {}
                                                }
                                              }
                                            },
                                            "response": {
                                              "error": null,
                                              "result": {}
                                            }
                                          }
                                        ],
                                        "p4_finalize": {
                                          "error": null,
                                          "result": "initializing"
                                        }
                                      },
                                      "errors": {
                                        "p1_toperator": 0,
                                        "p2_exit": 0,
                                        "p3_enter": 0,
                                        "p4_finalize": 0,
                                        "total": 0
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "transitions": 1,
                                    "errors": 0
                                  },
                                  "reports": {
                                    "transitions": [
                                      "YI9gj9oX2hdfEV8RmbuZuw"
                                    ],
                                    "errors": []
                                  }
                                },
                                "bindings": {
                                  "YI9gj9oX2hdfEV8RmbuZuw": {
                                    "evalRequest": {
                                      "dataBinding": {
                                        "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                        "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                      },
                                      "initialStep": "initializing",
                                      "apmRef": {
                                        "id": "htWG1ffm9-bcMtwyAawBrA",
                                        "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                        "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                        "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                      }
                                    },
                                    "evalResponse": {
                                      "status": "transitioned",
                                      "finishStep": "ready",
                                      "phases": {
                                        "p1_toperator": [
                                          {
                                            "request": {
                                              "context": {
                                                "apmBindingPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                              },
                                              "operatorRequest": {
                                                "always": true
                                              }
                                            },
                                            "response": {
                                              "error": null,
                                              "result": true
                                            }
                                          }
                                        ],
                                        "p2_exit": [],
                                        "p3_enter": [],
                                        "p4_finalize": {
                                          "error": null,
                                          "result": "ready"
                                        }
                                      },
                                      "errors": {
                                        "p1_toperator": 0,
                                        "p2_exit": 0,
                                        "p3_enter": 0,
                                        "p4_finalize": 0,
                                        "total": 0
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "transitions": 0,
                                    "errors": 0
                                  },
                                  "reports": {
                                    "transitions": [],
                                    "errors": []
                                  }
                                },
                                "bindings": {
                                  "YI9gj9oX2hdfEV8RmbuZuw": {
                                    "evalRequest": {
                                      "dataBinding": {
                                        "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                        "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                      },
                                      "initialStep": "ready",
                                      "apmRef": {
                                        "id": "htWG1ffm9-bcMtwyAawBrA",
                                        "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                        "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                        "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                      }
                                    },
                                    "evalResponse": {
                                      "status": "noop",
                                      "finishStep": "ready",
                                      "phases": {
                                        "p1_toperator": [],
                                        "p2_exit": [],
                                        "p3_enter": [],
                                        "p4_finalize": null
                                      },
                                      "errors": {
                                        "p1_toperator": 0,
                                        "p2_exit": 0,
                                        "p3_enter": 0,
                                        "p4_finalize": 0,
                                        "total": 0
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "constructionWarnings": []
                      }
                    }
                  },
                  "testActionLog": [
                    {
                      "testHarnessActionOptions": {
                        "failTestIf": {
                          "CellProcessor": {
                            "actionError": "fail-if-action-error",
                            "evaluateError": "fail-if-opc-has-errors"
                          }
                        }
                      },
                      "testHarnessActionSummary": {
                        "testDisposition": "TEST PASS",
                        "actionRequest": "PASS",
                        "postActionCellProcessorEval": "PASS"
                      },
                      "testHarnessActionDispatch": {
                        "actRequest": {
                          "actorName": "CPM Child Processes All In Step Test",
                          "actorTaskDescription": "Start the first process instance. We will use this process as our test.",
                          "actionRequest": {
                            "CellProcessor": {
                              "process": {
                                "activate": {},
                                "processCoordinates": {
                                  "apmID": "vjz7U4NWRE2_UlAvAjmS6g",
                                  "instanceName": "Test Process"
                                }
                              }
                            }
                          }
                        },
                        "actResponse": {
                          "error": null,
                          "result": {
                            "actionResult": {
                              "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                              "cellProcessID": "gbKuONgb0hL_ih8qAfXJ_Q"
                            },
                            "lastEvaluation": {
                              "evalNumber": 1,
                              "summary": {
                                "counts": {
                                  "bindings": 4,
                                  "frames": 2,
                                  "errors": 0,
                                  "transitions": 1
                                }
                              },
                              "evalFrames": [
                                {
                                  "summary": {
                                    "counts": {
                                      "bindings": 2,
                                      "transitions": 1,
                                      "errors": 0
                                    },
                                    "reports": {
                                      "transitions": [
                                        "gbKuONgb0hL_ih8qAfXJ_Q"
                                      ],
                                      "errors": []
                                    }
                                  },
                                  "bindings": {
                                    "YI9gj9oX2hdfEV8RmbuZuw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "htWG1ffm9-bcMtwyAawBrA",
                                          "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                          "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                          "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "gbKuONgb0hL_ih8qAfXJ_Q": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "uninitialized",
                                        "apmRef": {
                                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                          "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                          "name": "CPM Child Processes All In Step Operator Test Process",
                                          "description": "A model to test the CPM child processes all in step operator."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "transitioned",
                                        "finishStep": "wait_for_child_processes_all_in_step_1",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ"
                                                },
                                                "operatorRequest": {
                                                  "always": true
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": true
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": {
                                            "error": null,
                                            "result": "wait_for_child_processes_all_in_step_1"
                                          }
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "summary": {
                                    "counts": {
                                      "bindings": 2,
                                      "transitions": 0,
                                      "errors": 0
                                    },
                                    "reports": {
                                      "transitions": [],
                                      "errors": []
                                    }
                                  },
                                  "bindings": {
                                    "YI9gj9oX2hdfEV8RmbuZuw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "htWG1ffm9-bcMtwyAawBrA",
                                          "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                          "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                          "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "gbKuONgb0hL_ih8qAfXJ_Q": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "wait_for_child_processes_all_in_step_1",
                                        "apmRef": {
                                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                          "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                          "name": "CPM Child Processes All In Step Operator Test Process",
                                          "description": "A model to test the CPM child processes all in step operator."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "wait_for_child_processes_all_in_step_1",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ"
                                                },
                                                "operatorRequest": {
                                                  "CellProcessor": {
                                                    "cell": {
                                                      "query": {
                                                        "childProcessesAllInStep": {
                                                          "apmStep": "ready"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": false
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "postActionToJSON": {
                        "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                          "cellProcessMap": {
                            "xILEgi3ALcCoB6gHzL3MvQ": {
                              "__apmiStep": "wait_for_child_processes_all_in_step_1"
                            }
                          },
                          "revision": 1
                        },
                        "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                          "ownedCellProcesses": {
                            "revision": 1,
                            "digraph": {
                              "name": "Owned Cell Processes Tree Model",
                              "description": "Tracks parent/child relationships between dynamically created cellular processes executing within a CellProcessor runtime host instance.",
                              "vlist": [
                                {
                                  "u": "U1NTU1paWlqwsLCwxMTExA",
                                  "p": {
                                    "apmBindingPath": "~",
                                    "name": "Cell Process Manager"
                                  }
                                },
                                {
                                  "u": "gbKuONgb0hL_ih8qAfXJ_Q",
                                  "p": {
                                    "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                    "role": "cell-process",
                                    "apmID": "vjz7U4NWRE2_UlAvAjmS6g"
                                  }
                                }
                              ],
                              "elist": [
                                {
                                  "e": {
                                    "u": "U1NTU1paWlqwsLCwxMTExA",
                                    "v": "gbKuONgb0hL_ih8qAfXJ_Q"
                                  }
                                }
                              ]
                            }
                          },
                          "sharedCellProcesses": {
                            "revision": 0,
                            "digraph": {
                              "name": "Shared Cell Processes Digraph Model",
                              "description": "Tracks reference-counted relationships between shared cell processes and embedded worker cell processes.",
                              "vlist": [],
                              "elist": []
                            }
                          },
                          "__apmiStep": "ready"
                        }
                      }
                    },
                    {
                      "testHarnessActionOptions": {
                        "failTestIf": {
                          "CellProcessor": {
                            "actionError": "fail-if-action-error",
                            "evaluateError": "fail-if-opc-has-errors"
                          }
                        }
                      },
                      "testHarnessActionSummary": {
                        "testDisposition": "TEST PASS",
                        "actionRequest": "PASS",
                        "postActionCellProcessorEval": "PASS"
                      },
                      "testHarnessActionDispatch": {
                        "actRequest": {
                          "actorName": "CPM Child Processes All In Step Test",
                          "actorTaskDescription": "Start the second process instance. We will use this process to trigger a process step change in the first test process instance.",
                          "actionRequest": {
                            "CellProcessor": {
                              "cell": {
                                "delegate": {
                                  "actionRequest": {
                                    "CellProcessor": {
                                      "process": {
                                        "activate": {},
                                        "processCoordinates": {
                                          "apmID": "3E27IH_CQeqBUFsGm4tIIA",
                                          "instanceName": "Child Process"
                                        }
                                      }
                                    }
                                  }
                                },
                                "cellCoordinates": {
                                  "apmID": "vjz7U4NWRE2_UlAvAjmS6g",
                                  "instanceName": "Test Process"
                                }
                              }
                            }
                          }
                        },
                        "actResponse": {
                          "error": null,
                          "result": {
                            "actionResult": {
                              "apmBindingPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w",
                              "cellProcessID": "viZxXd_JP4ujghfxAcO5yw"
                            },
                            "lastEvaluation": {
                              "evalNumber": 2,
                              "summary": {
                                "counts": {
                                  "bindings": 12,
                                  "frames": 4,
                                  "errors": 0,
                                  "transitions": 3
                                }
                              },
                              "evalFrames": [
                                {
                                  "summary": {
                                    "counts": {
                                      "bindings": 3,
                                      "transitions": 1,
                                      "errors": 0
                                    },
                                    "reports": {
                                      "transitions": [
                                        "viZxXd_JP4ujghfxAcO5yw"
                                      ],
                                      "errors": []
                                    }
                                  },
                                  "bindings": {
                                    "YI9gj9oX2hdfEV8RmbuZuw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "htWG1ffm9-bcMtwyAawBrA",
                                          "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                          "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                          "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "gbKuONgb0hL_ih8qAfXJ_Q": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "wait_for_child_processes_all_in_step_1",
                                        "apmRef": {
                                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                          "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                          "name": "CPM Child Processes All In Step Operator Test Process",
                                          "description": "A model to test the CPM child processes all in step operator."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "wait_for_child_processes_all_in_step_1",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ"
                                                },
                                                "operatorRequest": {
                                                  "CellProcessor": {
                                                    "cell": {
                                                      "query": {
                                                        "childProcessesAllInStep": {
                                                          "apmStep": "ready"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": false
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "viZxXd_JP4ujghfxAcO5yw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w",
                                          "specPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "uninitialized",
                                        "apmRef": {
                                          "id": "3E27IH_CQeqBUFsGm4tIIA",
                                          "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                                          "name": "Dummy Process A Process",
                                          "description": "Implements a trivial cell process that does nothing."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "transitioned",
                                        "finishStep": "initialize",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w"
                                                },
                                                "operatorRequest": {
                                                  "always": true
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": true
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": {
                                            "error": null,
                                            "result": "initialize"
                                          }
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "summary": {
                                    "counts": {
                                      "bindings": 3,
                                      "transitions": 1,
                                      "errors": 0
                                    },
                                    "reports": {
                                      "transitions": [
                                        "viZxXd_JP4ujghfxAcO5yw"
                                      ],
                                      "errors": []
                                    }
                                  },
                                  "bindings": {
                                    "YI9gj9oX2hdfEV8RmbuZuw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "htWG1ffm9-bcMtwyAawBrA",
                                          "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                          "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                          "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "gbKuONgb0hL_ih8qAfXJ_Q": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "wait_for_child_processes_all_in_step_1",
                                        "apmRef": {
                                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                          "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                          "name": "CPM Child Processes All In Step Operator Test Process",
                                          "description": "A model to test the CPM child processes all in step operator."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "wait_for_child_processes_all_in_step_1",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ"
                                                },
                                                "operatorRequest": {
                                                  "CellProcessor": {
                                                    "cell": {
                                                      "query": {
                                                        "childProcessesAllInStep": {
                                                          "apmStep": "ready"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": false
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "viZxXd_JP4ujghfxAcO5yw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w",
                                          "specPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "initialize",
                                        "apmRef": {
                                          "id": "3E27IH_CQeqBUFsGm4tIIA",
                                          "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                                          "name": "Dummy Process A Process",
                                          "description": "Implements a trivial cell process that does nothing."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "transitioned",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w"
                                                },
                                                "operatorRequest": {
                                                  "always": true
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": true
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": {
                                            "error": null,
                                            "result": "ready"
                                          }
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "summary": {
                                    "counts": {
                                      "bindings": 3,
                                      "transitions": 1,
                                      "errors": 0
                                    },
                                    "reports": {
                                      "transitions": [
                                        "gbKuONgb0hL_ih8qAfXJ_Q"
                                      ],
                                      "errors": []
                                    }
                                  },
                                  "bindings": {
                                    "YI9gj9oX2hdfEV8RmbuZuw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "htWG1ffm9-bcMtwyAawBrA",
                                          "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                          "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                          "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "gbKuONgb0hL_ih8qAfXJ_Q": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "wait_for_child_processes_all_in_step_1",
                                        "apmRef": {
                                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                          "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                          "name": "CPM Child Processes All In Step Operator Test Process",
                                          "description": "A model to test the CPM child processes all in step operator."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "transitioned",
                                        "finishStep": "test_pass_1",
                                        "phases": {
                                          "p1_toperator": [
                                            {
                                              "request": {
                                                "context": {
                                                  "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ"
                                                },
                                                "operatorRequest": {
                                                  "CellProcessor": {
                                                    "cell": {
                                                      "query": {
                                                        "childProcessesAllInStep": {
                                                          "apmStep": "ready"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "response": {
                                                "error": null,
                                                "result": true
                                              }
                                            }
                                          ],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": {
                                            "error": null,
                                            "result": "test_pass_1"
                                          }
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "viZxXd_JP4ujghfxAcO5yw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w",
                                          "specPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "3E27IH_CQeqBUFsGm4tIIA",
                                          "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                                          "name": "Dummy Process A Process",
                                          "description": "Implements a trivial cell process that does nothing."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "summary": {
                                    "counts": {
                                      "bindings": 3,
                                      "transitions": 0,
                                      "errors": 0
                                    },
                                    "reports": {
                                      "transitions": [],
                                      "errors": []
                                    }
                                  },
                                  "bindings": {
                                    "YI9gj9oX2hdfEV8RmbuZuw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "htWG1ffm9-bcMtwyAawBrA",
                                          "vdid": "3K2OZRaXeXnVdwDcvavU5g",
                                          "name": "CPM Child Processes All In Step Operator Test Runtime Host Cell Process Manager",
                                          "description": "Cell process manager root process for CellProcessor CPM Child Processes All In Step Operator Test Runtime Host."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "gbKuONgb0hL_ih8qAfXJ_Q": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "test_pass_1",
                                        "apmRef": {
                                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                          "vdid": "BuvvLPbWmBnH_gSXK83PjQ",
                                          "name": "CPM Child Processes All In Step Operator Test Process",
                                          "description": "A model to test the CPM child processes all in step operator."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "test_pass_1",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    },
                                    "viZxXd_JP4ujghfxAcO5yw": {
                                      "evalRequest": {
                                        "dataBinding": {
                                          "dataPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w",
                                          "specPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.cellProcessID"
                                        },
                                        "initialStep": "ready",
                                        "apmRef": {
                                          "id": "3E27IH_CQeqBUFsGm4tIIA",
                                          "vdid": "9OnXus4mvB4GxhPoXMwTlw",
                                          "name": "Dummy Process A Process",
                                          "description": "Implements a trivial cell process that does nothing."
                                        }
                                      },
                                      "evalResponse": {
                                        "status": "noop",
                                        "finishStep": "ready",
                                        "phases": {
                                          "p1_toperator": [],
                                          "p2_exit": [],
                                          "p3_enter": [],
                                          "p4_finalize": null
                                        },
                                        "errors": {
                                          "p1_toperator": 0,
                                          "p2_exit": 0,
                                          "p3_enter": 0,
                                          "p4_finalize": 0,
                                          "total": 0
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "postActionToJSON": {
                        "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                          "cellProcessMap": {
                            "xILEgi3ALcCoB6gHzL3MvQ": {
                              "__apmiStep": "test_pass_1"
                            }
                          },
                          "revision": 1
                        },
                        "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                          "cellProcessMap": {
                            "aQsQp_v0Jw3HgE76DYzb8w": {
                              "__apmiStep": "ready"
                            }
                          },
                          "revision": 1
                        },
                        "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                          "ownedCellProcesses": {
                            "revision": 2,
                            "digraph": {
                              "name": "Owned Cell Processes Tree Model",
                              "description": "Tracks parent/child relationships between dynamically created cellular processes executing within a CellProcessor runtime host instance.",
                              "vlist": [
                                {
                                  "u": "U1NTU1paWlqwsLCwxMTExA",
                                  "p": {
                                    "apmBindingPath": "~",
                                    "name": "Cell Process Manager"
                                  }
                                },
                                {
                                  "u": "gbKuONgb0hL_ih8qAfXJ_Q",
                                  "p": {
                                    "apmBindingPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.xILEgi3ALcCoB6gHzL3MvQ",
                                    "role": "cell-process",
                                    "apmID": "vjz7U4NWRE2_UlAvAjmS6g"
                                  }
                                },
                                {
                                  "u": "viZxXd_JP4ujghfxAcO5yw",
                                  "p": {
                                    "apmBindingPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.aQsQp_v0Jw3HgE76DYzb8w",
                                    "role": "cell-process",
                                    "apmID": "3E27IH_CQeqBUFsGm4tIIA"
                                  }
                                }
                              ],
                              "elist": [
                                {
                                  "e": {
                                    "u": "U1NTU1paWlqwsLCwxMTExA",
                                    "v": "gbKuONgb0hL_ih8qAfXJ_Q"
                                  }
                                },
                                {
                                  "e": {
                                    "u": "gbKuONgb0hL_ih8qAfXJ_Q",
                                    "v": "viZxXd_JP4ujghfxAcO5yw"
                                  }
                                }
                              ]
                            }
                          },
                          "sharedCellProcesses": {
                            "revision": 0,
                            "digraph": {
                              "name": "Shared Cell Processes Digraph Model",
                              "description": "Tracks reference-counted relationships between shared cell processes and embedded worker cell processes.",
                              "vlist": [],
                              "elist": []
                            }
                          },
                          "__apmiStep": "ready"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}
