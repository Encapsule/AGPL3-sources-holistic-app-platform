{
  "dosRgxmiR66ongCbJB78ow": {
    "c65zrhI3Ejco_Sj9nPKc8g": {
      "D9E7--YgRqWfqoQFz7Ckfg": {
        "harnessRequest": {
          "id": "D9E7--YgRqWfqoQFz7Ckfg",
          "name": "d2r2/React Client Display Adaptor CellModel Test",
          "description": "Send the current version of the d2r2/React Client Display Adapter CellModel through the CellModel test harness.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "CellModel": {
                  "constructorRequest": {
                    "id": "UX7JquBhSZO0QyEk7u9-sw",
                    "vdid": "MoKsc2DQbhR_uAO3f6GizQ",
                    "name": "Holistic App Client Display Adapter",
                    "description": "Manages the DOM display via @encapsule/d2r2 and React.",
                    "cmat": {
                      "error": null,
                      "result": {
                        "INDEX_CM": {
                          "type": "INDEX",
                          "UX7JquBhSZO0QyEk7u9-sw": {
                            "id": "UX7JquBhSZO0QyEk7u9-sw",
                            "vdid": "MoKsc2DQbhR_uAO3f6GizQ",
                            "name": "Holistic App Client Display Adapter",
                            "description": "Manages the DOM display via @encapsule/d2r2 and React.",
                            "type": "CM",
                            "IxoJ83u0TXmG7PLUYBvsyg": {
                              "id": "IxoJ83u0TXmG7PLUYBvsyg",
                              "vdid": "guj8_A0Z2pydtetwzFwaqA",
                              "name": "d2r2/React Client Display Adaptor",
                              "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                              "type": "APM"
                            },
                            "ENIOOasYSdmJj_RXjA__hQ": {
                              "id": "ENIOOasYSdmJj_RXjA__hQ",
                              "vdid": "CJYfMSZautkxLcK565ZDTg",
                              "name": "d2r2/React Client Display Adaptor: Rydrate/Render",
                              "description": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD.",
                              "type": "ACT"
                            },
                            "RyMcv3MpTI-Co1EyVOIvlw": {
                              "id": "RyMcv3MpTI-Co1EyVOIvlw",
                              "vdid": "h6bzRdaALlRjOYuwM3XfNA",
                              "name": "Holarchy CML",
                              "description": "Holarchy Cell Model Library (CML) provides cellular process primitive operations, actions, and cell models for re-use in higher-order cell models.",
                              "type": "CM",
                              "c2cq2OE9SiaLKahL3Mk0KA": {
                                "id": "c2cq2OE9SiaLKahL3Mk0KA",
                                "vdid": "Ubv9rWk0sPeegQvp5g5KKg",
                                "name": "Holarchy Base Cell Model",
                                "description": "A collection of low-level building blocks.",
                                "type": "CM",
                                "U5iIpgd8SHCk7pvaciVLTQ": {
                                  "id": "U5iIpgd8SHCk7pvaciVLTQ",
                                  "vdid": "Re1j_QO1tUGwzHAfwBwFnA",
                                  "name": "Holarchy Base Memory Mailbox Flag",
                                  "description": "A primitive cell process that signals (via process step transition) when some actor has put a message in the mailbox namespace.",
                                  "type": "CM",
                                  "z_mTe02hSWmaM1iRO1pBeA": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "type": "APM"
                                  },
                                  "iyvk_9vhRn2qvrjOes5v7Q": {
                                    "id": "iyvk_9vhRn2qvrjOes5v7Q",
                                    "vdid": "Mm1h1iJOaeH77h6HYA9wxg",
                                    "name": "Frame Latch: Write",
                                    "description": "Writes the value made observable by frame latch APM instance.",
                                    "type": "ACT"
                                  },
                                  "MDVBKW89TvO9T62Ge7GmNg": {
                                    "id": "MDVBKW89TvO9T62Ge7GmNg",
                                    "vdid": "i7SdqJ-HAhU9KxBPXqns4A",
                                    "name": "Holarchy Core",
                                    "description": "Holarchy core operations and actions for building derived CellModels.",
                                    "type": "CM",
                                    "orTbEFR_Q-u-qqEqP8OUBA": {
                                      "id": "orTbEFR_Q-u-qqEqP8OUBA",
                                      "vdid": "Vmec8PHtmLyfNYvz7w9X5Q",
                                      "name": "Holarchy Core Cell",
                                      "description": "Shared low-level TransitionOperator and ControllerAction's for interacting with cell processes running inside of an ObservableProcessController instance.",
                                      "type": "CM",
                                      "9tNY7o5GTUGH_xda2GhP-w": {
                                        "id": "9tNY7o5GTUGH_xda2GhP-w",
                                        "vdid": "zmPeG6lSvXidCjr_XyENrQ",
                                        "name": "Cell Process In Step Operator",
                                        "description": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                                        "type": "TOP"
                                      }
                                    },
                                    "RW8Y2O-kRNSv87yXT962wQ": {
                                      "id": "RW8Y2O-kRNSv87yXT962wQ",
                                      "vdid": "UXq8KRbzlBlMNZKG9T1l7Q",
                                      "name": "Holarchy Core Logic",
                                      "description": "A collection of TranitionOperator plug-ins that implement generic logic functions AND, OR, NOT, TRUE.",
                                      "type": "CM",
                                      "YgABX95wR86GCYrYaDLISA": {
                                        "id": "YgABX95wR86GCYrYaDLISA",
                                        "vdid": "5Wiq9QRF5UgklCeaWl6BWQ",
                                        "name": "AND Transition Expression Operator",
                                        "description": "Returns Boolean true iff all suboperations return true.",
                                        "type": "TOP"
                                      },
                                      "0JIva4IFSm6Xm7i38g8uUA": {
                                        "id": "0JIva4IFSm6Xm7i38g8uUA",
                                        "vdid": "HyCocPERRAAEOSzTOspyaw",
                                        "name": "OR Transition Expression Operator",
                                        "description": "Returns Boolean true iff any suboperations return true.",
                                        "type": "TOP"
                                      },
                                      "TLSHkl73SO-utuzM7dyN2g": {
                                        "id": "TLSHkl73SO-utuzM7dyN2g",
                                        "vdid": "MLN5p6fYf0FFTMRIix5okQ",
                                        "name": "NOT Transition Expression Operator",
                                        "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                        "type": "TOP"
                                      },
                                      "e89cwnP4Qd6MocAhzdOJgw": {
                                        "id": "e89cwnP4Qd6MocAhzdOJgw",
                                        "vdid": "bVHQ0XWofHA__BaTvwID4g",
                                        "name": "Always returns Boolean true unconditionally.",
                                        "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                                        "type": "TOP"
                                      }
                                    },
                                    "jQxlhOe-RDilxY0sNIierQ": {
                                      "id": "jQxlhOe-RDilxY0sNIierQ",
                                      "vdid": "DBtb1VQvd9xXX2QbPHHsow",
                                      "name": "Holarchy Core Memory Operators",
                                      "description": "A collection of TransitionOperator plug-ins that perform logical comparisons operatations on cell processs memory.",
                                      "type": "CM",
                                      "oaF3-dXwQkusjD3I2o9-8g": {
                                        "id": "oaF3-dXwQkusjD3I2o9-8g",
                                        "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                                        "name": "OCD Array Length Equal to Value",
                                        "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                                        "type": "TOP"
                                      },
                                      "2w7n6KxdR8mdIliePJesLQ": {
                                        "id": "2w7n6KxdR8mdIliePJesLQ",
                                        "vdid": "tljozSCr53fX-AmzURPyEg",
                                        "name": "OCD Compare Values",
                                        "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                                        "type": "TOP"
                                      },
                                      "UeLs9PcASwuC7KR190eYhA": {
                                        "id": "UeLs9PcASwuC7KR190eYhA",
                                        "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                                        "name": "OCD Boolean Flag Is Set",
                                        "description": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                        "type": "TOP"
                                      },
                                      "ggsavKiARsq7rjwn-lxdfA": {
                                        "id": "ggsavKiARsq7rjwn-lxdfA",
                                        "vdid": "zo88N4oEjk34PxGoXmyTUA",
                                        "name": "OCD Namespace Is Greater Than Value",
                                        "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                                        "type": "TOP"
                                      },
                                      "k7THIKKDQMKOac1Rxh9tEQ": {
                                        "id": "k7THIKKDQMKOac1Rxh9tEQ",
                                        "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                                        "name": "OCD Namespace Is Identical To Value",
                                        "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                                        "type": "TOP"
                                      },
                                      "XxX_a1sQS1OlJbWAYfx6tQ": {
                                        "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                                        "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                                        "name": "OCD Namespace Is Less Than Value",
                                        "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                                        "type": "TOP"
                                      },
                                      "kD1PcgqYQlm7fJatNG2ZsA": {
                                        "id": "kD1PcgqYQlm7fJatNG2ZsA",
                                        "vdid": "cNihhVrtDPl_5j7cSfcRug",
                                        "name": "OCD Namespace Is Truthy",
                                        "description": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                        "type": "TOP"
                                      },
                                      "Ve_kEFkGSMSgOqUWu9Yo_w": {
                                        "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                        "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                                        "name": "OCD Read Namespace Indirect",
                                        "description": "Reads and returns the value of OCD namespace via path indirection.",
                                        "type": "ACT"
                                      },
                                      "5rFEDGLYRSiZCeChMnkCHQ": {
                                        "id": "5rFEDGLYRSiZCeChMnkCHQ",
                                        "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                                        "name": "OCD Boolean Flag Set",
                                        "description": "Set the Boolean-type OCD namespace specified by path to value true.",
                                        "type": "ACT"
                                      },
                                      "_yxWfFLnTqqN-UxRdd7W5w": {
                                        "id": "_yxWfFLnTqqN-UxRdd7W5w",
                                        "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                                        "name": "OCD Boolean Flag Clear",
                                        "description": "Set the Boolean-type OCD namespace specified by path to value false.",
                                        "type": "ACT"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "FAvFLw0XQN6yomNs13r21g": {
                "D9E7--YgRqWfqoQFz7Ckfg": {
                  "isValid": true,
                  "summary": {
                    "counts": {
                      "vertices": 31,
                      "edges": 53,
                      "artifacts": {
                        "cm": 8,
                        "apm": 2,
                        "top": 12,
                        "act": 5
                      }
                    }
                  },
                  "opcConfig": {
                    "error": null,
                    "result": {
                      "apm": [
                        {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                          "name": "Abstract Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                          "process": {
                            "name": "[z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] APM Digraph",
                            "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                            "vlist": [
                              {
                                "u": "uninitialized",
                                "p": {
                                  "description": "Default starting process step.",
                                  "actions": {
                                    "enter": [],
                                    "exit": [
                                      {
                                        "holarchy": {
                                          "cm": {
                                            "actions": {
                                              "ocd": {
                                                "setBooleanFlag": {
                                                  "path": "#.clock"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "u": "updated",
                                "p": {
                                  "description": "The value managed by the frame latch has been written.",
                                  "actions": {
                                    "enter": [],
                                    "exit": [
                                      {
                                        "holarchy": {
                                          "cm": {
                                            "actions": {
                                              "ocd": {
                                                "clearBooleanFlag": {
                                                  "path": "#.clock"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "u": "waiting",
                                "p": {
                                  "description": "Frame latch value has not changed since last signalled update.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              }
                            ],
                            "elist": [
                              {
                                "e": {
                                  "u": "uninitialized",
                                  "v": "updated"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "updated",
                                  "v": "waiting"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "waiting",
                                  "v": "updated"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "cm": {
                                        "operators": {
                                          "ocd": {
                                            "isBooleanFlagSet": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        },
                        {
                          "id": "IxoJ83u0TXmG7PLUYBvsyg",
                          "vdid": "guj8_A0Z2pydtetwzFwaqA",
                          "name": "d2r2/React Client Display Adaptor",
                          "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                          "process": {
                            "name": "[IxoJ83u0TXmG7PLUYBvsyg::d2r2/React Client Display Adaptor] APM Digraph",
                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                            "vlist": [
                              {
                                "u": "uninitialized",
                                "p": {
                                  "description": "Default APM process step.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "initialize",
                                "p": {
                                  "description": "Initialize",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "wait_invariants",
                                "p": {
                                  "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "wait_inputs",
                                "p": {
                                  "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "initialized",
                                "p": {
                                  "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "rehydrate",
                                "p": {
                                  "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                                  "actions": {
                                    "enter": [
                                      {
                                        "holarchy": {
                                          "cm": {
                                            "actions": {
                                              "ocd": {
                                                "setBooleanFlag": {
                                                  "path": "#.private.renderPending"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holistic": {
                                          "app": {
                                            "client": {
                                              "cm": {
                                                "actions": {
                                                  "d2r2ReactClientDisplayAdaptor": {
                                                    "operation": "hydrate"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "render",
                                "p": {
                                  "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                                  "actions": {
                                    "enter": [
                                      {
                                        "holarchy": {
                                          "cm": {
                                            "actions": {
                                              "ocd": {
                                                "setBooleanFlag": {
                                                  "path": "#.private.renderPending"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holistic": {
                                          "app": {
                                            "client": {
                                              "cm": {
                                                "actions": {
                                                  "d2r2ReactClientDisplayAdaptor": {
                                                    "operation": "render"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "rendering",
                                "p": {
                                  "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              },
                              {
                                "u": "ready",
                                "p": {
                                  "description": "Waiting for next clock signal to re-render client application view.",
                                  "actions": {
                                    "enter": [],
                                    "exit": []
                                  }
                                }
                              }
                            ],
                            "elist": [
                              {
                                "e": {
                                  "u": "uninitialized",
                                  "v": "initialize"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "cm": {
                                        "operators": {
                                          "cell": {
                                            "atStep": {
                                              "path": "#.//.//.//.//",
                                              "step": "boot1_start_kernel"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "initialize",
                                  "v": "wait_invariants"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "wait_invariants",
                                  "v": "wait_inputs"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "and": [
                                      {
                                        "holarchy": {
                                          "cm": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.ComponentRouter"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holarchy": {
                                          "cm": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.DOMElement"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "wait_inputs",
                                  "v": "initialized"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "cm": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.inputs.clock.value"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "initialized",
                                  "v": "rehydrate"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "cm": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.inputs.clock.value.options.rehydrate"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "initialized",
                                  "v": "render"
                                },
                                "p": {
                                  "priority": 1,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "rehydrate",
                                  "v": "rendering"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "render",
                                  "v": "rendering"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "always": true
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "rendering",
                                  "v": "ready"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "not": {
                                      "holarchy": {
                                        "cm": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.private.renderPending"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "e": {
                                  "u": "ready",
                                  "v": "render"
                                },
                                "p": {
                                  "priority": 0,
                                  "operator": {
                                    "holarchy": {
                                      "cm": {
                                        "operators": {
                                          "opmi": {
                                            "atStep": {
                                              "path": "#.inputs.clock",
                                              "step": "updated"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "top": [
                        {
                          "id": "YgABX95wR86GCYrYaDLISA",
                          "vdid": "5Wiq9QRF5UgklCeaWl6BWQ",
                          "name": "AND Transition Expression Operator",
                          "description": "Returns Boolean true iff all suboperations return true."
                        },
                        {
                          "id": "e89cwnP4Qd6MocAhzdOJgw",
                          "vdid": "bVHQ0XWofHA__BaTvwID4g",
                          "name": "Always returns Boolean true unconditionally.",
                          "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules)."
                        },
                        {
                          "id": "9tNY7o5GTUGH_xda2GhP-w",
                          "vdid": "zmPeG6lSvXidCjr_XyENrQ",
                          "name": "Cell Process In Step Operator",
                          "description": "Returns Boolean true iff the indicated APM instance is in the indicated process step."
                        },
                        {
                          "id": "TLSHkl73SO-utuzM7dyN2g",
                          "vdid": "MLN5p6fYf0FFTMRIix5okQ",
                          "name": "NOT Transition Expression Operator",
                          "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to)."
                        },
                        {
                          "id": "oaF3-dXwQkusjD3I2o9-8g",
                          "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                          "name": "OCD Array Length Equal to Value",
                          "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect)."
                        },
                        {
                          "id": "UeLs9PcASwuC7KR190eYhA",
                          "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                          "name": "OCD Boolean Flag Is Set",
                          "description": "Returns Boolean true iff the indicated Boolean flag namespace is true."
                        },
                        {
                          "id": "2w7n6KxdR8mdIliePJesLQ",
                          "vdid": "tljozSCr53fX-AmzURPyEg",
                          "name": "OCD Compare Values",
                          "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator."
                        },
                        {
                          "id": "ggsavKiARsq7rjwn-lxdfA",
                          "vdid": "zo88N4oEjk34PxGoXmyTUA",
                          "name": "OCD Namespace Is Greater Than Value",
                          "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only."
                        },
                        {
                          "id": "k7THIKKDQMKOac1Rxh9tEQ",
                          "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                          "name": "OCD Namespace Is Identical To Value",
                          "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only."
                        },
                        {
                          "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                          "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                          "name": "OCD Namespace Is Less Than Value",
                          "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only."
                        },
                        {
                          "id": "kD1PcgqYQlm7fJatNG2ZsA",
                          "vdid": "cNihhVrtDPl_5j7cSfcRug",
                          "name": "OCD Namespace Is Truthy",
                          "description": "Returns Boolean true iff the indicated OCD namespace is truthy."
                        },
                        {
                          "id": "0JIva4IFSm6Xm7i38g8uUA",
                          "vdid": "HyCocPERRAAEOSzTOspyaw",
                          "name": "OR Transition Expression Operator",
                          "description": "Returns Boolean true iff any suboperations return true."
                        }
                      ],
                      "act": [
                        {
                          "id": "iyvk_9vhRn2qvrjOes5v7Q",
                          "vdid": "Mm1h1iJOaeH77h6HYA9wxg",
                          "name": "Frame Latch: Write",
                          "description": "Writes the value made observable by frame latch APM instance."
                        },
                        {
                          "id": "_yxWfFLnTqqN-UxRdd7W5w",
                          "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                          "name": "OCD Boolean Flag Clear",
                          "description": "Set the Boolean-type OCD namespace specified by path to value false."
                        },
                        {
                          "id": "5rFEDGLYRSiZCeChMnkCHQ",
                          "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                          "name": "OCD Boolean Flag Set",
                          "description": "Set the Boolean-type OCD namespace specified by path to value true."
                        },
                        {
                          "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                          "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                          "name": "OCD Read Namespace Indirect",
                          "description": "Reads and returns the value of OCD namespace via path indirection."
                        },
                        {
                          "id": "ENIOOasYSdmJj_RXjA__hQ",
                          "vdid": "CJYfMSZautkxLcK565ZDTg",
                          "name": "d2r2/React Client Display Adaptor: Rydrate/Render",
                          "description": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD."
                        }
                      ]
                    }
                  },
                  "cmat": {
                    "error": null,
                    "result": {
                      "INDEX_CM": {
                        "type": "INDEX",
                        "UX7JquBhSZO0QyEk7u9-sw": {
                          "id": "UX7JquBhSZO0QyEk7u9-sw",
                          "vdid": "MoKsc2DQbhR_uAO3f6GizQ",
                          "name": "Holistic App Client Display Adapter",
                          "description": "Manages the DOM display via @encapsule/d2r2 and React.",
                          "type": "CM",
                          "IxoJ83u0TXmG7PLUYBvsyg": {
                            "id": "IxoJ83u0TXmG7PLUYBvsyg",
                            "vdid": "guj8_A0Z2pydtetwzFwaqA",
                            "name": "d2r2/React Client Display Adaptor",
                            "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                            "type": "APM"
                          },
                          "ENIOOasYSdmJj_RXjA__hQ": {
                            "id": "ENIOOasYSdmJj_RXjA__hQ",
                            "vdid": "CJYfMSZautkxLcK565ZDTg",
                            "name": "d2r2/React Client Display Adaptor: Rydrate/Render",
                            "description": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD.",
                            "type": "ACT"
                          },
                          "RyMcv3MpTI-Co1EyVOIvlw": {
                            "id": "RyMcv3MpTI-Co1EyVOIvlw",
                            "vdid": "h6bzRdaALlRjOYuwM3XfNA",
                            "name": "Holarchy CML",
                            "description": "Holarchy Cell Model Library (CML) provides cellular process primitive operations, actions, and cell models for re-use in higher-order cell models.",
                            "type": "CM",
                            "c2cq2OE9SiaLKahL3Mk0KA": {
                              "id": "c2cq2OE9SiaLKahL3Mk0KA",
                              "vdid": "Ubv9rWk0sPeegQvp5g5KKg",
                              "name": "Holarchy Base Cell Model",
                              "description": "A collection of low-level building blocks.",
                              "type": "CM",
                              "U5iIpgd8SHCk7pvaciVLTQ": {
                                "id": "U5iIpgd8SHCk7pvaciVLTQ",
                                "vdid": "Re1j_QO1tUGwzHAfwBwFnA",
                                "name": "Holarchy Base Memory Mailbox Flag",
                                "description": "A primitive cell process that signals (via process step transition) when some actor has put a message in the mailbox namespace.",
                                "type": "CM",
                                "z_mTe02hSWmaM1iRO1pBeA": {
                                  "id": "z_mTe02hSWmaM1iRO1pBeA",
                                  "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                  "name": "Abstract Frame Latch",
                                  "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                  "type": "APM"
                                },
                                "iyvk_9vhRn2qvrjOes5v7Q": {
                                  "id": "iyvk_9vhRn2qvrjOes5v7Q",
                                  "vdid": "Mm1h1iJOaeH77h6HYA9wxg",
                                  "name": "Frame Latch: Write",
                                  "description": "Writes the value made observable by frame latch APM instance.",
                                  "type": "ACT"
                                },
                                "MDVBKW89TvO9T62Ge7GmNg": {
                                  "id": "MDVBKW89TvO9T62Ge7GmNg",
                                  "vdid": "i7SdqJ-HAhU9KxBPXqns4A",
                                  "name": "Holarchy Core",
                                  "description": "Holarchy core operations and actions for building derived CellModels.",
                                  "type": "CM",
                                  "orTbEFR_Q-u-qqEqP8OUBA": {
                                    "id": "orTbEFR_Q-u-qqEqP8OUBA",
                                    "vdid": "Vmec8PHtmLyfNYvz7w9X5Q",
                                    "name": "Holarchy Core Cell",
                                    "description": "Shared low-level TransitionOperator and ControllerAction's for interacting with cell processes running inside of an ObservableProcessController instance.",
                                    "type": "CM",
                                    "9tNY7o5GTUGH_xda2GhP-w": {
                                      "id": "9tNY7o5GTUGH_xda2GhP-w",
                                      "vdid": "zmPeG6lSvXidCjr_XyENrQ",
                                      "name": "Cell Process In Step Operator",
                                      "description": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                                      "type": "TOP"
                                    }
                                  },
                                  "RW8Y2O-kRNSv87yXT962wQ": {
                                    "id": "RW8Y2O-kRNSv87yXT962wQ",
                                    "vdid": "UXq8KRbzlBlMNZKG9T1l7Q",
                                    "name": "Holarchy Core Logic",
                                    "description": "A collection of TranitionOperator plug-ins that implement generic logic functions AND, OR, NOT, TRUE.",
                                    "type": "CM",
                                    "YgABX95wR86GCYrYaDLISA": {
                                      "id": "YgABX95wR86GCYrYaDLISA",
                                      "vdid": "5Wiq9QRF5UgklCeaWl6BWQ",
                                      "name": "AND Transition Expression Operator",
                                      "description": "Returns Boolean true iff all suboperations return true.",
                                      "type": "TOP"
                                    },
                                    "0JIva4IFSm6Xm7i38g8uUA": {
                                      "id": "0JIva4IFSm6Xm7i38g8uUA",
                                      "vdid": "HyCocPERRAAEOSzTOspyaw",
                                      "name": "OR Transition Expression Operator",
                                      "description": "Returns Boolean true iff any suboperations return true.",
                                      "type": "TOP"
                                    },
                                    "TLSHkl73SO-utuzM7dyN2g": {
                                      "id": "TLSHkl73SO-utuzM7dyN2g",
                                      "vdid": "MLN5p6fYf0FFTMRIix5okQ",
                                      "name": "NOT Transition Expression Operator",
                                      "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                      "type": "TOP"
                                    },
                                    "e89cwnP4Qd6MocAhzdOJgw": {
                                      "id": "e89cwnP4Qd6MocAhzdOJgw",
                                      "vdid": "bVHQ0XWofHA__BaTvwID4g",
                                      "name": "Always returns Boolean true unconditionally.",
                                      "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                                      "type": "TOP"
                                    }
                                  },
                                  "jQxlhOe-RDilxY0sNIierQ": {
                                    "id": "jQxlhOe-RDilxY0sNIierQ",
                                    "vdid": "DBtb1VQvd9xXX2QbPHHsow",
                                    "name": "Holarchy Core Memory Operators",
                                    "description": "A collection of TransitionOperator plug-ins that perform logical comparisons operatations on cell processs memory.",
                                    "type": "CM",
                                    "oaF3-dXwQkusjD3I2o9-8g": {
                                      "id": "oaF3-dXwQkusjD3I2o9-8g",
                                      "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                                      "name": "OCD Array Length Equal to Value",
                                      "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                                      "type": "TOP"
                                    },
                                    "2w7n6KxdR8mdIliePJesLQ": {
                                      "id": "2w7n6KxdR8mdIliePJesLQ",
                                      "vdid": "tljozSCr53fX-AmzURPyEg",
                                      "name": "OCD Compare Values",
                                      "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                                      "type": "TOP"
                                    },
                                    "UeLs9PcASwuC7KR190eYhA": {
                                      "id": "UeLs9PcASwuC7KR190eYhA",
                                      "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                                      "name": "OCD Boolean Flag Is Set",
                                      "description": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                      "type": "TOP"
                                    },
                                    "ggsavKiARsq7rjwn-lxdfA": {
                                      "id": "ggsavKiARsq7rjwn-lxdfA",
                                      "vdid": "zo88N4oEjk34PxGoXmyTUA",
                                      "name": "OCD Namespace Is Greater Than Value",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                                      "type": "TOP"
                                    },
                                    "k7THIKKDQMKOac1Rxh9tEQ": {
                                      "id": "k7THIKKDQMKOac1Rxh9tEQ",
                                      "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                                      "name": "OCD Namespace Is Identical To Value",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                                      "type": "TOP"
                                    },
                                    "XxX_a1sQS1OlJbWAYfx6tQ": {
                                      "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                                      "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                                      "name": "OCD Namespace Is Less Than Value",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                                      "type": "TOP"
                                    },
                                    "kD1PcgqYQlm7fJatNG2ZsA": {
                                      "id": "kD1PcgqYQlm7fJatNG2ZsA",
                                      "vdid": "cNihhVrtDPl_5j7cSfcRug",
                                      "name": "OCD Namespace Is Truthy",
                                      "description": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                      "type": "TOP"
                                    },
                                    "Ve_kEFkGSMSgOqUWu9Yo_w": {
                                      "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                      "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                                      "name": "OCD Read Namespace Indirect",
                                      "description": "Reads and returns the value of OCD namespace via path indirection.",
                                      "type": "ACT"
                                    },
                                    "5rFEDGLYRSiZCeChMnkCHQ": {
                                      "id": "5rFEDGLYRSiZCeChMnkCHQ",
                                      "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                                      "name": "OCD Boolean Flag Set",
                                      "description": "Set the Boolean-type OCD namespace specified by path to value true.",
                                      "type": "ACT"
                                    },
                                    "_yxWfFLnTqqN-UxRdd7W5w": {
                                      "id": "_yxWfFLnTqqN-UxRdd7W5w",
                                      "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                                      "name": "OCD Boolean Flag Clear",
                                      "description": "Set the Boolean-type OCD namespace specified by path to value false.",
                                      "type": "ACT"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
