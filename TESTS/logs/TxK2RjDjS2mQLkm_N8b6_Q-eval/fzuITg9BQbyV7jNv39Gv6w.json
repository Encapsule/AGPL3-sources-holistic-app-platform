{
  "dosRgxmiR66ongCbJB78ow": {
    "bvj2u51Uw5_SD1TRZNpwXA": {
      "fzuITg9BQbyV7jNv39Gv6w": {
        "harnessRequest": {
          "id": "fzuITg9BQbyV7jNv39Gv6w",
          "name": "d2r2/React Client Output Processor OPC #1",
          "description": "Attempt to apply the d2r2/React Client Display Adaptor APM inside of an OPC instance.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "ObservableProcessController": {
                  "constructorRequest": {
                    "id": "fzuITg9BQbyV7jNv39Gv6w",
                    "name": "d2r2/React Client Display Adaptor OPC #1",
                    "description": "Attempt to apply the d2r2/React Client Display Adaptor APM inside of an OPC instance.",
                    "ocdTemplateSpec": {
                      "____types": "jsObject",
                      "d2r2ReactClientOutputProcessor": {
                        "____types": "jsObject",
                        "____defaultValue": {},
                        "____appdsl": {
                          "apm": "IxoJ83u0TXmG7PLUYBvsyg"
                        }
                      }
                    },
                    "abstractProcessModelSets": [
                      [
                        {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                          "name": "Abstract Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                        },
                        {
                          "id": "IxoJ83u0TXmG7PLUYBvsyg",
                          "vdid": "guj8_A0Z2pydtetwzFwaqA",
                          "name": "d2r2/React Client Display Adaptor",
                          "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React."
                        }
                      ]
                    ],
                    "transitionOperatorSets": [
                      [
                        {
                          "id": "9tNY7o5GTUGH_xda2GhP-w",
                          "vdid": "zmPeG6lSvXidCjr_XyENrQ",
                          "name": "Cell Process In Step Operator",
                          "description": "Returns Boolean true iff the indicated APM instance is in the indicated process step."
                        },
                        {
                          "id": "YgABX95wR86GCYrYaDLISA",
                          "vdid": "5Ebtc8mARWrvCY6U_wzdDA",
                          "name": "Logical AND",
                          "description": "Returns Boolean true iff all suboperations return true."
                        },
                        {
                          "id": "TLSHkl73SO-utuzM7dyN2g",
                          "vdid": "ASh3z9ynLmUqRJElxWHVjQ",
                          "name": "Logical NOT",
                          "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to)."
                        },
                        {
                          "id": "0JIva4IFSm6Xm7i38g8uUA",
                          "vdid": "FAh08f8CZQHnj-Pkilu-rw",
                          "name": "Logical OR",
                          "description": "Returns Boolean true iff any suboperations return true."
                        },
                        {
                          "id": "e89cwnP4Qd6MocAhzdOJgw",
                          "vdid": "NmKPVm8o5IAXQE-GgWcCDA",
                          "name": "Logical TRUE",
                          "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules)."
                        },
                        {
                          "id": "oaF3-dXwQkusjD3I2o9-8g",
                          "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                          "name": "OCD Array Length Equal to Value",
                          "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect)."
                        },
                        {
                          "id": "UeLs9PcASwuC7KR190eYhA",
                          "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                          "name": "OCD Boolean Flag Is Set",
                          "description": "Returns Boolean true iff the indicated Boolean flag namespace is true."
                        },
                        {
                          "id": "2w7n6KxdR8mdIliePJesLQ",
                          "vdid": "LxdR4ZycXiKfJOoUpmcnUg",
                          "name": "OCD Namespace A ? B Value Comparison",
                          "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator. Note either A and/or B may be specified by value or path."
                        },
                        {
                          "id": "pj9a6tQpSXWp7WZZ8VbKLQ",
                          "vdid": "zquEh0gwCPP_d9hmBD3uAQ",
                          "name": "OCD Namespace Is Array Empty",
                          "description": "Returns Boolean true iff the indicated OCD namespace value is an array AND value.length !== 0."
                        },
                        {
                          "id": "ggsavKiARsq7rjwn-lxdfA",
                          "vdid": "zo88N4oEjk34PxGoXmyTUA",
                          "name": "OCD Namespace Is Greater Than Value",
                          "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only."
                        },
                        {
                          "id": "k7THIKKDQMKOac1Rxh9tEQ",
                          "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                          "name": "OCD Namespace Is Identical To Value",
                          "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only."
                        },
                        {
                          "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                          "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                          "name": "OCD Namespace Is Less Than Value",
                          "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only."
                        },
                        {
                          "id": "fS5liuD1RBSdaPBEhsoxXw",
                          "vdid": "DmRYzsWPhe-U6ZWFhMH9-w",
                          "name": "OCD Namespace Is Map Keyless",
                          "description": "Returns Boolean true iff the indicated OCD namespace is declared as a map in the OCD filter spec AND the OCD value is an object AND Object.key(value) !== 0."
                        },
                        {
                          "id": "kD1PcgqYQlm7fJatNG2ZsA",
                          "vdid": "cNihhVrtDPl_5j7cSfcRug",
                          "name": "OCD Namespace Is Truthy",
                          "description": "Returns Boolean true iff the indicated OCD namespace is truthy."
                        }
                      ]
                    ],
                    "controllerActionSets": [
                      [
                        {
                          "id": "iyvk_9vhRn2qvrjOes5v7Q",
                          "vdid": "Mm1h1iJOaeH77h6HYA9wxg",
                          "name": "Frame Latch: Write",
                          "description": "Writes the value made observable by frame latch APM instance."
                        },
                        {
                          "id": "_yxWfFLnTqqN-UxRdd7W5w",
                          "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                          "name": "OCD Boolean Flag Clear",
                          "description": "Set the Boolean-type OCD namespace specified by path to value false."
                        },
                        {
                          "id": "5rFEDGLYRSiZCeChMnkCHQ",
                          "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                          "name": "OCD Boolean Flag Set",
                          "description": "Set the Boolean-type OCD namespace specified by path to value true."
                        },
                        {
                          "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                          "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                          "name": "OCD Read Namespace Indirect",
                          "description": "Reads and returns the value of OCD namespace via path indirection."
                        },
                        {
                          "id": "aXju3wSBQnufe0r51Y04wg",
                          "vdid": "1cu2zJ4iw9XB4K-RljVPPQ",
                          "name": "Write Sub-Action Response",
                          "description": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace."
                        },
                        {
                          "id": "ENIOOasYSdmJj_RXjA__hQ",
                          "vdid": "CJYfMSZautkxLcK565ZDTg",
                          "name": "d2r2/React Client Display Adaptor: Rydrate/Render",
                          "description": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD."
                        }
                      ]
                    ]
                  }
                },
                "actionRequest": []
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "54MiSgQdSiukMX4fIZJimg": {
                "fzuITg9BQbyV7jNv39Gv6w": {
                  "opcToJSON": {
                    "id": "fzuITg9BQbyV7jNv39Gv6w",
                    "name": "d2r2/React Client Display Adaptor OPC #1",
                    "description": "Attempt to apply the d2r2/React Client Display Adaptor APM inside of an OPC instance.",
                    "options": {
                      "evaluate": {
                        "maxFrames": 16,
                        "firstEvaluation": "constructor"
                      }
                    },
                    "apmMap": {
                      "z_mTe02hSWmaM1iRO1pBeA": {
                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                        "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                        "name": "Abstract Frame Latch",
                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                      },
                      "IxoJ83u0TXmG7PLUYBvsyg": {
                        "id": "IxoJ83u0TXmG7PLUYBvsyg",
                        "vdid": "guj8_A0Z2pydtetwzFwaqA",
                        "name": "d2r2/React Client Display Adaptor",
                        "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React."
                      }
                    },
                    "opmiSpecPaths": [
                      {
                        "specPath": "~.d2r2ReactClientOutputProcessor",
                        "opmiRef": {
                          "id": "IxoJ83u0TXmG7PLUYBvsyg",
                          "vdid": "guj8_A0Z2pydtetwzFwaqA",
                          "name": "d2r2/React Client Display Adaptor",
                          "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React."
                        }
                      },
                      {
                        "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                        "opmiRef": {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                          "name": "Abstract Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                        }
                      }
                    ],
                    "ocdTemplateSpec": {
                      "____types": "jsObject",
                      "d2r2ReactClientOutputProcessor": {
                        "____types": "jsObject",
                        "____defaultValue": {},
                        "____appdsl": {
                          "apm": "IxoJ83u0TXmG7PLUYBvsyg"
                        }
                      }
                    },
                    "ocdRuntimeSpec": {
                      "____label": "OPC [fzuITg9BQbyV7jNv39Gv6w::d2r2/React Client Display Adaptor OPC #1] Observable Controller Data Store",
                      "____description": "OPC [fzuITg9BQbyV7jNv39Gv6w::d2r2/React Client Display Adaptor OPC #1] system process runtime state data managed by OPC instance.",
                      "____types": "jsObject",
                      "____defaultValue": {},
                      "d2r2ReactClientOutputProcessor": {
                        "____types": "jsObject",
                        "____defaultValue": {},
                        "____appdsl": {
                          "apm": "IxoJ83u0TXmG7PLUYBvsyg"
                        },
                        "____label": "d2r2/React Client Display Adaptor Memory",
                        "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                        "inputs": {
                          "____label": "Adaptor Inputs",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "ComponentRouter": {
                            "____label": "d2r2 <ComponentRouter/>",
                            "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                            "____accept": [
                              "jsNull",
                              "jsFunction"
                            ],
                            "____defaultValue": null
                          },
                          "DOMElement": {
                            "____label": "d2r2 Target DOM Element",
                            "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                            "____opaque": true,
                            "____defaultValue": null
                          },
                          "clock": {
                            "____label": "Abstract Frame Latch",
                            "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                            "____types": "jsObject",
                            "____appdsl": {
                              "apm": "z_mTe02hSWmaM1iRO1pBeA"
                            },
                            "value": {
                              "____label": "Render Command",
                              "____types": [
                                "jsNull",
                                "jsObject"
                              ],
                              "____defaultValue": null,
                              "options": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "rehydrate": {
                                  "____types": "jsBoolean",
                                  "____defaultValue": false
                                }
                              },
                              "pathRenderContext": {
                                "____label": "Render Context OCD Path",
                                "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                "____accept": "jsString"
                              },
                              "pathRenderData": {
                                "____label": "Render Data OCD Path",
                                "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                "____accept": "jsString"
                              }
                            },
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            },
                            "__apmiStep": {
                              "____accept": "jsString",
                              "____defaultValue": "uninitialized"
                            }
                          }
                        },
                        "private": {
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "renderCount": {
                            "____accept": "jsNumber",
                            "____defaultValue": -1
                          },
                          "renderPending": {
                            "____accept": "jsBoolean",
                            "____defaultValue": false
                          }
                        },
                        "__apmiStep": {
                          "____accept": "jsString",
                          "____defaultValue": "uninitialized"
                        }
                      }
                    },
                    "ocdi": {
                      "d2r2ReactClientOutputProcessor": {
                        "inputs": {
                          "ComponentRouter": null,
                          "DOMElement": null,
                          "clock": {
                            "value": null,
                            "clock": false,
                            "__apmiStep": "waiting"
                          }
                        },
                        "private": {
                          "renderCount": -1,
                          "renderPending": false
                        },
                        "__apmiStep": "uninitialized"
                      }
                    },
                    "transitionDispatcher": {
                      "filterDescriptor": {
                        "operationID": "HWLTkfbkbTAGNalogCzYVA",
                        "operationName": "Discriminator Filter",
                        "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                        "inputTypeVIID": "Sfd1V3LVrdumRQjxXc2E9Q",
                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "outputTypeVIID": "jzNUb-fvGmKlboY-J0vNtg",
                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "operationVDID": "CsL0E8meNVdXSI7tPTYUtA"
                      },
                      "supportedFilters": [
                        "[0JIva4IFSm6Xm7i38g8uUA::Logical OR]",
                        "[2w7n6KxdR8mdIliePJesLQ::OCD Namespace A ? B Value Comparison]",
                        "[9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]",
                        "[TLSHkl73SO-utuzM7dyN2g::Logical NOT]",
                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                        "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                        "[YgABX95wR86GCYrYaDLISA::Logical AND]",
                        "[e89cwnP4Qd6MocAhzdOJgw::Logical TRUE]",
                        "[fS5liuD1RBSdaPBEhsoxXw::OCD Namespace Is Map Keyless]",
                        "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                        "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                        "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]",
                        "[pj9a6tQpSXWp7WZZ8VbKLQ::OCD Namespace Is Array Empty]"
                      ],
                      "options": {
                        "action": "getFilter"
                      }
                    },
                    "transitionDispatcherFilterMap": {
                      "9tNY7o5GTUGH_xda2GhP-w": {
                        "filterDescriptor": {
                          "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                          "operationName": "Cell Process In Step Operator",
                          "operationDescription": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                          "inputFilterSpec": {
                            "____label": "Cell Process In Step Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "atStep": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "step": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                          "inputTypeVDID": "q9TocAv3KDWF1D8TwFOj0A",
                          "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "wlRcRFbU4pO6f_ictPVicg"
                        }
                      },
                      "YgABX95wR86GCYrYaDLISA": {
                        "filterDescriptor": {
                          "operationID": "YgABX95wR86GCYrYaDLISA",
                          "operationName": "Logical AND",
                          "operationDescription": "Returns Boolean true iff all suboperations return true.",
                          "inputFilterSpec": {
                            "____label": "Logical AND Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "and": {
                                "____types": "jsArray",
                                "operandOperatorVariant": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                          "inputTypeVDID": "aZ0313jYspKqFYbxLUobFA",
                          "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "9jcTRLaZgJMBefycqJ3Wcg"
                        }
                      },
                      "TLSHkl73SO-utuzM7dyN2g": {
                        "filterDescriptor": {
                          "operationID": "TLSHkl73SO-utuzM7dyN2g",
                          "operationName": "Logical NOT",
                          "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                          "inputFilterSpec": {
                            "____label": "Logical NOT Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "not": {
                                "____accept": "jsObject"
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                          "inputTypeVDID": "b3mPoTvLTsPNNEE5vSl4Ig",
                          "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "MSNYRHRjqZPIbkKcBH-Scg"
                        }
                      },
                      "0JIva4IFSm6Xm7i38g8uUA": {
                        "filterDescriptor": {
                          "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                          "operationName": "Logical OR",
                          "operationDescription": "Returns Boolean true iff any suboperations return true.",
                          "inputFilterSpec": {
                            "____label": "Logical OR Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "or": {
                                "____types": "jsArray",
                                "operandOperatorVariant": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                          "inputTypeVDID": "-JaOoCpSpMXUBcCaKY9fVw",
                          "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "4CecRIW4PJNmp1qcOG6ncg"
                        }
                      },
                      "e89cwnP4Qd6MocAhzdOJgw": {
                        "filterDescriptor": {
                          "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                          "operationName": "Logical TRUE",
                          "operationDescription": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                          "inputFilterSpec": {
                            "____label": "Logical TRUE Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "always": {
                                "____accept": "jsBoolean",
                                "____inValueSet": [
                                  true
                                ]
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                          "inputTypeVDID": "C5XIeECWu2mxDmCCOEFunQ",
                          "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "7g4dROZHqpP8SX2c1AJhcg"
                        }
                      },
                      "oaF3-dXwQkusjD3I2o9-8g": {
                        "filterDescriptor": {
                          "operationID": "oaF3-dXwQkusjD3I2o9-8g",
                          "operationName": "OCD Array Length Equal to Value",
                          "operationDescription": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                          "inputFilterSpec": {
                            "____label": "OCD Array Length Equal to Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "array": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "length": {
                                          "____types": "jsObject",
                                          "equalToValue": {
                                            "____accept": [
                                              "jsNumber",
                                              "jsString"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "1w1jkkL88zPbGh1huUa66A",
                          "inputTypeVDID": "mlQwgyCDl-ST91MGpgC1VQ",
                          "outputTypeVIID": "ll5aBQHmBVx07i4pBJMThw",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "yhC0RNrN1ZMX5F-ckUIncg"
                        }
                      },
                      "UeLs9PcASwuC7KR190eYhA": {
                        "filterDescriptor": {
                          "operationID": "UeLs9PcASwuC7KR190eYhA",
                          "operationName": "OCD Boolean Flag Is Set",
                          "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Is Set Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isBooleanFlagSet": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                          "inputTypeVDID": "XaY0xWS0bd69voTSU_w3aA",
                          "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "6eZxRIQnF5PpgaiccabWcg"
                        }
                      },
                      "2w7n6KxdR8mdIliePJesLQ": {
                        "filterDescriptor": {
                          "operationID": "2w7n6KxdR8mdIliePJesLQ",
                          "operationName": "OCD Namespace A ? B Value Comparison",
                          "operationDescription": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator. Note either A and/or B may be specified by value or path.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace A ? B Value Comparison Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "compare": {
                                        "____types": "jsObject",
                                        "values": {
                                          "____types": "jsObject",
                                          "a": {
                                            "____label": "Operand A",
                                            "____description": "Operand A for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                            "____types": "jsObject",
                                            "value": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsNull",
                                                "jsString",
                                                "jsNumber",
                                                "jsBoolean"
                                              ]
                                            },
                                            "path": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsString"
                                              ]
                                            }
                                          },
                                          "b": {
                                            "____label": "Operand B",
                                            "____description": "Operand B for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                            "____types": "jsObject",
                                            "value": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsNull",
                                                "jsString",
                                                "jsNumber",
                                                "jsBoolean"
                                              ]
                                            },
                                            "path": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsString"
                                              ]
                                            }
                                          },
                                          "operator": {
                                            "____label": "Comparison Operator",
                                            "____description": "A string enum indicating the comparison operator to use.",
                                            "____accept": "jsString",
                                            "____inValueSet": [
                                              "===",
                                              "==",
                                              "<",
                                              "<=",
                                              ">",
                                              ">="
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "Vd7i-lH1mj84kJrcpYoR9g",
                          "inputTypeVDID": "we4gsONAq8XLVofHZjgx5w",
                          "outputTypeVIID": "kxjuRwQKX01DJDkjruKvXg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "l60yRNc4cZMrOtqcKqP9cg"
                        }
                      },
                      "pj9a6tQpSXWp7WZZ8VbKLQ": {
                        "filterDescriptor": {
                          "operationID": "pj9a6tQpSXWp7WZZ8VbKLQ",
                          "operationName": "OCD Namespace Is Array Empty",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace value is an array AND value.length !== 0.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Array Empty Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "arrayIsEmpty": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "8WDm-CC4lQnnKYro89MK2g",
                          "inputTypeVDID": "Q-Htr-yHRojgL8p4HkS4bw",
                          "outputTypeVIID": "lcDQLsyLvx_9RfG-kyHwhA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "53cpRDV7MZOYdMOcMW07cg"
                        }
                      },
                      "ggsavKiARsq7rjwn-lxdfA": {
                        "filterDescriptor": {
                          "operationID": "ggsavKiARsq7rjwn-lxdfA",
                          "operationName": "OCD Namespace Is Greater Than Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Greater Than Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceGreaterThanValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "CF-H4WojwJ7B1YyWvKlnMQ",
                          "inputTypeVDID": "LRU9vcBpToNeHesuiIxokw",
                          "outputTypeVIID": "vevJRLqsD_7D5r52vqsYNg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "soEGROP6ipOrHwqcgR0Icg"
                        }
                      },
                      "k7THIKKDQMKOac1Rxh9tEQ": {
                        "filterDescriptor": {
                          "operationID": "k7THIKKDQMKOac1Rxh9tEQ",
                          "operationName": "OCD Namespace Is Identical To Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Identical To Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceIdenticalToValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "2lapAiv6Y2wX3rSyYd_aXA",
                          "inputTypeVDID": "9RU9alRpThHQHeu-ZIxoLg",
                          "outputTypeVIID": "a4e-UB9BqYvz755bPVZ4AA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "aCc3RHCjwpMQ7XKc0o4mcg"
                        }
                      },
                      "XxX_a1sQS1OlJbWAYfx6tQ": {
                        "filterDescriptor": {
                          "operationID": "XxX_a1sQS1OlJbWAYfx6tQ",
                          "operationName": "OCD Namespace Is Less Than Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Less Than Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceLessThanValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "SdjtRCNawPzfg3fuyxpeog",
                          "inputTypeVDID": "ZuD2TKtYUqU87dkAt67RVA",
                          "outputTypeVIID": "C3a0V2HEKW7fH5xudFSe2Q",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "l9RzRDh_y5NJEa-c2o72cg"
                        }
                      },
                      "fS5liuD1RBSdaPBEhsoxXw": {
                        "filterDescriptor": {
                          "operationID": "fS5liuD1RBSdaPBEhsoxXw",
                          "operationName": "OCD Namespace Is Map Keyless",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is declared as a map in the OCD filter spec AND the OCD value is an object AND Object.key(value) !== 0.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Map Keyless Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "mapIsKeyless": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "AhSGTfAi0eXWxin8HSY6dA",
                          "inputTypeVDID": "JOHtpQqHRiCYL8pNDES4Rg",
                          "outputTypeVIID": "D2SJBJGJrPn0GyV2XgoWJw",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "U6xLRDGfAJP2ayWcc4jWcg"
                        }
                      },
                      "kD1PcgqYQlm7fJatNG2ZsA": {
                        "filterDescriptor": {
                          "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                          "operationName": "OCD Namespace Is Truthy",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Truthy Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceTruthy": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                          "inputTypeVDID": "IqY0aMK0bZrZvoSd7_w3IQ",
                          "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "vqWEROJwL5P3HeKc3FBvcg"
                        }
                      }
                    },
                    "actionDispatcher": {
                      "filterDescriptor": {
                        "operationID": "LVvifQvBaUAy-NemG1dCMw",
                        "operationName": "Discriminator Filter",
                        "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                        "inputTypeVIID": "wsCAU05v4CrbYxr6WYjhXA",
                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "outputTypeVIID": "UGpAnqk_gZwYO94HegRQxw",
                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "operationVDID": "jg70E-ypNVeh147t-9gUtA"
                      },
                      "supportedFilters": [
                        "[5rFEDGLYRSiZCeChMnkCHQ::OCD Boolean Flag Set]",
                        "[ENIOOasYSdmJj_RXjA__hQ::d2r2/React Client Display Adaptor: Rydrate/Render]",
                        "[KX0V_aQ3RzG01tzBS24MGw::OPC Intrinsic NOOP Action]",
                        "[S1GqYjTtSQazSxkIL9vtpA::OPC Intrinsic Status Action]",
                        "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                        "[_yxWfFLnTqqN-UxRdd7W5w::OCD Boolean Flag Clear]",
                        "[aXju3wSBQnufe0r51Y04wg::Write Sub-Action Response]",
                        "[iyvk_9vhRn2qvrjOes5v7Q::Frame Latch: Write]"
                      ],
                      "options": {
                        "action": "getFilter"
                      }
                    },
                    "actionDispatcherFilterMap": {
                      "iyvk_9vhRn2qvrjOes5v7Q": {
                        "filterDescriptor": {
                          "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                          "operationName": "Frame Latch: Write",
                          "operationDescription": "Writes the value made observable by frame latch APM instance.",
                          "inputFilterSpec": {
                            "____label": "Frame Latch: Write Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "frameLatch": {
                                      "____types": "jsObject",
                                      "write": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____label": "Frame Latch Bound Namespace Path",
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____label": "Write Value",
                                          "____opaque": true
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____label": "Write Frame Latch Result",
                            "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                            "____opaque": true
                          },
                          "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                          "inputTypeVDID": "ReMEnCXFT3yFkJ3JX6oz3g",
                          "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                          "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                          "operationVDID": "E7NA-ISmB6dh6uB3b1wMSw"
                        }
                      },
                      "_yxWfFLnTqqN-UxRdd7W5w": {
                        "filterDescriptor": {
                          "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                          "operationName": "OCD Boolean Flag Clear",
                          "operationDescription": "Set the Boolean-type OCD namespace specified by path to value false.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Clear Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "clearBooleanFlag": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                          "inputTypeVDID": "9JJ6pBweTCwI2oO98eA5jA",
                          "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "22s0kmR4PDHNH1MwaETpSA"
                        }
                      },
                      "5rFEDGLYRSiZCeChMnkCHQ": {
                        "filterDescriptor": {
                          "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                          "operationName": "OCD Boolean Flag Set",
                          "operationDescription": "Set the Boolean-type OCD namespace specified by path to value true.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Set Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "setBooleanFlag": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                          "inputTypeVDID": "0SvJjLbCiM4zgfkcsCtG9w",
                          "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "bCv1ksN_4DF7HKQweU68SA"
                        }
                      },
                      "Ve_kEFkGSMSgOqUWu9Yo_w": {
                        "filterDescriptor": {
                          "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                          "operationName": "OCD Read Namespace Indirect",
                          "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                          "inputFilterSpec": {
                            "____label": "OCD Read Namespace Indirect Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "cm": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "readNamespaceIndirect": {
                                        "____types": "jsObject",
                                        "path2": {
                                          "____label": "Target Path Namespace Path",
                                          "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                          "inputTypeVDID": "IOgWXFaAcQ5ZA6pPH8_2xg",
                          "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "0IU7E_qFb1e52MDt_6IqtA"
                        }
                      },
                      "aXju3wSBQnufe0r51Y04wg": {
                        "filterDescriptor": {
                          "operationID": "aXju3wSBQnufe0r51Y04wg",
                          "operationName": "Write Sub-Action Response",
                          "operationDescription": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace.",
                          "inputFilterSpec": {
                            "____label": "Write Sub-Action Response Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "core": {
                                  "____types": "jsObject",
                                  "writeSubactionResponse": {
                                    "____types": "jsObject",
                                    "subactionRequest": {
                                      "____label": "Sub-Action Request",
                                      "____description": "Some caller-specified action request that we're to dispatch on their behalf so that we can save the response in shared memory.",
                                      "____accept": "jsObject"
                                    },
                                    "writeResponsePath": {
                                      "____label": "Write Response Path",
                                      "____description": "Absolute (begins in ~), cell-relative (begins in #), OCD path to write the subaction response. Note that relative paths are also supported here.",
                                      "____accept": "jsString"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____label": "No Result (Default)",
                            "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "HiwULbPvbF4NiFgugv_ZSg",
                          "inputTypeVDID": "nUNjRm6k756h54bBy4S8Eg",
                          "outputTypeVIID": "YXPCMgl_OxPwupnLbcirow",
                          "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                          "operationVDID": "CHvoeVRpOtYpgVSkh0mYBw"
                        }
                      },
                      "ENIOOasYSdmJj_RXjA__hQ": {
                        "filterDescriptor": {
                          "operationID": "ENIOOasYSdmJj_RXjA__hQ",
                          "operationName": "d2r2/React Client Display Adaptor: Rydrate/Render",
                          "operationDescription": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD.",
                          "inputFilterSpec": {
                            "____label": "d2r2/React Client Display Adaptor: Rydrate/Render Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holistic": {
                                "____types": "jsObject",
                                "app": {
                                  "____types": "jsObject",
                                  "client": {
                                    "____types": "jsObject",
                                    "cm": {
                                      "____types": "jsObject",
                                      "actions": {
                                        "____types": "jsObject",
                                        "d2r2ReactClientDisplayAdaptor": {
                                          "____types": "jsObject",
                                          "operation": {
                                            "____accept": "jsString",
                                            "____inValueSet": [
                                              "hydrate",
                                              "render"
                                            ],
                                            "____defaultValue": "render"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "FOgSosceAcgixkQPtRIdcw",
                          "inputTypeVDID": "01WNB74t-WVWtSUeEd6WUQ",
                          "outputTypeVIID": "b4sB-x0S_Ht89mR-mn0gRw",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "F74tkr5DDDFSVKwwOG8DSA"
                        }
                      },
                      "KX0V_aQ3RzG01tzBS24MGw": {
                        "filterDescriptor": {
                          "operationID": "KX0V_aQ3RzG01tzBS24MGw",
                          "operationName": "OPC Intrinsic NOOP Action",
                          "operationDescription": "OPC-intrinsic performs no operation (noop). When invoked via OPC.act, the effect is to perform no read/write operations on OPC-instanced shared memory. And, then perform an evaluation.",
                          "inputFilterSpec": {
                            "____label": "OPC Intrinsic NOOP Action Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "opc": {
                                  "____types": "jsObject",
                                  "noop": {
                                    "____accept": "jsBoolean",
                                    "____inValueSet": [
                                      true
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "txJFSr26_WFausq9BG5NZg",
                          "inputTypeVDID": "BiObVoNbI4_uMMaTBVkFXQ",
                          "outputTypeVIID": "kuQ7tcKRU28cS2Qj0GX17A",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "x0rQE0TkE1dfHMftLnWXtA"
                        }
                      },
                      "S1GqYjTtSQazSxkIL9vtpA": {
                        "filterDescriptor": {
                          "operationID": "S1GqYjTtSQazSxkIL9vtpA",
                          "operationName": "OPC Intrinsic Status Action",
                          "operationDescription": "OPC-intrinsic performs a retrieval of transitive OPC instance status.",
                          "inputFilterSpec": {
                            "____label": "OPC Intrinsic Status Action Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "opc": {
                                  "____types": "jsObject",
                                  "status": {
                                    "____accept": "jsBoolean",
                                    "____inValueSet": [
                                      true
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "vncGN9bjl9Mmy3r-EUnmKg",
                          "inputTypeVDID": "es2e3G-BC0wtoR59QSPlgg",
                          "outputTypeVIID": "A0mnQJBJD4gdX6rrM6Txtw",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "LolDE0qGUVe0PlPtvVfktA"
                        }
                      }
                    },
                    "opcActorStack": [],
                    "evalCount": 1,
                    "lastEvalResponse": {
                      "error": null,
                      "result": {
                        "evalNumber": 0,
                        "summary": {
                          "counts": {
                            "bindings": 6,
                            "frames": 3,
                            "errors": 3,
                            "transitions": 2
                          }
                        },
                        "evalFrames": [
                          {
                            "summary": {
                              "counts": {
                                "bindings": 2,
                                "transitions": 1,
                                "errors": 1
                              },
                              "reports": {
                                "transitions": [
                                  "6KIVQm2l_Kkuh0qvYBQ-nw"
                                ],
                                "errors": [
                                  "Qf5B_mFgYWCyRbJFtNW01Q"
                                ]
                              }
                            },
                            "bindings": {
                              "Qf5B_mFgYWCyRbJFtNW01Q": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor",
                                    "specPath": "~.d2r2ReactClientOutputProcessor"
                                  },
                                  "initialStep": "uninitialized",
                                  "apmRef": {
                                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                    "vdid": "guj8_A0Z2pydtetwzFwaqA",
                                    "name": "d2r2/React Client Display Adaptor",
                                    "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React."
                                  }
                                },
                                "evalResponse": {
                                  "status": "error",
                                  "finishStep": "uninitialized",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor"
                                          },
                                          "operatorRequest": {
                                            "holarchy": {
                                              "cm": {
                                                "operators": {
                                                  "cell": {
                                                    "atStep": {
                                                      "path": "#.//.//.//.//",
                                                      "step": "boot1_start_kernel"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": "TransitionOperator request was successfully parsed and routed to plug-in filter delegate [9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]. But, the plug-in rejected the request with error: Filter [9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator] failed while performing main operation. Filter [RNUkdw8VT8WLz5H_i-SwYg::Data Path Resolve Filter] failed while performing main operation. Invalid dataPath '#.//.//.//.//' references namespace at or above the anonymous '~' namespace. From the perspective of this error handler it's difficult to say precisely what this error means given the broad semantics of TransitionOperator filters. Here is a list of possible problems in decreasing order of liklihood: Your request format may be invalid above the point in the request data where the message router made its delegate selection and this error is the plug-in rejecting the request entirely. Or, the selected TransitionOperator plug-in filter may implement some sort of additional input value validation that constrains the permissible input beyond what's examined by the message router and TransitionOperator plug-in filters. And, you've violated API constraints. Or, you have made a valid request but applied the action to the wrong type of cell (i.e. you think you're acting on a cell bound to APM X but it's really bound to a Y). Or, the cell you're attempting to operator on is not in the correct process step or otherwise prepared to accept or take action on behalf of the caller. Or, there's a bug in the TransitionOperator plug-in filter itself. If you track down the source of this error and it's not on this list please report it!"
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 1,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 1
                                  }
                                }
                              },
                              "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                    "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                  },
                                  "initialStep": "uninitialized",
                                  "apmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "updated",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [
                                      {
                                        "request": {
                                          "holarchy": {
                                            "cm": {
                                              "actions": {
                                                "ocd": {
                                                  "setBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": {}
                                        }
                                      }
                                    ],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "updated"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          },
                          {
                            "summary": {
                              "counts": {
                                "bindings": 2,
                                "transitions": 1,
                                "errors": 1
                              },
                              "reports": {
                                "transitions": [
                                  "6KIVQm2l_Kkuh0qvYBQ-nw"
                                ],
                                "errors": [
                                  "Qf5B_mFgYWCyRbJFtNW01Q"
                                ]
                              }
                            },
                            "bindings": {
                              "Qf5B_mFgYWCyRbJFtNW01Q": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor",
                                    "specPath": "~.d2r2ReactClientOutputProcessor"
                                  },
                                  "initialStep": "uninitialized",
                                  "apmRef": {
                                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                    "vdid": "guj8_A0Z2pydtetwzFwaqA",
                                    "name": "d2r2/React Client Display Adaptor",
                                    "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React."
                                  }
                                },
                                "evalResponse": {
                                  "status": "error",
                                  "finishStep": "uninitialized",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor"
                                          },
                                          "operatorRequest": {
                                            "holarchy": {
                                              "cm": {
                                                "operators": {
                                                  "cell": {
                                                    "atStep": {
                                                      "path": "#.//.//.//.//",
                                                      "step": "boot1_start_kernel"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": "TransitionOperator request was successfully parsed and routed to plug-in filter delegate [9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]. But, the plug-in rejected the request with error: Filter [9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator] failed while performing main operation. Filter [RNUkdw8VT8WLz5H_i-SwYg::Data Path Resolve Filter] failed while performing main operation. Invalid dataPath '#.//.//.//.//' references namespace at or above the anonymous '~' namespace. From the perspective of this error handler it's difficult to say precisely what this error means given the broad semantics of TransitionOperator filters. Here is a list of possible problems in decreasing order of liklihood: Your request format may be invalid above the point in the request data where the message router made its delegate selection and this error is the plug-in rejecting the request entirely. Or, the selected TransitionOperator plug-in filter may implement some sort of additional input value validation that constrains the permissible input beyond what's examined by the message router and TransitionOperator plug-in filters. And, you've violated API constraints. Or, you have made a valid request but applied the action to the wrong type of cell (i.e. you think you're acting on a cell bound to APM X but it's really bound to a Y). Or, the cell you're attempting to operator on is not in the correct process step or otherwise prepared to accept or take action on behalf of the caller. Or, there's a bug in the TransitionOperator plug-in filter itself. If you track down the source of this error and it's not on this list please report it!"
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 1,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 1
                                  }
                                }
                              },
                              "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                    "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                  },
                                  "initialStep": "updated",
                                  "apmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "waiting",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [
                                      {
                                        "request": {
                                          "holarchy": {
                                            "cm": {
                                              "actions": {
                                                "ocd": {
                                                  "clearBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": {}
                                        }
                                      }
                                    ],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "waiting"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          },
                          {
                            "summary": {
                              "counts": {
                                "bindings": 2,
                                "transitions": 0,
                                "errors": 1
                              },
                              "reports": {
                                "transitions": [],
                                "errors": [
                                  "Qf5B_mFgYWCyRbJFtNW01Q"
                                ]
                              }
                            },
                            "bindings": {
                              "Qf5B_mFgYWCyRbJFtNW01Q": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor",
                                    "specPath": "~.d2r2ReactClientOutputProcessor"
                                  },
                                  "initialStep": "uninitialized",
                                  "apmRef": {
                                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                    "vdid": "guj8_A0Z2pydtetwzFwaqA",
                                    "name": "d2r2/React Client Display Adaptor",
                                    "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React."
                                  }
                                },
                                "evalResponse": {
                                  "status": "error",
                                  "finishStep": "uninitialized",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor"
                                          },
                                          "operatorRequest": {
                                            "holarchy": {
                                              "cm": {
                                                "operators": {
                                                  "cell": {
                                                    "atStep": {
                                                      "path": "#.//.//.//.//",
                                                      "step": "boot1_start_kernel"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": "TransitionOperator request was successfully parsed and routed to plug-in filter delegate [9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]. But, the plug-in rejected the request with error: Filter [9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator] failed while performing main operation. Filter [RNUkdw8VT8WLz5H_i-SwYg::Data Path Resolve Filter] failed while performing main operation. Invalid dataPath '#.//.//.//.//' references namespace at or above the anonymous '~' namespace. From the perspective of this error handler it's difficult to say precisely what this error means given the broad semantics of TransitionOperator filters. Here is a list of possible problems in decreasing order of liklihood: Your request format may be invalid above the point in the request data where the message router made its delegate selection and this error is the plug-in rejecting the request entirely. Or, the selected TransitionOperator plug-in filter may implement some sort of additional input value validation that constrains the permissible input beyond what's examined by the message router and TransitionOperator plug-in filters. And, you've violated API constraints. Or, you have made a valid request but applied the action to the wrong type of cell (i.e. you think you're acting on a cell bound to APM X but it's really bound to a Y). Or, the cell you're attempting to operator on is not in the correct process step or otherwise prepared to accept or take action on behalf of the caller. Or, there's a bug in the TransitionOperator plug-in filter itself. If you track down the source of this error and it's not on this list please report it!"
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 1,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 1
                                  }
                                }
                              },
                              "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                    "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                  },
                                  "initialStep": "waiting",
                                  "apmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                                  }
                                },
                                "evalResponse": {
                                  "status": "noop",
                                  "finishStep": "waiting",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                          },
                                          "operatorRequest": {
                                            "holarchy": {
                                              "cm": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": false
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "constructionWarnings": []
                  },
                  "actionEvaluations": []
                }
              }
            }
          }
        }
      }
    }
  }
}
