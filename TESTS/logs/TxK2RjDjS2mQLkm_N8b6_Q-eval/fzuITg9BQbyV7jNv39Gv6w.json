{
  "dosRgxmiR66ongCbJB78ow": {
    "bvj2u51Uw5_SD1TRZNpwXA": {
      "fzuITg9BQbyV7jNv39Gv6w": {
        "harnessRequest": {
          "id": "fzuITg9BQbyV7jNv39Gv6w",
          "name": "d2r2/React Client Output Processor OPC #1",
          "description": "Attempt to apply the d2r2/React Client Display Adaptor APM inside of an OPC instance.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "ObservableProcessController": {
                  "constructorRequest": {
                    "id": "fzuITg9BQbyV7jNv39Gv6w",
                    "name": "d2r2/React Client Display Adaptor OPC #1",
                    "description": "Attempt to apply the d2r2/React Client Display Adaptor APM inside of an OPC instance.",
                    "ocdTemplateSpec": {
                      "____types": "jsObject",
                      "d2r2ReactClientOutputProcessor": {
                        "____types": "jsObject",
                        "____appdsl": {
                          "apm": "IxoJ83u0TXmG7PLUYBvsyg"
                        }
                      }
                    },
                    "abstractProcessModelSets": [
                      [
                        {
                          "id": "IxoJ83u0TXmG7PLUYBvsyg",
                          "name": "d2r2/React Client Display Adaptor",
                          "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                          "ocdDataSpec": {
                            "____label": "d2r2/React Client Display Adaptor Memory",
                            "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "inputs": {
                              "____label": "Adaptor Inputs",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "ComponentRouter": {
                                "____label": "d2r2 <ComponentRouter/>",
                                "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                "____accept": [
                                  "jsNull",
                                  "jsFunction"
                                ],
                                "____defaultValue": null
                              },
                              "DOMElement": {
                                "____label": "d2r2 Target DOM Element",
                                "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                "____opaque": true,
                                "____defaultValue": null
                              },
                              "clock": {
                                "____label": "React Output Processor Clock",
                                "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "apm": "z_mTe02hSWmaM1iRO1pBeA"
                                },
                                "value": {
                                  "____label": "Render Command",
                                  "____types": [
                                    "jsNull",
                                    "jsObject"
                                  ],
                                  "____defaultValue": null,
                                  "options": {
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "rehydrate": {
                                      "____types": "jsBoolean",
                                      "____defaultValue": false
                                    }
                                  },
                                  "pathRenderContext": {
                                    "____label": "Render Context OCD Path",
                                    "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                    "____accept": "jsString"
                                  },
                                  "pathRenderData": {
                                    "____label": "Render Data OCD Path",
                                    "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                    "____accept": "jsString"
                                  }
                                }
                              }
                            },
                            "private": {
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "renderCount": {
                                "____accept": "jsNumber",
                                "____defaultValue": -1
                              },
                              "renderPending": {
                                "____accept": "jsBoolean",
                                "____defaultValue": false
                              }
                            }
                          },
                          "steps": {
                            "uninitialized": {
                              "description": "Default APM process step.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "wait_invariants"
                                }
                              ]
                            },
                            "wait_invariants": {
                              "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "and": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.ComponentRouter"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.DOMElement"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "nextStep": "wait_inputs"
                                }
                              ]
                            },
                            "wait_inputs": {
                              "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.inputs.clock.value"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "initialized"
                                }
                              ]
                            },
                            "initialized": {
                              "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.inputs.clock.value.options.rehydrate"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "rehydrate"
                                },
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "render"
                                }
                              ]
                            },
                            "rehydrate": {
                              "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                              "actions": {
                                "enter": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.private.renderPending"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "holistic": {
                                      "app": {
                                        "client": {
                                          "sml": {
                                            "actions": {
                                              "d2r2ReactClientDisplayAdaptor": {
                                                "operation": "hydrate"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "rendering"
                                }
                              ]
                            },
                            "render": {
                              "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                              "actions": {
                                "enter": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.private.renderPending"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "holistic": {
                                      "app": {
                                        "client": {
                                          "sml": {
                                            "actions": {
                                              "d2r2ReactClientDisplayAdaptor": {
                                                "operation": "render"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "rendering"
                                }
                              ]
                            },
                            "rendering": {
                              "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "not": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.private.renderPending"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "ready"
                                }
                              ]
                            },
                            "ready": {
                              "description": "Waiting for next clock signal to re-render client application view.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "opmi": {
                                            "atStep": {
                                              "path": "#.inputs.clock",
                                              "step": "updated"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "render"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "name": "Abstract Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                          "ocdDataSpec": {
                            "____label": "Abstract Frame Latch",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            }
                          },
                          "steps": {
                            "uninitialized": {
                              "description": "Default starting process step.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            },
                            "updated": {
                              "description": "The value managed by the frame latch has been written.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "clearBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "waiting"
                                }
                              ]
                            },
                            "waiting": {
                              "description": "Frame latch value has not changed since last signalled update.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isBooleanFlagSet": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    ],
                    "transitionOperatorSets": [
                      [
                        {
                          "filterDescriptor": {
                            "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                            "operationName": "Cell In Step Expression Operator",
                            "operationDescription": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                            "inputFilterSpec": {
                              "____label": "Cell In Step Expression Operator Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "cell": {
                                        "____types": "jsObject",
                                        "atStep": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "step": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                            "inputTypeVDID": "SK6JWEwoYvtcbTG_ft3mbw",
                            "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "wnDHRFa0dZO6z36ctJqXcg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                            "operationName": "OCD Namespace Is Truthy",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Truthy Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceTruthy": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                            "inputTypeVDID": "IqY0bMK0bTrZvoSc7_w39Q",
                            "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "vo9QROLBZZP3NSGc3J1Fcg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                            "operationName": "OR Transition Expression Operator",
                            "operationDescription": "Returns Boolean true iff any suboperations return true.",
                            "inputFilterSpec": {
                              "____label": "OR Transition Expression Operator Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "or": {
                                  "____types": "jsArray",
                                  "operandOperatorVariant": {
                                    "____accept": "jsObject"
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                            "inputTypeVDID": "0Xe392MJsGr0KO6YF3c80A",
                            "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "4ImARIUqM5NmuBqcOBs-cg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "TLSHkl73SO-utuzM7dyN2g",
                            "operationName": "NOT Transition Expression Operator",
                            "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                            "inputFilterSpec": {
                              "____label": "NOT Transition Expression Operator Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "not": {
                                  "____accept": "jsObject"
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                            "inputTypeVDID": "KhdBS4FFA46JYJ246QpDXQ",
                            "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "MXgNRHS4xJPIEuycBGZEcg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                            "operationName": "Always returns Boolean true unconditionally.",
                            "operationDescription": "Always returns true.",
                            "inputFilterSpec": {
                              "____label": "Always returns Boolean true unconditionally. Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "always": {
                                  "____accept": "jsBoolean",
                                  "____inValueSet": [
                                    true
                                  ]
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                            "inputTypeVDID": "0EB7_Y3i7dHCIqSTVQf8bQ",
                            "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "7hv8ROZTdZP8DZ-c1OtJcg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "oaF3-dXwQkusjD3I2o9-8g",
                            "operationName": "OCD Array Length Equal to Value",
                            "operationDescription": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                            "inputFilterSpec": {
                              "____label": "OCD Array Length Equal to Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "array": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "length": {
                                            "____types": "jsObject",
                                            "equalToValue": {
                                              "____accept": [
                                                "jsNumber",
                                                "jsString"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "1w1jkkL88zPbGh1huUa66A",
                            "inputTypeVDID": "mlQwQiCDl9WT91N9pgC1xw",
                            "outputTypeVIID": "ll5aBQHmBVx07i4pBJMThw",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "ysRpRNo01JMX-6CckQu4cg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "YgABX95wR86GCYrYaDLISA",
                            "operationName": "AND Transition Expression Operator",
                            "operationDescription": "Returns Boolean true iff all suboperations return true.",
                            "inputFilterSpec": {
                              "____label": "AND Transition Expression Operator Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "and": {
                                  "____types": "jsArray",
                                  "operandOperatorVariant": {
                                    "____accept": "jsObject"
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                            "inputTypeVDID": "MQFe-Q8rBS3yhTg_XEijfQ",
                            "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "9pp-RLYcWZMBzcScqI9ncg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "UeLs9PcASwuC7KR190eYhA",
                            "operationName": "OCD Boolean Flag Is Set",
                            "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                            "inputFilterSpec": {
                              "____label": "OCD Boolean Flag Is Set Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isBooleanFlagSet": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                            "inputTypeVDID": "XaY0NmS0bc-9voTNU_w3Qg",
                            "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "6TZgRIRhG5Pp7hGccaaucg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "ggsavKiARsq7rjwn-lxdfA",
                            "operationName": "OCD Namespace Is Greater Than Value",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Greater Than Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceGreaterThanValue": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____accept": [
                                              "jsString",
                                              "jsNumber"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "CF-H4WojwJ7B1YyWvKlnMQ",
                            "inputTypeVDID": "UwNbRc6-xWRCpBUeGgmQyw",
                            "outputTypeVIID": "vevJRLqsD_7D5r52vqsYNg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "smdHROPNg5OrOt6cgbR-cg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "k7THIKKDQMKOac1Rxh9tEQ",
                            "operationName": "OCD Namespace Is Identical To Value",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Identical To Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceIdenticalToValue": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____accept": [
                                              "jsString",
                                              "jsNumber"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "2lapAiv6Y2wX3rSyYd_aXA",
                            "inputTypeVDID": "5ANb-Ne-xWYDpBVecgmQyQ",
                            "outputTypeVIID": "a4e-UB9BqYvz755bPVZ4AA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "aOniRHC3vZMQfSic0uw6cg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "XxX_a1sQS1OlJbWAYfx6tQ",
                            "operationName": "OCD Namespace Is Less Than Value",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Less Than Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceLessThanValue": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____accept": [
                                              "jsString",
                                              "jsNumber"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "SdjtRCNawPzfg3fuyxpeog",
                            "inputTypeVDID": "ZuD2uKtYUmA87dmOt67RFA",
                            "outputTypeVIID": "C3a0V2HEKW7fH5xudFSe2Q",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "l10SRDi7y5NJhX6c2rHccg"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "2w7n6KxdR8mdIliePJesLQ",
                            "operationName": "OCD Compare Values",
                            "operationDescription": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                            "inputFilterSpec": {
                              "____label": "OCD Compare Values Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "compare": {
                                          "____types": "jsObject",
                                          "values": {
                                            "____types": "jsObject",
                                            "a": {
                                              "____label": "Operand A",
                                              "____description": "Operand A for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                              "____types": "jsObject",
                                              "value": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsNull",
                                                  "jsString",
                                                  "jsNumber",
                                                  "jsBoolean"
                                                ]
                                              },
                                              "path": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsString"
                                                ]
                                              }
                                            },
                                            "b": {
                                              "____label": "Operand B",
                                              "____description": "Operand B for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                              "____types": "jsObject",
                                              "value": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsNull",
                                                  "jsString",
                                                  "jsNumber",
                                                  "jsBoolean"
                                                ]
                                              },
                                              "path": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsString"
                                                ]
                                              }
                                            },
                                            "operator": {
                                              "____label": "Comparison Operator",
                                              "____description": "A string enum indicating the comparison operator to use.",
                                              "____accept": "jsString",
                                              "____inValueSet": [
                                                "===",
                                                "==",
                                                "<",
                                                "<=",
                                                ">",
                                                ">="
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "Vd7i-lH1mj84kJrcpYoR9g",
                            "inputTypeVDID": "uRMd8ZlvZzo__yMKw5z4EQ",
                            "outputTypeVIID": "kxjuRwQKX01DJDkjruKvXg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "l0AlRNfnqpMrnUicKoV4cg"
                          }
                        }
                      ]
                    ],
                    "controllerActionSets": [
                      [
                        {
                          "filterDescriptor": {
                            "operationID": "ENIOOasYSdmJj_RXjA__hQ",
                            "operationName": "d2r2/React Client Display Adaptor: Rydrate/Render",
                            "operationDescription": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD.",
                            "inputFilterSpec": {
                              "____label": "d2r2/React Client Display Adaptor: Rydrate/Render Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holistic": {
                                  "____types": "jsObject",
                                  "app": {
                                    "____types": "jsObject",
                                    "client": {
                                      "____types": "jsObject",
                                      "sml": {
                                        "____types": "jsObject",
                                        "actions": {
                                          "____types": "jsObject",
                                          "d2r2ReactClientDisplayAdaptor": {
                                            "____types": "jsObject",
                                            "operation": {
                                              "____accept": "jsString",
                                              "____inValueSet": [
                                                "hydrate",
                                                "render"
                                              ],
                                              "____defaultValue": "render"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "FOgSosceAcgixkQPtRIdcw",
                            "inputTypeVDID": "01WN8r4t-YZWtSW9Ed6Wew",
                            "outputTypeVIID": "b4sB-x0S_Ht89mR-mn0gRw",
                            "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                            "operationVDID": "F0Pqkr6wfTFSt7kwOI_cSA"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                            "operationName": "OCD Boolean Flag Clear",
                            "operationDescription": "Set the Boolean-type OCD namespace specified by path to value false.",
                            "inputFilterSpec": {
                              "____label": "OCD Boolean Flag Clear Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "clearBooleanFlag": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                            "inputTypeVDID": "9JJ61BweTOYI2oOv8eA5CA",
                            "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                            "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                            "operationVDID": "22iakmRA1zHN9xIwaOlSSA"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                            "operationName": "OCD Boolean Flag Set",
                            "operationDescription": "Set the Boolean-type OCD namespace specified by path to value true.",
                            "inputFilterSpec": {
                              "____label": "OCD Boolean Flag Set Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "setBooleanFlag": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                            "inputTypeVDID": "0SvJ9bbCiGczgfkVsCtGVA",
                            "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                            "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                            "operationVDID": "bDl8ksMAjDF7M8sweammSA"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                            "operationName": "OCD Read Namespace Indirect",
                            "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                            "inputFilterSpec": {
                              "____label": "OCD Read Namespace Indirect Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "readNamespaceIndirect": {
                                          "____types": "jsObject",
                                          "path2": {
                                            "____label": "Target Path Namespace Path",
                                            "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____opaque": true
                            },
                            "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                            "inputTypeVDID": "IOgj_FaArQ5ZA_veH88DsA",
                            "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                            "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "operationVDID": "0GfEE_oUuFe552vt_1QUtA"
                          }
                        },
                        {
                          "filterDescriptor": {
                            "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                            "operationName": "Frame Latch: Write",
                            "operationDescription": "Writes the value made observable by frame latch APM instance.",
                            "inputFilterSpec": {
                              "____label": "Frame Latch: Write Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "sml": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "frameLatch": {
                                        "____types": "jsObject",
                                        "write": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____label": "Frame Latch Bound Namespace Path",
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____label": "Write Value",
                                            "____opaque": true
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____label": "Write Frame Latch Result",
                              "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                              "____opaque": true
                            },
                            "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                            "inputTypeVDID": "ReMEuyXFT06FkJ32X6ozxw",
                            "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                            "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                            "operationVDID": "E8lO-IQf-KdhQed3bzIySw"
                          }
                        }
                      ]
                    ]
                  }
                },
                "actionRequest": []
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "54MiSgQdSiukMX4fIZJimg": {
                "fzuITg9BQbyV7jNv39Gv6w": {
                  "opcToJSON": {
                    "id": "fzuITg9BQbyV7jNv39Gv6w",
                    "name": "d2r2/React Client Display Adaptor OPC #1",
                    "description": "Attempt to apply the d2r2/React Client Display Adaptor APM inside of an OPC instance.",
                    "options": {
                      "evaluate": {
                        "maxFrames": 16,
                        "firstEvaluation": "constructor"
                      }
                    },
                    "apmMap": {
                      "IxoJ83u0TXmG7PLUYBvsyg": {
                        "id": "IxoJ83u0TXmG7PLUYBvsyg",
                        "name": "d2r2/React Client Display Adaptor",
                        "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                        "ocdDataSpec": {
                          "____label": "d2r2/React Client Display Adaptor Memory",
                          "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "inputs": {
                            "____label": "Adaptor Inputs",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "ComponentRouter": {
                              "____label": "d2r2 <ComponentRouter/>",
                              "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                              "____accept": [
                                "jsNull",
                                "jsFunction"
                              ],
                              "____defaultValue": null
                            },
                            "DOMElement": {
                              "____label": "d2r2 Target DOM Element",
                              "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                              "____opaque": true,
                              "____defaultValue": null
                            },
                            "clock": {
                              "____label": "React Output Processor Clock",
                              "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "z_mTe02hSWmaM1iRO1pBeA"
                              },
                              "value": {
                                "____label": "Render Command",
                                "____types": [
                                  "jsNull",
                                  "jsObject"
                                ],
                                "____defaultValue": null,
                                "options": {
                                  "____types": "jsObject",
                                  "____defaultValue": {},
                                  "rehydrate": {
                                    "____types": "jsBoolean",
                                    "____defaultValue": false
                                  }
                                },
                                "pathRenderContext": {
                                  "____label": "Render Context OCD Path",
                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                  "____accept": "jsString"
                                },
                                "pathRenderData": {
                                  "____label": "Render Data OCD Path",
                                  "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                  "____accept": "jsString"
                                }
                              }
                            }
                          },
                          "private": {
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "renderCount": {
                              "____accept": "jsNumber",
                              "____defaultValue": -1
                            },
                            "renderPending": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            }
                          }
                        },
                        "steps": {
                          "uninitialized": {
                            "description": "Default APM process step.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "wait_invariants"
                              }
                            ]
                          },
                          "wait_invariants": {
                            "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "and": [
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.inputs.ComponentRouter"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.inputs.DOMElement"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  ]
                                },
                                "nextStep": "wait_inputs"
                              }
                            ]
                          },
                          "wait_inputs": {
                            "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.clock.value"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nextStep": "initialized"
                              }
                            ]
                          },
                          "initialized": {
                            "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.clock.value.options.rehydrate"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nextStep": "rehydrate"
                              },
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "render"
                              }
                            ]
                          },
                          "rehydrate": {
                            "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                            "actions": {
                              "enter": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "ocd": {
                                          "setBooleanFlag": {
                                            "path": "#.private.renderPending"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holistic": {
                                    "app": {
                                      "client": {
                                        "sml": {
                                          "actions": {
                                            "d2r2ReactClientDisplayAdaptor": {
                                              "operation": "hydrate"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "rendering"
                              }
                            ]
                          },
                          "render": {
                            "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                            "actions": {
                              "enter": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "ocd": {
                                          "setBooleanFlag": {
                                            "path": "#.private.renderPending"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holistic": {
                                    "app": {
                                      "client": {
                                        "sml": {
                                          "actions": {
                                            "d2r2ReactClientDisplayAdaptor": {
                                              "operation": "render"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "rendering"
                              }
                            ]
                          },
                          "rendering": {
                            "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "not": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.private.renderPending"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nextStep": "ready"
                              }
                            ]
                          },
                          "ready": {
                            "description": "Waiting for next clock signal to re-render client application view.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "opmi": {
                                          "atStep": {
                                            "path": "#.inputs.clock",
                                            "step": "updated"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nextStep": "render"
                              }
                            ]
                          }
                        }
                      },
                      "z_mTe02hSWmaM1iRO1pBeA": {
                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                        "name": "Abstract Frame Latch",
                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                        "ocdDataSpec": {
                          "____label": "Abstract Frame Latch",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "clock": {
                            "____accept": "jsBoolean",
                            "____defaultValue": false
                          }
                        },
                        "steps": {
                          "uninitialized": {
                            "description": "Default starting process step.",
                            "actions": {
                              "enter": [],
                              "exit": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "ocd": {
                                          "setBooleanFlag": {
                                            "path": "#.clock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "updated"
                              }
                            ]
                          },
                          "updated": {
                            "description": "The value managed by the frame latch has been written.",
                            "actions": {
                              "enter": [],
                              "exit": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "ocd": {
                                          "clearBooleanFlag": {
                                            "path": "#.clock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "waiting"
                              }
                            ]
                          },
                          "waiting": {
                            "description": "Frame latch value has not changed since last signalled update.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isBooleanFlagSet": {
                                            "path": "#.clock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nextStep": "updated"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "opmiSpecPaths": [
                      {
                        "specPath": "~.d2r2ReactClientOutputProcessor",
                        "opmiRef": {
                          "id": "IxoJ83u0TXmG7PLUYBvsyg",
                          "name": "d2r2/React Client Display Adaptor",
                          "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                          "ocdDataSpec": {
                            "____label": "d2r2/React Client Display Adaptor Memory",
                            "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "inputs": {
                              "____label": "Adaptor Inputs",
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "ComponentRouter": {
                                "____label": "d2r2 <ComponentRouter/>",
                                "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                "____accept": [
                                  "jsNull",
                                  "jsFunction"
                                ],
                                "____defaultValue": null
                              },
                              "DOMElement": {
                                "____label": "d2r2 Target DOM Element",
                                "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                "____opaque": true,
                                "____defaultValue": null
                              },
                              "clock": {
                                "____label": "React Output Processor Clock",
                                "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                "____types": "jsObject",
                                "____appdsl": {
                                  "apm": "z_mTe02hSWmaM1iRO1pBeA"
                                },
                                "value": {
                                  "____label": "Render Command",
                                  "____types": [
                                    "jsNull",
                                    "jsObject"
                                  ],
                                  "____defaultValue": null,
                                  "options": {
                                    "____types": "jsObject",
                                    "____defaultValue": {},
                                    "rehydrate": {
                                      "____types": "jsBoolean",
                                      "____defaultValue": false
                                    }
                                  },
                                  "pathRenderContext": {
                                    "____label": "Render Context OCD Path",
                                    "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                    "____accept": "jsString"
                                  },
                                  "pathRenderData": {
                                    "____label": "Render Data OCD Path",
                                    "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                    "____accept": "jsString"
                                  }
                                }
                              }
                            },
                            "private": {
                              "____types": "jsObject",
                              "____defaultValue": {},
                              "renderCount": {
                                "____accept": "jsNumber",
                                "____defaultValue": -1
                              },
                              "renderPending": {
                                "____accept": "jsBoolean",
                                "____defaultValue": false
                              }
                            }
                          },
                          "steps": {
                            "uninitialized": {
                              "description": "Default APM process step.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "wait_invariants"
                                }
                              ]
                            },
                            "wait_invariants": {
                              "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "and": [
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.ComponentRouter"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      {
                                        "holarchy": {
                                          "sml": {
                                            "operators": {
                                              "ocd": {
                                                "isNamespaceTruthy": {
                                                  "path": "#.inputs.DOMElement"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "nextStep": "wait_inputs"
                                }
                              ]
                            },
                            "wait_inputs": {
                              "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.inputs.clock.value"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "initialized"
                                }
                              ]
                            },
                            "initialized": {
                              "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isNamespaceTruthy": {
                                              "path": "#.inputs.clock.value.options.rehydrate"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "rehydrate"
                                },
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "render"
                                }
                              ]
                            },
                            "rehydrate": {
                              "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                              "actions": {
                                "enter": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.private.renderPending"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "holistic": {
                                      "app": {
                                        "client": {
                                          "sml": {
                                            "actions": {
                                              "d2r2ReactClientDisplayAdaptor": {
                                                "operation": "hydrate"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "rendering"
                                }
                              ]
                            },
                            "render": {
                              "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                              "actions": {
                                "enter": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.private.renderPending"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "holistic": {
                                      "app": {
                                        "client": {
                                          "sml": {
                                            "actions": {
                                              "d2r2ReactClientDisplayAdaptor": {
                                                "operation": "render"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "rendering"
                                }
                              ]
                            },
                            "rendering": {
                              "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "not": {
                                      "holarchy": {
                                        "sml": {
                                          "operators": {
                                            "ocd": {
                                              "isNamespaceTruthy": {
                                                "path": "#.private.renderPending"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "ready"
                                }
                              ]
                            },
                            "ready": {
                              "description": "Waiting for next clock signal to re-render client application view.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "opmi": {
                                            "atStep": {
                                              "path": "#.inputs.clock",
                                              "step": "updated"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "render"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                        "opmiRef": {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "name": "Abstract Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                          "ocdDataSpec": {
                            "____label": "Abstract Frame Latch",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            }
                          },
                          "steps": {
                            "uninitialized": {
                              "description": "Default starting process step.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            },
                            "updated": {
                              "description": "The value managed by the frame latch has been written.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "clearBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "waiting"
                                }
                              ]
                            },
                            "waiting": {
                              "description": "Frame latch value has not changed since last signalled update.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isBooleanFlagSet": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            }
                          }
                        }
                      }
                    ],
                    "ocdTemplateSpec": {
                      "____types": "jsObject",
                      "d2r2ReactClientOutputProcessor": {
                        "____types": "jsObject",
                        "____appdsl": {
                          "apm": "IxoJ83u0TXmG7PLUYBvsyg"
                        }
                      }
                    },
                    "ocdRuntimeSpec": {
                      "____label": "OPC [fzuITg9BQbyV7jNv39Gv6w::d2r2/React Client Display Adaptor OPC #1] Observable Controller Data Store",
                      "____description": "OPC [fzuITg9BQbyV7jNv39Gv6w::d2r2/React Client Display Adaptor OPC #1] system process runtime state data managed by OPC instance.",
                      "____types": "jsObject",
                      "____defaultValue": {},
                      "d2r2ReactClientOutputProcessor": {
                        "____types": "jsObject",
                        "____appdsl": {
                          "apm": "IxoJ83u0TXmG7PLUYBvsyg"
                        },
                        "____label": "d2r2/React Client Display Adaptor Memory",
                        "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                        "____defaultValue": {},
                        "inputs": {
                          "____label": "Adaptor Inputs",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "ComponentRouter": {
                            "____label": "d2r2 <ComponentRouter/>",
                            "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                            "____accept": [
                              "jsNull",
                              "jsFunction"
                            ],
                            "____defaultValue": null
                          },
                          "DOMElement": {
                            "____label": "d2r2 Target DOM Element",
                            "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                            "____opaque": true,
                            "____defaultValue": null
                          },
                          "clock": {
                            "____label": "Abstract Frame Latch",
                            "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                            "____types": "jsObject",
                            "____appdsl": {
                              "apm": "z_mTe02hSWmaM1iRO1pBeA"
                            },
                            "value": {
                              "____label": "Render Command",
                              "____types": [
                                "jsNull",
                                "jsObject"
                              ],
                              "____defaultValue": null,
                              "options": {
                                "____types": "jsObject",
                                "____defaultValue": {},
                                "rehydrate": {
                                  "____types": "jsBoolean",
                                  "____defaultValue": false
                                }
                              },
                              "pathRenderContext": {
                                "____label": "Render Context OCD Path",
                                "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                "____accept": "jsString"
                              },
                              "pathRenderData": {
                                "____label": "Render Data OCD Path",
                                "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                "____accept": "jsString"
                              }
                            },
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            },
                            "__apmiStep": {
                              "____accept": "jsString",
                              "____defaultValue": "uninitialized"
                            }
                          }
                        },
                        "private": {
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "renderCount": {
                            "____accept": "jsNumber",
                            "____defaultValue": -1
                          },
                          "renderPending": {
                            "____accept": "jsBoolean",
                            "____defaultValue": false
                          }
                        },
                        "__apmiStep": {
                          "____accept": "jsString",
                          "____defaultValue": "uninitialized"
                        }
                      }
                    },
                    "ocdi": {
                      "d2r2ReactClientOutputProcessor": {
                        "inputs": {
                          "ComponentRouter": null,
                          "DOMElement": null,
                          "clock": {
                            "value": null,
                            "clock": false,
                            "__apmiStep": "waiting"
                          }
                        },
                        "private": {
                          "renderCount": -1,
                          "renderPending": false
                        },
                        "__apmiStep": "wait_invariants"
                      }
                    },
                    "transitionDispatcher": {
                      "filterDescriptor": {
                        "operationID": "6gxy99IyGvirfEV84oidQA",
                        "operationName": "Discriminator Filter",
                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                        "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                      },
                      "supportedFilters": [
                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                        "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                        "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                        "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                        "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                        "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                        "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                      ],
                      "options": {
                        "action": "routeRequest"
                      }
                    },
                    "transitionDispatcherFilterMap": {
                      "9tNY7o5GTUGH_xda2GhP-w": {
                        "filterDescriptor": {
                          "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                          "operationName": "Cell In Step Expression Operator",
                          "operationDescription": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                          "inputFilterSpec": {
                            "____label": "Cell In Step Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "cell": {
                                      "____types": "jsObject",
                                      "atStep": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "step": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                          "inputTypeVDID": "SK6JWEwoYvtcbTG_ft3mbw",
                          "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "wnDHRFa0dZO6z36ctJqXcg"
                        }
                      },
                      "kD1PcgqYQlm7fJatNG2ZsA": {
                        "filterDescriptor": {
                          "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                          "operationName": "OCD Namespace Is Truthy",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Truthy Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceTruthy": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                          "inputTypeVDID": "IqY0bMK0bTrZvoSc7_w39Q",
                          "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "vo9QROLBZZP3NSGc3J1Fcg"
                        }
                      },
                      "0JIva4IFSm6Xm7i38g8uUA": {
                        "filterDescriptor": {
                          "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                          "operationName": "OR Transition Expression Operator",
                          "operationDescription": "Returns Boolean true iff any suboperations return true.",
                          "inputFilterSpec": {
                            "____label": "OR Transition Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "or": {
                                "____types": "jsArray",
                                "operandOperatorVariant": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                          "inputTypeVDID": "0Xe392MJsGr0KO6YF3c80A",
                          "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "4ImARIUqM5NmuBqcOBs-cg"
                        }
                      },
                      "TLSHkl73SO-utuzM7dyN2g": {
                        "filterDescriptor": {
                          "operationID": "TLSHkl73SO-utuzM7dyN2g",
                          "operationName": "NOT Transition Expression Operator",
                          "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                          "inputFilterSpec": {
                            "____label": "NOT Transition Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "not": {
                                "____accept": "jsObject"
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                          "inputTypeVDID": "KhdBS4FFA46JYJ246QpDXQ",
                          "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "MXgNRHS4xJPIEuycBGZEcg"
                        }
                      },
                      "e89cwnP4Qd6MocAhzdOJgw": {
                        "filterDescriptor": {
                          "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                          "operationName": "Always returns Boolean true unconditionally.",
                          "operationDescription": "Always returns true.",
                          "inputFilterSpec": {
                            "____label": "Always returns Boolean true unconditionally. Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "always": {
                                "____accept": "jsBoolean",
                                "____inValueSet": [
                                  true
                                ]
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                          "inputTypeVDID": "0EB7_Y3i7dHCIqSTVQf8bQ",
                          "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "7hv8ROZTdZP8DZ-c1OtJcg"
                        }
                      },
                      "oaF3-dXwQkusjD3I2o9-8g": {
                        "filterDescriptor": {
                          "operationID": "oaF3-dXwQkusjD3I2o9-8g",
                          "operationName": "OCD Array Length Equal to Value",
                          "operationDescription": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                          "inputFilterSpec": {
                            "____label": "OCD Array Length Equal to Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "array": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "length": {
                                          "____types": "jsObject",
                                          "equalToValue": {
                                            "____accept": [
                                              "jsNumber",
                                              "jsString"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "1w1jkkL88zPbGh1huUa66A",
                          "inputTypeVDID": "mlQwQiCDl9WT91N9pgC1xw",
                          "outputTypeVIID": "ll5aBQHmBVx07i4pBJMThw",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "ysRpRNo01JMX-6CckQu4cg"
                        }
                      },
                      "YgABX95wR86GCYrYaDLISA": {
                        "filterDescriptor": {
                          "operationID": "YgABX95wR86GCYrYaDLISA",
                          "operationName": "AND Transition Expression Operator",
                          "operationDescription": "Returns Boolean true iff all suboperations return true.",
                          "inputFilterSpec": {
                            "____label": "AND Transition Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "and": {
                                "____types": "jsArray",
                                "operandOperatorVariant": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                          "inputTypeVDID": "MQFe-Q8rBS3yhTg_XEijfQ",
                          "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "9pp-RLYcWZMBzcScqI9ncg"
                        }
                      },
                      "UeLs9PcASwuC7KR190eYhA": {
                        "filterDescriptor": {
                          "operationID": "UeLs9PcASwuC7KR190eYhA",
                          "operationName": "OCD Boolean Flag Is Set",
                          "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Is Set Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isBooleanFlagSet": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                          "inputTypeVDID": "XaY0NmS0bc-9voTNU_w3Qg",
                          "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "6TZgRIRhG5Pp7hGccaaucg"
                        }
                      },
                      "ggsavKiARsq7rjwn-lxdfA": {
                        "filterDescriptor": {
                          "operationID": "ggsavKiARsq7rjwn-lxdfA",
                          "operationName": "OCD Namespace Is Greater Than Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Greater Than Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceGreaterThanValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "CF-H4WojwJ7B1YyWvKlnMQ",
                          "inputTypeVDID": "UwNbRc6-xWRCpBUeGgmQyw",
                          "outputTypeVIID": "vevJRLqsD_7D5r52vqsYNg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "smdHROPNg5OrOt6cgbR-cg"
                        }
                      },
                      "k7THIKKDQMKOac1Rxh9tEQ": {
                        "filterDescriptor": {
                          "operationID": "k7THIKKDQMKOac1Rxh9tEQ",
                          "operationName": "OCD Namespace Is Identical To Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Identical To Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceIdenticalToValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "2lapAiv6Y2wX3rSyYd_aXA",
                          "inputTypeVDID": "5ANb-Ne-xWYDpBVecgmQyQ",
                          "outputTypeVIID": "a4e-UB9BqYvz755bPVZ4AA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "aOniRHC3vZMQfSic0uw6cg"
                        }
                      },
                      "XxX_a1sQS1OlJbWAYfx6tQ": {
                        "filterDescriptor": {
                          "operationID": "XxX_a1sQS1OlJbWAYfx6tQ",
                          "operationName": "OCD Namespace Is Less Than Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Less Than Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceLessThanValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "SdjtRCNawPzfg3fuyxpeog",
                          "inputTypeVDID": "ZuD2uKtYUmA87dmOt67RFA",
                          "outputTypeVIID": "C3a0V2HEKW7fH5xudFSe2Q",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "l10SRDi7y5NJhX6c2rHccg"
                        }
                      },
                      "2w7n6KxdR8mdIliePJesLQ": {
                        "filterDescriptor": {
                          "operationID": "2w7n6KxdR8mdIliePJesLQ",
                          "operationName": "OCD Compare Values",
                          "operationDescription": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                          "inputFilterSpec": {
                            "____label": "OCD Compare Values Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "compare": {
                                        "____types": "jsObject",
                                        "values": {
                                          "____types": "jsObject",
                                          "a": {
                                            "____label": "Operand A",
                                            "____description": "Operand A for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                            "____types": "jsObject",
                                            "value": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsNull",
                                                "jsString",
                                                "jsNumber",
                                                "jsBoolean"
                                              ]
                                            },
                                            "path": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsString"
                                              ]
                                            }
                                          },
                                          "b": {
                                            "____label": "Operand B",
                                            "____description": "Operand B for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                            "____types": "jsObject",
                                            "value": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsNull",
                                                "jsString",
                                                "jsNumber",
                                                "jsBoolean"
                                              ]
                                            },
                                            "path": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsString"
                                              ]
                                            }
                                          },
                                          "operator": {
                                            "____label": "Comparison Operator",
                                            "____description": "A string enum indicating the comparison operator to use.",
                                            "____accept": "jsString",
                                            "____inValueSet": [
                                              "===",
                                              "==",
                                              "<",
                                              "<=",
                                              ">",
                                              ">="
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "Vd7i-lH1mj84kJrcpYoR9g",
                          "inputTypeVDID": "uRMd8ZlvZzo__yMKw5z4EQ",
                          "outputTypeVIID": "kxjuRwQKX01DJDkjruKvXg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "l0AlRNfnqpMrnUicKoV4cg"
                        }
                      }
                    },
                    "actionDispatcher": {
                      "filterDescriptor": {
                        "operationID": "-HkKCH781L6Dpbs9yepB2w",
                        "operationName": "Discriminator Filter",
                        "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                        "inputTypeVIID": "ssY6OysuGBznaDVF-A5LGA",
                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "outputTypeVIID": "-qKU7D7u0yJfYoMiyNECIg",
                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "operationVDID": "jWH0EwUZNVf3KI7t1HIUtA"
                      },
                      "supportedFilters": [
                        "[5rFEDGLYRSiZCeChMnkCHQ::OCD Boolean Flag Set]",
                        "[ENIOOasYSdmJj_RXjA__hQ::d2r2/React Client Display Adaptor: Rydrate/Render]",
                        "[KX0V_aQ3RzG01tzBS24MGw::OPC Intrinsic NOOP Action]",
                        "[S1GqYjTtSQazSxkIL9vtpA::OPC Intrinsic Status Action]",
                        "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                        "[_yxWfFLnTqqN-UxRdd7W5w::OCD Boolean Flag Clear]",
                        "[iyvk_9vhRn2qvrjOes5v7Q::Frame Latch: Write]"
                      ],
                      "options": {
                        "action": "getFilter"
                      }
                    },
                    "actionDispatcherFilterMap": {
                      "ENIOOasYSdmJj_RXjA__hQ": {
                        "filterDescriptor": {
                          "operationID": "ENIOOasYSdmJj_RXjA__hQ",
                          "operationName": "d2r2/React Client Display Adaptor: Rydrate/Render",
                          "operationDescription": "Rehydrate and/or render/re-render client application view via d2r2/React transport using context and render data obtained from specified input paths in the OCD.",
                          "inputFilterSpec": {
                            "____label": "d2r2/React Client Display Adaptor: Rydrate/Render Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holistic": {
                                "____types": "jsObject",
                                "app": {
                                  "____types": "jsObject",
                                  "client": {
                                    "____types": "jsObject",
                                    "sml": {
                                      "____types": "jsObject",
                                      "actions": {
                                        "____types": "jsObject",
                                        "d2r2ReactClientDisplayAdaptor": {
                                          "____types": "jsObject",
                                          "operation": {
                                            "____accept": "jsString",
                                            "____inValueSet": [
                                              "hydrate",
                                              "render"
                                            ],
                                            "____defaultValue": "render"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "FOgSosceAcgixkQPtRIdcw",
                          "inputTypeVDID": "01WN8r4t-YZWtSW9Ed6Wew",
                          "outputTypeVIID": "b4sB-x0S_Ht89mR-mn0gRw",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "F0Pqkr6wfTFSt7kwOI_cSA"
                        }
                      },
                      "_yxWfFLnTqqN-UxRdd7W5w": {
                        "filterDescriptor": {
                          "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                          "operationName": "OCD Boolean Flag Clear",
                          "operationDescription": "Set the Boolean-type OCD namespace specified by path to value false.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Clear Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "clearBooleanFlag": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                          "inputTypeVDID": "9JJ61BweTOYI2oOv8eA5CA",
                          "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "22iakmRA1zHN9xIwaOlSSA"
                        }
                      },
                      "5rFEDGLYRSiZCeChMnkCHQ": {
                        "filterDescriptor": {
                          "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                          "operationName": "OCD Boolean Flag Set",
                          "operationDescription": "Set the Boolean-type OCD namespace specified by path to value true.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Set Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "setBooleanFlag": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                          "inputTypeVDID": "0SvJ9bbCiGczgfkVsCtGVA",
                          "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "bDl8ksMAjDF7M8sweammSA"
                        }
                      },
                      "Ve_kEFkGSMSgOqUWu9Yo_w": {
                        "filterDescriptor": {
                          "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                          "operationName": "OCD Read Namespace Indirect",
                          "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                          "inputFilterSpec": {
                            "____label": "OCD Read Namespace Indirect Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "readNamespaceIndirect": {
                                        "____types": "jsObject",
                                        "path2": {
                                          "____label": "Target Path Namespace Path",
                                          "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                          "inputTypeVDID": "IOgj_FaArQ5ZA_veH88DsA",
                          "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "0GfEE_oUuFe552vt_1QUtA"
                        }
                      },
                      "iyvk_9vhRn2qvrjOes5v7Q": {
                        "filterDescriptor": {
                          "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                          "operationName": "Frame Latch: Write",
                          "operationDescription": "Writes the value made observable by frame latch APM instance.",
                          "inputFilterSpec": {
                            "____label": "Frame Latch: Write Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "frameLatch": {
                                      "____types": "jsObject",
                                      "write": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____label": "Frame Latch Bound Namespace Path",
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____label": "Write Value",
                                          "____opaque": true
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____label": "Write Frame Latch Result",
                            "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                            "____opaque": true
                          },
                          "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                          "inputTypeVDID": "ReMEuyXFT06FkJ32X6ozxw",
                          "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                          "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                          "operationVDID": "E8lO-IQf-KdhQed3bzIySw"
                        }
                      },
                      "KX0V_aQ3RzG01tzBS24MGw": {
                        "filterDescriptor": {
                          "operationID": "KX0V_aQ3RzG01tzBS24MGw",
                          "operationName": "OPC Intrinsic NOOP Action",
                          "operationDescription": "OPC-intrinsic performs no operation (noop). When invoked via OPC.act, the effect is to perform no read/write operations on OPC-instanced shared memory. And, then perform an evaluation.",
                          "inputFilterSpec": {
                            "____label": "OPC Intrinsic NOOP Action Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "opc": {
                                  "____types": "jsObject",
                                  "noop": {
                                    "____accept": "jsBoolean",
                                    "____inValueSet": [
                                      true
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "txJFSr26_WFausq9BG5NZg",
                          "inputTypeVDID": "BiObVoNbI4_uMMaTBVkFXQ",
                          "outputTypeVIID": "kuQ7tcKRU28cS2Qj0GX17A",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "x0rQE0TkE1dfHMftLnWXtA"
                        }
                      },
                      "S1GqYjTtSQazSxkIL9vtpA": {
                        "filterDescriptor": {
                          "operationID": "S1GqYjTtSQazSxkIL9vtpA",
                          "operationName": "OPC Intrinsic Status Action",
                          "operationDescription": "OPC-intrinsic performs a retrieval of transitive OPC instance status.",
                          "inputFilterSpec": {
                            "____label": "OPC Intrinsic Status Action Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____label": "APM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "opc": {
                                  "____types": "jsObject",
                                  "status": {
                                    "____accept": "jsBoolean",
                                    "____inValueSet": [
                                      true
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "vncGN9bjl9Mmy3r-EUnmKg",
                          "inputTypeVDID": "es2e3G-BC0wtoR59QSPlgg",
                          "outputTypeVIID": "A0mnQJBJD4gdX6rrM6Txtw",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "LolDE0qGUVe0PlPtvVfktA"
                        }
                      }
                    },
                    "opcActorStack": [],
                    "evalCount": 1,
                    "lastEvalResponse": {
                      "error": null,
                      "result": {
                        "evalNumber": 0,
                        "summary": {
                          "counts": {
                            "bindings": 6,
                            "frames": 3,
                            "errors": 0,
                            "transitions": 3
                          }
                        },
                        "evalFrames": [
                          {
                            "summary": {
                              "counts": {
                                "bindings": 2,
                                "transitions": 2,
                                "errors": 0
                              },
                              "reports": {
                                "transitions": [
                                  "Qf5B_mFgYWCyRbJFtNW01Q",
                                  "6KIVQm2l_Kkuh0qvYBQ-nw"
                                ],
                                "errors": []
                              }
                            },
                            "bindings": {
                              "Qf5B_mFgYWCyRbJFtNW01Q": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor",
                                    "specPath": "~.d2r2ReactClientOutputProcessor"
                                  },
                                  "initialStep": "uninitialized",
                                  "apmRef": {
                                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                    "name": "d2r2/React Client Display Adaptor",
                                    "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                    "ocdDataSpec": {
                                      "____label": "d2r2/React Client Display Adaptor Memory",
                                      "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "inputs": {
                                        "____label": "Adaptor Inputs",
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "ComponentRouter": {
                                          "____label": "d2r2 <ComponentRouter/>",
                                          "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                          "____accept": [
                                            "jsNull",
                                            "jsFunction"
                                          ],
                                          "____defaultValue": null
                                        },
                                        "DOMElement": {
                                          "____label": "d2r2 Target DOM Element",
                                          "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                          "____opaque": true,
                                          "____defaultValue": null
                                        },
                                        "clock": {
                                          "____label": "React Output Processor Clock",
                                          "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                          "____types": "jsObject",
                                          "____appdsl": {
                                            "apm": "z_mTe02hSWmaM1iRO1pBeA"
                                          },
                                          "value": {
                                            "____label": "Render Command",
                                            "____types": [
                                              "jsNull",
                                              "jsObject"
                                            ],
                                            "____defaultValue": null,
                                            "options": {
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "rehydrate": {
                                                "____types": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "pathRenderContext": {
                                              "____label": "Render Context OCD Path",
                                              "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                              "____accept": "jsString"
                                            },
                                            "pathRenderData": {
                                              "____label": "Render Data OCD Path",
                                              "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      },
                                      "private": {
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "renderCount": {
                                          "____accept": "jsNumber",
                                          "____defaultValue": -1
                                        },
                                        "renderPending": {
                                          "____accept": "jsBoolean",
                                          "____defaultValue": false
                                        }
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default APM process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "wait_invariants"
                                          }
                                        ]
                                      },
                                      "wait_invariants": {
                                        "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "and": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isNamespaceTruthy": {
                                                            "path": "#.inputs.ComponentRouter"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isNamespaceTruthy": {
                                                            "path": "#.inputs.DOMElement"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "nextStep": "wait_inputs"
                                          }
                                        ]
                                      },
                                      "wait_inputs": {
                                        "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.clock.value"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "initialized"
                                          }
                                        ]
                                      },
                                      "initialized": {
                                        "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.clock.value.options.rehydrate"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "rehydrate"
                                          },
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "render"
                                          }
                                        ]
                                      },
                                      "rehydrate": {
                                        "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                                        "actions": {
                                          "enter": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.private.renderPending"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holistic": {
                                                "app": {
                                                  "client": {
                                                    "sml": {
                                                      "actions": {
                                                        "d2r2ReactClientDisplayAdaptor": {
                                                          "operation": "hydrate"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "rendering"
                                          }
                                        ]
                                      },
                                      "render": {
                                        "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                                        "actions": {
                                          "enter": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.private.renderPending"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holistic": {
                                                "app": {
                                                  "client": {
                                                    "sml": {
                                                      "actions": {
                                                        "d2r2ReactClientDisplayAdaptor": {
                                                          "operation": "render"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "rendering"
                                          }
                                        ]
                                      },
                                      "rendering": {
                                        "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "not": {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.private.renderPending"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "ready"
                                          }
                                        ]
                                      },
                                      "ready": {
                                        "description": "Waiting for next clock signal to re-render client application view.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "opmi": {
                                                      "atStep": {
                                                        "path": "#.inputs.clock",
                                                        "step": "updated"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "render"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "wait_invariants",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor",
                                            "ocdi": {
                                              "d2r2ReactClientOutputProcessor": {
                                                "inputs": {
                                                  "ComponentRouter": null,
                                                  "DOMElement": null,
                                                  "clock": {
                                                    "value": null,
                                                    "clock": false,
                                                    "__apmiStep": "waiting"
                                                  }
                                                },
                                                "private": {
                                                  "renderCount": -1,
                                                  "renderPending": false
                                                },
                                                "__apmiStep": "wait_invariants"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "6gxy99IyGvirfEV84oidQA",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "wait_invariants"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              },
                              "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                    "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                  },
                                  "initialStep": "uninitialized",
                                  "apmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "ocdDataSpec": {
                                      "____label": "Abstract Frame Latch",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "clock": {
                                        "____accept": "jsBoolean",
                                        "____defaultValue": false
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default starting process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      },
                                      "updated": {
                                        "description": "The value managed by the frame latch has been written.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "waiting"
                                          }
                                        ]
                                      },
                                      "waiting": {
                                        "description": "Frame latch value has not changed since last signalled update.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isBooleanFlagSet": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "updated",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                            "ocdi": {
                                              "d2r2ReactClientOutputProcessor": {
                                                "inputs": {
                                                  "ComponentRouter": null,
                                                  "DOMElement": null,
                                                  "clock": {
                                                    "value": null,
                                                    "clock": false,
                                                    "__apmiStep": "waiting"
                                                  }
                                                },
                                                "private": {
                                                  "renderCount": -1,
                                                  "renderPending": false
                                                },
                                                "__apmiStep": "wait_invariants"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "6gxy99IyGvirfEV84oidQA",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [
                                      {
                                        "request": {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "setBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null
                                        }
                                      }
                                    ],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "updated"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          },
                          {
                            "summary": {
                              "counts": {
                                "bindings": 2,
                                "transitions": 1,
                                "errors": 0
                              },
                              "reports": {
                                "transitions": [
                                  "6KIVQm2l_Kkuh0qvYBQ-nw"
                                ],
                                "errors": []
                              }
                            },
                            "bindings": {
                              "Qf5B_mFgYWCyRbJFtNW01Q": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor",
                                    "specPath": "~.d2r2ReactClientOutputProcessor"
                                  },
                                  "initialStep": "wait_invariants",
                                  "apmRef": {
                                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                    "name": "d2r2/React Client Display Adaptor",
                                    "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                    "ocdDataSpec": {
                                      "____label": "d2r2/React Client Display Adaptor Memory",
                                      "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "inputs": {
                                        "____label": "Adaptor Inputs",
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "ComponentRouter": {
                                          "____label": "d2r2 <ComponentRouter/>",
                                          "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                          "____accept": [
                                            "jsNull",
                                            "jsFunction"
                                          ],
                                          "____defaultValue": null
                                        },
                                        "DOMElement": {
                                          "____label": "d2r2 Target DOM Element",
                                          "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                          "____opaque": true,
                                          "____defaultValue": null
                                        },
                                        "clock": {
                                          "____label": "React Output Processor Clock",
                                          "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                          "____types": "jsObject",
                                          "____appdsl": {
                                            "apm": "z_mTe02hSWmaM1iRO1pBeA"
                                          },
                                          "value": {
                                            "____label": "Render Command",
                                            "____types": [
                                              "jsNull",
                                              "jsObject"
                                            ],
                                            "____defaultValue": null,
                                            "options": {
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "rehydrate": {
                                                "____types": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "pathRenderContext": {
                                              "____label": "Render Context OCD Path",
                                              "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                              "____accept": "jsString"
                                            },
                                            "pathRenderData": {
                                              "____label": "Render Data OCD Path",
                                              "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      },
                                      "private": {
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "renderCount": {
                                          "____accept": "jsNumber",
                                          "____defaultValue": -1
                                        },
                                        "renderPending": {
                                          "____accept": "jsBoolean",
                                          "____defaultValue": false
                                        }
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default APM process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "wait_invariants"
                                          }
                                        ]
                                      },
                                      "wait_invariants": {
                                        "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "and": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isNamespaceTruthy": {
                                                            "path": "#.inputs.ComponentRouter"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isNamespaceTruthy": {
                                                            "path": "#.inputs.DOMElement"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "nextStep": "wait_inputs"
                                          }
                                        ]
                                      },
                                      "wait_inputs": {
                                        "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.clock.value"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "initialized"
                                          }
                                        ]
                                      },
                                      "initialized": {
                                        "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.clock.value.options.rehydrate"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "rehydrate"
                                          },
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "render"
                                          }
                                        ]
                                      },
                                      "rehydrate": {
                                        "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                                        "actions": {
                                          "enter": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.private.renderPending"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holistic": {
                                                "app": {
                                                  "client": {
                                                    "sml": {
                                                      "actions": {
                                                        "d2r2ReactClientDisplayAdaptor": {
                                                          "operation": "hydrate"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "rendering"
                                          }
                                        ]
                                      },
                                      "render": {
                                        "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                                        "actions": {
                                          "enter": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.private.renderPending"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holistic": {
                                                "app": {
                                                  "client": {
                                                    "sml": {
                                                      "actions": {
                                                        "d2r2ReactClientDisplayAdaptor": {
                                                          "operation": "render"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "rendering"
                                          }
                                        ]
                                      },
                                      "rendering": {
                                        "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "not": {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.private.renderPending"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "ready"
                                          }
                                        ]
                                      },
                                      "ready": {
                                        "description": "Waiting for next clock signal to re-render client application view.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "opmi": {
                                                      "atStep": {
                                                        "path": "#.inputs.clock",
                                                        "step": "updated"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "render"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "noop",
                                  "finishStep": "wait_invariants",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor",
                                            "ocdi": {
                                              "d2r2ReactClientOutputProcessor": {
                                                "inputs": {
                                                  "ComponentRouter": null,
                                                  "DOMElement": null,
                                                  "clock": {
                                                    "value": null,
                                                    "clock": false,
                                                    "__apmiStep": "waiting"
                                                  }
                                                },
                                                "private": {
                                                  "renderCount": -1,
                                                  "renderPending": false
                                                },
                                                "__apmiStep": "wait_invariants"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "6gxy99IyGvirfEV84oidQA",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "and": [
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.ComponentRouter"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.DOMElement"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": false
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              },
                              "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                    "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                  },
                                  "initialStep": "updated",
                                  "apmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "ocdDataSpec": {
                                      "____label": "Abstract Frame Latch",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "clock": {
                                        "____accept": "jsBoolean",
                                        "____defaultValue": false
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default starting process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      },
                                      "updated": {
                                        "description": "The value managed by the frame latch has been written.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "waiting"
                                          }
                                        ]
                                      },
                                      "waiting": {
                                        "description": "Frame latch value has not changed since last signalled update.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isBooleanFlagSet": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "waiting",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                            "ocdi": {
                                              "d2r2ReactClientOutputProcessor": {
                                                "inputs": {
                                                  "ComponentRouter": null,
                                                  "DOMElement": null,
                                                  "clock": {
                                                    "value": null,
                                                    "clock": false,
                                                    "__apmiStep": "waiting"
                                                  }
                                                },
                                                "private": {
                                                  "renderCount": -1,
                                                  "renderPending": false
                                                },
                                                "__apmiStep": "wait_invariants"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "6gxy99IyGvirfEV84oidQA",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [
                                      {
                                        "request": {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "clearBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null
                                        }
                                      }
                                    ],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "waiting"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          },
                          {
                            "summary": {
                              "counts": {
                                "bindings": 2,
                                "transitions": 0,
                                "errors": 0
                              },
                              "reports": {
                                "transitions": [],
                                "errors": []
                              }
                            },
                            "bindings": {
                              "Qf5B_mFgYWCyRbJFtNW01Q": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor",
                                    "specPath": "~.d2r2ReactClientOutputProcessor"
                                  },
                                  "initialStep": "wait_invariants",
                                  "apmRef": {
                                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                                    "name": "d2r2/React Client Display Adaptor",
                                    "description": "Manages the details of initializing and dynamically updating the client application view (DOM display surface) via @encapsule/d2r2 and Facebook React.",
                                    "ocdDataSpec": {
                                      "____label": "d2r2/React Client Display Adaptor Memory",
                                      "____description": "Shared memory definition for the d2r2/React Client Display Adaptor OPM.",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "inputs": {
                                        "____label": "Adaptor Inputs",
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "ComponentRouter": {
                                          "____label": "d2r2 <ComponentRouter/>",
                                          "____description": "A reference to previously-constructed <ComponentRouter/> instance (a React component that implements @encapsule/d2r2 dynamic layout protocol).",
                                          "____accept": [
                                            "jsNull",
                                            "jsFunction"
                                          ],
                                          "____defaultValue": null
                                        },
                                        "DOMElement": {
                                          "____label": "d2r2 Target DOM Element",
                                          "____description": "A reference to the DOM element to be be managed by the d2r2/React Client Display Adaptor (obtained with document.getElementById).",
                                          "____opaque": true,
                                          "____defaultValue": null
                                        },
                                        "clock": {
                                          "____label": "React Output Processor Clock",
                                          "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                                          "____types": "jsObject",
                                          "____appdsl": {
                                            "apm": "z_mTe02hSWmaM1iRO1pBeA"
                                          },
                                          "value": {
                                            "____label": "Render Command",
                                            "____types": [
                                              "jsNull",
                                              "jsObject"
                                            ],
                                            "____defaultValue": null,
                                            "options": {
                                              "____types": "jsObject",
                                              "____defaultValue": {},
                                              "rehydrate": {
                                                "____types": "jsBoolean",
                                                "____defaultValue": false
                                              }
                                            },
                                            "pathRenderContext": {
                                              "____label": "Render Context OCD Path",
                                              "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.",
                                              "____accept": "jsString"
                                            },
                                            "pathRenderData": {
                                              "____label": "Render Data OCD Path",
                                              "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                                              "____accept": "jsString"
                                            }
                                          }
                                        }
                                      },
                                      "private": {
                                        "____types": "jsObject",
                                        "____defaultValue": {},
                                        "renderCount": {
                                          "____accept": "jsNumber",
                                          "____defaultValue": -1
                                        },
                                        "renderPending": {
                                          "____accept": "jsBoolean",
                                          "____defaultValue": false
                                        }
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default APM process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "wait_invariants"
                                          }
                                        ]
                                      },
                                      "wait_invariants": {
                                        "description": "Waiting for d2r2 ComponentRouter instance (how to render), and DOM element (where to render) invariants to be specified.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "and": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isNamespaceTruthy": {
                                                            "path": "#.inputs.ComponentRouter"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isNamespaceTruthy": {
                                                            "path": "#.inputs.DOMElement"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "nextStep": "wait_inputs"
                                          }
                                        ]
                                      },
                                      "wait_inputs": {
                                        "description": "Invariants have been satisfied. Waiting for initial d2d2 ComponentRouter render data context to be specified.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.clock.value"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "initialized"
                                          }
                                        ]
                                      },
                                      "initialized": {
                                        "description": "Preparing for initial render operation. Determining if we rehyrdate server-rendered view. Or, replace it.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isNamespaceTruthy": {
                                                        "path": "#.inputs.clock.value.options.rehydrate"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "rehydrate"
                                          },
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "render"
                                          }
                                        ]
                                      },
                                      "rehydrate": {
                                        "description": "Rehydrating the specified d2r2 ComponentRouter render data context to reconstruct server-rendered d2r2 ComponentRouter render data context in the client application.",
                                        "actions": {
                                          "enter": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.private.renderPending"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holistic": {
                                                "app": {
                                                  "client": {
                                                    "sml": {
                                                      "actions": {
                                                        "d2r2ReactClientDisplayAdaptor": {
                                                          "operation": "hydrate"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "rendering"
                                          }
                                        ]
                                      },
                                      "render": {
                                        "description": "Rendering the specified d2r2 ComponentRouter render data context to refresh layout and client-side React component mountings.",
                                        "actions": {
                                          "enter": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.private.renderPending"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "holistic": {
                                                "app": {
                                                  "client": {
                                                    "sml": {
                                                      "actions": {
                                                        "d2r2ReactClientDisplayAdaptor": {
                                                          "operation": "render"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "rendering"
                                          }
                                        ]
                                      },
                                      "rendering": {
                                        "description": "Rendering the specified d2r2 ComponentRouter render data context. Please wait for the operation to complete.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "not": {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.private.renderPending"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "ready"
                                          }
                                        ]
                                      },
                                      "ready": {
                                        "description": "Waiting for next clock signal to re-render client application view.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "opmi": {
                                                      "atStep": {
                                                        "path": "#.inputs.clock",
                                                        "step": "updated"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "render"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "noop",
                                  "finishStep": "wait_invariants",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor",
                                            "ocdi": {
                                              "d2r2ReactClientOutputProcessor": {
                                                "inputs": {
                                                  "ComponentRouter": null,
                                                  "DOMElement": null,
                                                  "clock": {
                                                    "value": null,
                                                    "clock": false,
                                                    "__apmiStep": "waiting"
                                                  }
                                                },
                                                "private": {
                                                  "renderCount": -1,
                                                  "renderPending": false
                                                },
                                                "__apmiStep": "wait_invariants"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "6gxy99IyGvirfEV84oidQA",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "and": [
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.ComponentRouter"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isNamespaceTruthy": {
                                                          "path": "#.inputs.DOMElement"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": false
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              },
                              "6KIVQm2l_Kkuh0qvYBQ-nw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                    "specPath": "~.d2r2ReactClientOutputProcessor.inputs.clock"
                                  },
                                  "initialStep": "waiting",
                                  "apmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "name": "Abstract Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "ocdDataSpec": {
                                      "____label": "Abstract Frame Latch",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "clock": {
                                        "____accept": "jsBoolean",
                                        "____defaultValue": false
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default starting process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      },
                                      "updated": {
                                        "description": "The value managed by the frame latch has been written.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "waiting"
                                          }
                                        ]
                                      },
                                      "waiting": {
                                        "description": "Frame latch value has not changed since last signalled update.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isBooleanFlagSet": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "noop",
                                  "finishStep": "waiting",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "apmBindingPath": "~.d2r2ReactClientOutputProcessor.inputs.clock",
                                            "ocdi": {
                                              "d2r2ReactClientOutputProcessor": {
                                                "inputs": {
                                                  "ComponentRouter": null,
                                                  "DOMElement": null,
                                                  "clock": {
                                                    "value": null,
                                                    "clock": false,
                                                    "__apmiStep": "waiting"
                                                  }
                                                },
                                                "private": {
                                                  "renderCount": -1,
                                                  "renderPending": false
                                                },
                                                "__apmiStep": "wait_invariants"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "6gxy99IyGvirfEV84oidQA",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "XsfgTAnpkZkCox9G2ulInA",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "e7Os-6dR2zE0P4Iu25RYog",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "z1b0E7qtNVeTG47tMs8UtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::Cell In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": false
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "constructionWarnings": []
                  },
                  "actionEvaluations": []
                }
              }
            }
          }
        }
      }
    }
  }
}
