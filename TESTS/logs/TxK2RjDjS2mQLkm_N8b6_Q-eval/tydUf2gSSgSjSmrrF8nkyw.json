{
  "dosRgxmiR66ongCbJB78ow": {
    "T-BP4MgzyDOa-pr65Zrlmg": {
      "tydUf2gSSgSjSmrrF8nkyw": {
        "harnessRequest": {
          "id": "tydUf2gSSgSjSmrrF8nkyw",
          "name": "CPM Descendant Processes All In Step Test",
          "description": "Tests the CPM descendant processes all in step transition operator.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "CellProcessor": {
                  "constructorRequest": {
                    "id": "tydUf2gSSgSjSmrrF8nkyw",
                    "name": "CPM Descendant Processes All In Step Test",
                    "description": "Tests the CPM descendant processes all in step transition operator.",
                    "cellmodel": {
                      "id": "1jSxHMrqS6i9eDiRvDmfeg",
                      "vdid": "iTfVaQjyQ1c_vaiK2jUWdA",
                      "name": "@encapsule/holarchy CellProcessor Test Model",
                      "description": "A wrapper for other CellModels defined to facilitate testing of the CellProcessor's intrinsic Cell Process Manager cell process operators and actions.",
                      "cmat": {
                        "error": null,
                        "result": {
                          "INDEX_CM": {
                            "type": "INDEX",
                            "1jSxHMrqS6i9eDiRvDmfeg": {
                              "id": "1jSxHMrqS6i9eDiRvDmfeg",
                              "vdid": "iTfVaQjyQ1c_vaiK2jUWdA",
                              "name": "@encapsule/holarchy CellProcessor Test Model",
                              "description": "A wrapper for other CellModels defined to facilitate testing of the CellProcessor's intrinsic Cell Process Manager cell process operators and actions.",
                              "type": "CM",
                              "eu32xBRTSE2-B71HrwPFBg": {
                                "id": "eu32xBRTSE2-B71HrwPFBg",
                                "vdid": "ZQZ4avfuTJrUD4dLCNsIuA",
                                "name": "CPM Ancestor Processes Active Operator Test Model",
                                "description": "A model to test CPM ancestor active operator.",
                                "type": "CM",
                                "hybdu0VoQjWnOFs5vC3Tzw": {
                                  "id": "hybdu0VoQjWnOFs5vC3Tzw",
                                  "vdid": "97hTNPRdepXS0d9grCUGYQ",
                                  "name": "CPM Ancestor Processes Active Operator Test Process",
                                  "description": "A process to test CPM ancestor active operator.",
                                  "type": "APM"
                                }
                              },
                              "wjUvGFxOQu6H3lZeII0cbA": {
                                "id": "wjUvGFxOQu6H3lZeII0cbA",
                                "vdid": "AGfvYhgOAe_FRkxxRUwhzg",
                                "name": "CPM Ancestor Processes All In Step Operator Test Model",
                                "description": "A model to test CPM ancestor processes all in step operator.",
                                "type": "CM",
                                "c09ke74xRza4Q9u2Ly0NIA": {
                                  "id": "c09ke74xRza4Q9u2Ly0NIA",
                                  "vdid": "MgJSs_iIwkrj4LTqlWO6lA",
                                  "name": "CPM Ancestor Processes All In Step Operator Test Process",
                                  "description": "A process to test CPM ancestor all in step operator.",
                                  "type": "APM"
                                }
                              },
                              "4_rZ65rORrOEYJTCl5mOEQ": {
                                "id": "4_rZ65rORrOEYJTCl5mOEQ",
                                "vdid": "WkQbZt48cyo8imLBvuKNGw",
                                "name": "CPM Ancestor Processes Any In Step Operator Test Model",
                                "description": "A model to test CPM ancestor processes any in step operator.",
                                "type": "CM",
                                "we5IUb__Smqwkl4ghRl3Lw": {
                                  "id": "we5IUb__Smqwkl4ghRl3Lw",
                                  "vdid": "yIrcY4PXpWU1Z-U2SKk0aA",
                                  "name": "CPM Ancestor Processes Any In Step Operator Test Process",
                                  "description": "A process to test CPM ancestor processes any in step operator.",
                                  "type": "APM"
                                }
                              },
                              "rIA4ammlRHStLM9zMYuJ9Q": {
                                "id": "rIA4ammlRHStLM9zMYuJ9Q",
                                "vdid": "KfYEZrAYm9d7REhjZD1Ntw",
                                "name": "CPM Child Processes Active Operator Test Model",
                                "description": "A model to test the child processes active operator.",
                                "type": "CM",
                                "LVjhjYUcQXOYcbI_xbepJQ": {
                                  "id": "LVjhjYUcQXOYcbI_xbepJQ",
                                  "vdid": "aatjxaP8ukpyjexhqUqY2w",
                                  "name": "CPM Child Processes Active Operator Test Process",
                                  "description": "Test process",
                                  "type": "APM"
                                },
                                "fUQKrIPcQmingXFEQ4Pt9A": {
                                  "id": "fUQKrIPcQmingXFEQ4Pt9A",
                                  "vdid": "2D79dpQQR6Z7xgEsQTQm8A",
                                  "name": "Dummy Process A Cell Model",
                                  "description": "A simple cell model that carries a regressive APM for testing various CPM actions and operators.",
                                  "type": "CM",
                                  "3E27IH_CQeqBUFsGm4tIIA": {
                                    "id": "3E27IH_CQeqBUFsGm4tIIA",
                                    "vdid": "FMsG1GoYY-Cuotk_yGZl6A",
                                    "name": "Dummy Process A Process",
                                    "description": "Implements a trivial cell process that does nothing.",
                                    "type": "APM"
                                  }
                                },
                                "RyMcv3MpTI-Co1EyVOIvlw": {
                                  "id": "RyMcv3MpTI-Co1EyVOIvlw",
                                  "vdid": "e4QXL6wlpNhG-Wuyl1RwbA",
                                  "name": "Holarchy CML",
                                  "description": "Holarchy Cell Model Library (CML) provides cellular process primitive operations, actions, and cell models for re-use in higher-order cell models.",
                                  "type": "CM",
                                  "c2cq2OE9SiaLKahL3Mk0KA": {
                                    "id": "c2cq2OE9SiaLKahL3Mk0KA",
                                    "vdid": "6-po-sADr7GVFbymhU9U_g",
                                    "name": "Holarchy Base Cell Model",
                                    "description": "A collection of low-level building blocks.",
                                    "type": "CM",
                                    "U5iIpgd8SHCk7pvaciVLTQ": {
                                      "id": "U5iIpgd8SHCk7pvaciVLTQ",
                                      "vdid": "FMmdFMpi2sIxS-Gby5s0NA",
                                      "name": "Holarchy Base Memory Mailbox Flag",
                                      "description": "A primitive cell process that signals (via process step transition) when some actor has put a message in the mailbox namespace.",
                                      "type": "CM",
                                      "z_mTe02hSWmaM1iRO1pBeA": {
                                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                                        "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                        "name": "Abstract Frame Latch",
                                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                        "type": "APM"
                                      },
                                      "iyvk_9vhRn2qvrjOes5v7Q": {
                                        "id": "iyvk_9vhRn2qvrjOes5v7Q",
                                        "vdid": "Mm1h1iJOaeH77h6HYA9wxg",
                                        "name": "Frame Latch: Write",
                                        "description": "Writes the value made observable by frame latch APM instance.",
                                        "type": "ACT"
                                      },
                                      "MDVBKW89TvO9T62Ge7GmNg": {
                                        "id": "MDVBKW89TvO9T62Ge7GmNg",
                                        "vdid": "euUNcasvs_3dms9bB55wFA",
                                        "name": "Holarchy Core",
                                        "description": "Holarchy Core CellLibrary packages standard logic and shared memory cell process step transition operators and action plug-ins that are loaded automatically into every CellProcessor cellular process runtime environment instance.",
                                        "type": "CM",
                                        "orTbEFR_Q-u-qqEqP8OUBA": {
                                          "id": "orTbEFR_Q-u-qqEqP8OUBA",
                                          "vdid": "Vmec8PHtmLyfNYvz7w9X5Q",
                                          "name": "Holarchy Core Cell",
                                          "description": "Shared low-level TransitionOperator and ControllerAction's for interacting with cell processes running inside of an ObservableProcessController instance.",
                                          "type": "CM",
                                          "9tNY7o5GTUGH_xda2GhP-w": {
                                            "id": "9tNY7o5GTUGH_xda2GhP-w",
                                            "vdid": "zmPeG6lSvXidCjr_XyENrQ",
                                            "name": "Cell Process In Step Operator",
                                            "description": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                                            "type": "TOP"
                                          }
                                        },
                                        "RW8Y2O-kRNSv87yXT962wQ": {
                                          "id": "RW8Y2O-kRNSv87yXT962wQ",
                                          "vdid": "xPF9l7Jj3a9CTdMC7UwFxw",
                                          "name": "Holarchy Core Logic",
                                          "description": "A collection of TranitionOperator plug-ins that implement generic logic functions AND, OR, NOT, TRUE.",
                                          "type": "CM",
                                          "YgABX95wR86GCYrYaDLISA": {
                                            "id": "YgABX95wR86GCYrYaDLISA",
                                            "vdid": "5Ebtc8mARWrvCY6U_wzdDA",
                                            "name": "Logical AND",
                                            "description": "Returns Boolean true iff all suboperations return true.",
                                            "type": "TOP"
                                          },
                                          "0JIva4IFSm6Xm7i38g8uUA": {
                                            "id": "0JIva4IFSm6Xm7i38g8uUA",
                                            "vdid": "FAh08f8CZQHnj-Pkilu-rw",
                                            "name": "Logical OR",
                                            "description": "Returns Boolean true iff any suboperations return true.",
                                            "type": "TOP"
                                          },
                                          "TLSHkl73SO-utuzM7dyN2g": {
                                            "id": "TLSHkl73SO-utuzM7dyN2g",
                                            "vdid": "ASh3z9ynLmUqRJElxWHVjQ",
                                            "name": "Logical NOT",
                                            "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                            "type": "TOP"
                                          },
                                          "e89cwnP4Qd6MocAhzdOJgw": {
                                            "id": "e89cwnP4Qd6MocAhzdOJgw",
                                            "vdid": "NmKPVm8o5IAXQE-GgWcCDA",
                                            "name": "Logical TRUE",
                                            "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                                            "type": "TOP"
                                          }
                                        },
                                        "jQxlhOe-RDilxY0sNIierQ": {
                                          "id": "jQxlhOe-RDilxY0sNIierQ",
                                          "vdid": "wqwUJQKiGO8MZMW_LrfiDA",
                                          "name": "Holarchy Core Memory Actions & Operators",
                                          "description": "A collection of TransitionOperator plug-ins that perform logical comparisons operatations on cell processs memory.",
                                          "type": "CM",
                                          "oaF3-dXwQkusjD3I2o9-8g": {
                                            "id": "oaF3-dXwQkusjD3I2o9-8g",
                                            "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                                            "name": "OCD Array Length Equal to Value",
                                            "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                                            "type": "TOP"
                                          },
                                          "2w7n6KxdR8mdIliePJesLQ": {
                                            "id": "2w7n6KxdR8mdIliePJesLQ",
                                            "vdid": "tljozSCr53fX-AmzURPyEg",
                                            "name": "OCD Compare Values",
                                            "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                                            "type": "TOP"
                                          },
                                          "UeLs9PcASwuC7KR190eYhA": {
                                            "id": "UeLs9PcASwuC7KR190eYhA",
                                            "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                                            "name": "OCD Boolean Flag Is Set",
                                            "description": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                            "type": "TOP"
                                          },
                                          "ggsavKiARsq7rjwn-lxdfA": {
                                            "id": "ggsavKiARsq7rjwn-lxdfA",
                                            "vdid": "zo88N4oEjk34PxGoXmyTUA",
                                            "name": "OCD Namespace Is Greater Than Value",
                                            "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                                            "type": "TOP"
                                          },
                                          "k7THIKKDQMKOac1Rxh9tEQ": {
                                            "id": "k7THIKKDQMKOac1Rxh9tEQ",
                                            "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                                            "name": "OCD Namespace Is Identical To Value",
                                            "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                                            "type": "TOP"
                                          },
                                          "XxX_a1sQS1OlJbWAYfx6tQ": {
                                            "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                                            "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                                            "name": "OCD Namespace Is Less Than Value",
                                            "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                                            "type": "TOP"
                                          },
                                          "kD1PcgqYQlm7fJatNG2ZsA": {
                                            "id": "kD1PcgqYQlm7fJatNG2ZsA",
                                            "vdid": "cNihhVrtDPl_5j7cSfcRug",
                                            "name": "OCD Namespace Is Truthy",
                                            "description": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                            "type": "TOP"
                                          },
                                          "Ve_kEFkGSMSgOqUWu9Yo_w": {
                                            "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                            "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                                            "name": "OCD Read Namespace Indirect",
                                            "description": "Reads and returns the value of OCD namespace via path indirection.",
                                            "type": "ACT"
                                          },
                                          "5rFEDGLYRSiZCeChMnkCHQ": {
                                            "id": "5rFEDGLYRSiZCeChMnkCHQ",
                                            "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                                            "name": "OCD Boolean Flag Set",
                                            "description": "Set the Boolean-type OCD namespace specified by path to value true.",
                                            "type": "ACT"
                                          },
                                          "_yxWfFLnTqqN-UxRdd7W5w": {
                                            "id": "_yxWfFLnTqqN-UxRdd7W5w",
                                            "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                                            "name": "OCD Boolean Flag Clear",
                                            "description": "Set the Boolean-type OCD namespace specified by path to value false.",
                                            "type": "ACT"
                                          },
                                          "aXju3wSBQnufe0r51Y04wg": {
                                            "id": "aXju3wSBQnufe0r51Y04wg",
                                            "vdid": "1cu2zJ4iw9XB4K-RljVPPQ",
                                            "name": "Write Sub-Action Response",
                                            "description": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace.",
                                            "type": "ACT"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "OfLkkeNgQDm3xLb7TJqNRg": {
                                "id": "OfLkkeNgQDm3xLb7TJqNRg",
                                "vdid": "LQA3vOpc6DbCjqLDvUiRqA",
                                "name": "CPM Child Processes All In Step Operator Test Model",
                                "description": "A model to test the CPM child processes all in step operator.",
                                "type": "CM",
                                "vjz7U4NWRE2_UlAvAjmS6g": {
                                  "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                  "vdid": "DGGXKvwjhNfvEKBqyBHL7Q",
                                  "name": "CPM Child Processes All In Step Operator Test Process",
                                  "description": "A model to test the CPM child processes all in step operator.",
                                  "type": "APM"
                                }
                              },
                              "C_wxJlAoTHW_7TWmpCXL2g": {
                                "id": "C_wxJlAoTHW_7TWmpCXL2g",
                                "vdid": "2DTG8_XM1SffT66QZmvSRQ",
                                "name": "CPM Child Processes Any In Step Operator Test Model",
                                "description": "A model to test the CPM child processes any in step operator.",
                                "type": "CM",
                                "8LE0CnuHRMOKoGXn1kHdNA": {
                                  "id": "8LE0CnuHRMOKoGXn1kHdNA",
                                  "vdid": "Ojf6XKz0Ith3QRVX6ep8Aw",
                                  "name": "CPM Child Processes Any In Step Operator Test Process",
                                  "description": "A model to test the CPM child processes any in step operator.",
                                  "type": "APM"
                                }
                              },
                              "L0L3o-vqTOOli8Lio96e8w": {
                                "id": "L0L3o-vqTOOli8Lio96e8w",
                                "vdid": "WtQfWMvVpLo8AAwa6NtCBQ",
                                "name": "CPM Descendant Processes Active Operator Test Model",
                                "description": "A model to test the descendant processes active operator.",
                                "type": "CM",
                                "cYpoxyyZSwm19CqH3v7eLQ": {
                                  "id": "cYpoxyyZSwm19CqH3v7eLQ",
                                  "vdid": "dCUoyBGlbilHgqsDyiE7OA",
                                  "name": "CPM Descendant Processes Active Operator Test Process",
                                  "description": "A process to test the descendant processes active operator.",
                                  "type": "APM"
                                }
                              },
                              "DXfqoTLmRzi-IloxkIFbRQ": {
                                "id": "DXfqoTLmRzi-IloxkIFbRQ",
                                "vdid": "ZX5Zm5hdnqLaqfeplqMOmQ",
                                "name": "CPM Descendant Processes All In Step Operator Test Model",
                                "description": "A model to test the CPM descendant processes all in step operator.",
                                "type": "CM",
                                "XzNJP6LyTCOnhGPKpJIjzg": {
                                  "id": "XzNJP6LyTCOnhGPKpJIjzg",
                                  "vdid": "MmTXrONKHBCv1Oz7UKHF3g",
                                  "name": "CPM Descendant Processes ALl In Step Operator Test Process",
                                  "description": "A process to test the CPM descendant processes in step operator.",
                                  "type": "APM"
                                }
                              },
                              "xbaDltz5S2m7Wes94Kx2pQ": {
                                "id": "xbaDltz5S2m7Wes94Kx2pQ",
                                "vdid": "UCwCNsaZOWnPEyNOAniwLg",
                                "name": "CPM Descendant Processes Any In Step Operator Test Model",
                                "description": "A model to test CPM descendant processes any in step operator.",
                                "type": "CM",
                                "TR7suTjQSKOBK5bGKztIcg": {
                                  "id": "TR7suTjQSKOBK5bGKztIcg",
                                  "vdid": "qAxtw39Xbxr6dGT2VGiVzw",
                                  "name": "CPM Descendant Processes Any In Step Test Process",
                                  "description": "A process to test CPM descendant processes any in step operator.",
                                  "type": "APM"
                                }
                              },
                              "mLTbOO97TtixSbKl8VB7gQ": {
                                "id": "mLTbOO97TtixSbKl8VB7gQ",
                                "vdid": "H3ZAgIBd-7sh1mPQOr9tRw",
                                "name": "CPM Parent Process Active Operator Test Model",
                                "description": "A model to test CPM parent process active operator.",
                                "type": "CM",
                                "kAuEmZA9Qn24PEZLBygGyA": {
                                  "id": "kAuEmZA9Qn24PEZLBygGyA",
                                  "vdid": "bNafAFFVrUOr0hrmR9PTyA",
                                  "name": "CPM Parent Process Active Operator Test Process",
                                  "description": "A process to test CPM parent process active operator.",
                                  "type": "APM"
                                }
                              },
                              "YasRidtOS-qeNNXio5CbVQ": {
                                "id": "YasRidtOS-qeNNXio5CbVQ",
                                "vdid": "VzbfGXuOKzTjnjlcrMs0LA",
                                "name": "CPM Parent Process In Step Operator Test Model",
                                "description": "A model to test CPM parent process in step operator.",
                                "type": "CM",
                                "UMlS451nSWq6yDZNwcUTaw": {
                                  "id": "UMlS451nSWq6yDZNwcUTaw",
                                  "vdid": "cvDbygrU7jPS6jZt_86Ayw",
                                  "name": "CPM Parent Process In Step Operator Test Process",
                                  "description": "A process to test CPM parent process in step operator.",
                                  "type": "APM"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "actRequests": []
                }
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "UBSclp3gSqCCmSvoG3W4tw": {
                "tydUf2gSSgSjSmrrF8nkyw": {
                  "isValid": true,
                  "cpJSON": {
                    "cm": {
                      "id": "n_Wf9SlwKXDAHsAeHyIfIg",
                      "vdid": "b51oiCw455CtZWATkRFCeA",
                      "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test] Model",
                      "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test].",
                      "cmat": {
                        "error": null,
                        "result": {
                          "INDEX_CM": {
                            "type": "INDEX",
                            "n_Wf9SlwKXDAHsAeHyIfIg": {
                              "id": "n_Wf9SlwKXDAHsAeHyIfIg",
                              "vdid": "b51oiCw455CtZWATkRFCeA",
                              "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test] Model",
                              "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test].",
                              "type": "CM",
                              "eCrCsTB0boCGM7H5dA5B5Q": {
                                "id": "eCrCsTB0boCGM7H5dA5B5Q",
                                "vdid": "mpMhiNoQyKA6DtXf9ePcBA",
                                "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]",
                                "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test].",
                                "type": "APM"
                              },
                              "gJnA-VJTTLa0g9TKFmjv1Q": {
                                "id": "gJnA-VJTTLa0g9TKFmjv1Q",
                                "vdid": "uxIdQlu6F6qh7wSf8fxRgg",
                                "name": "Cell Process Manager: Ancestor Processes Active",
                                "description": "Return Boolean true if request.context.apmBindingPath is a cell process with active ancestor processes.",
                                "type": "TOP"
                              },
                              "6j5F3HmKTLG9Q8kD1-QWYA": {
                                "id": "6j5F3HmKTLG9Q8kD1-QWYA",
                                "vdid": "vnxSscAq54LDXq_lqMLKzA",
                                "name": "Cell Process Manager: Ancestor Processes All In Step",
                                "description": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) all in the specified process step(s).",
                                "type": "TOP"
                              },
                              "jFxFmpHSSPaeWEFfLh8eWw": {
                                "id": "jFxFmpHSSPaeWEFfLh8eWw",
                                "vdid": "dvgbOfaZRWIye3cw_ggxSA",
                                "name": "Cell Process Manager: Ancestor Processes Any In Step",
                                "description": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) any of which are in the specified process step(s).",
                                "type": "TOP"
                              },
                              "xIRhBHueTRGO0xq63UUbyQ": {
                                "id": "xIRhBHueTRGO0xq63UUbyQ",
                                "vdid": "LOLedi7ipkbHDvCmLTCxmQ",
                                "name": "Cell Process Manager: Child Processes Active",
                                "description": "Returns Boolean true iff request.context.apmBindingPath is a cell process with one or more child cell processes.",
                                "type": "TOP"
                              },
                              "5P2MHjL4TXCqScp_xNrJyA": {
                                "id": "5P2MHjL4TXCqScp_xNrJyA",
                                "vdid": "VNZVczSCgyC66HK2MNfGGw",
                                "name": "Cell Process Manager: Child Processes All In Step",
                                "description": "Returns Boolean true request.context.apmBindingPath is a cell process whose child processes are all in the specified process step.",
                                "type": "TOP"
                              },
                              "esuJGgmERrSV3AFvFOMyhw": {
                                "id": "esuJGgmERrSV3AFvFOMyhw",
                                "vdid": "EIXj4B4mIuLjCWaE3d19pw",
                                "name": "Cell Process Manager: Child Processes Any In Step",
                                "description": "Returns Boolean true request.context.apmBindingPath is a cell process with any child cell process in the specified process step.",
                                "type": "TOP"
                              },
                              "Fs6tE76WR5yTOdbwQ_N_FQ": {
                                "id": "Fs6tE76WR5yTOdbwQ_N_FQ",
                                "vdid": "gcB_K3kPmripzOCaHBfsZw",
                                "name": "Cell Process Manager: Descendant Processes Active",
                                "description": "Returns Boolean true if request.context.apmBindingPath is a cell process with active dependant cell processes.",
                                "type": "TOP"
                              },
                              "DX5GfJcwRNq0xW20KzMSJQ": {
                                "id": "DX5GfJcwRNq0xW20KzMSJQ",
                                "vdid": "gToE7W7PJRKC4qqT9Ktmwg",
                                "name": "Cell Process Manager: Descendant Processes All In Step",
                                "description": "Returns Boolean true request.context.apmBindingPath is a cell process with all descendant cell processes in the specified process step.",
                                "type": "TOP"
                              },
                              "DzlsRZBOReO03GSPsU3CIg": {
                                "id": "DzlsRZBOReO03GSPsU3CIg",
                                "vdid": "5RGfncXUcSD_DnMgm2WaWw",
                                "name": "Cell Process Manager: Descendant Processes Any In Step",
                                "description": "Returns Boolean true request.context.apmBindingPath is a cell process whose descendant cell processes contain any cell process(es) in the specified process step.",
                                "type": "TOP"
                              },
                              "9HNGDusyTtKpleXFae7O5A": {
                                "id": "9HNGDusyTtKpleXFae7O5A",
                                "vdid": "8crtRfRPr5HW80pWd1ZrAA",
                                "name": "Cell Process Manager: Parent Process Active",
                                "description": "Returns Boolean true iff request.context.apmBindingPath is a cell process with an active parent process.",
                                "type": "TOP"
                              },
                              "PHPSWivjRyK80Gtymsp-pA": {
                                "id": "PHPSWivjRyK80Gtymsp-pA",
                                "vdid": "-LRgtvKmRNEBQ49Z1yNQxg",
                                "name": "Cell Process Manager: Parent Process In Step",
                                "description": "Returns Boolean true request.context.apmBindingPath is a cell process whose parent cell process is in the specified process step.",
                                "type": "TOP"
                              },
                              "VNaA0AMsTXawb32xLaNGTA": {
                                "id": "VNaA0AMsTXawb32xLaNGTA",
                                "vdid": "V4GPOwexeEfFbNqLhwpiCg",
                                "name": "Cell Process Manager: Initialize",
                                "description": "Performs initialization of Cell Process Manager cell process (the root and parent process of all cell processes executing in a CellProcess runtime host instance).",
                                "type": "ACT"
                              },
                              "SdL0-5kmTuiNrWNu7zGZhg": {
                                "id": "SdL0-5kmTuiNrWNu7zGZhg",
                                "vdid": "U6pYHwXACTvRjAkh7YETaw",
                                "name": "Cell Process Manager: Process Create",
                                "description": "Requests that the Cell Process Manager create a new cell process inside the CellProcessor runtime host instance.",
                                "type": "ACT"
                              },
                              "4s_DUfKnQ4aS-xRjewAfUQ": {
                                "id": "4s_DUfKnQ4aS-xRjewAfUQ",
                                "vdid": "Zu6vqkbcKMfcIATr64ymag",
                                "name": "Cell Process Manager: Process Delete",
                                "description": "Requests that the Cell Process Manager delete a branch of the cell process tree.",
                                "type": "ACT"
                              },
                              "r-JgxABoS_a-mSE2c1nvKA": {
                                "id": "r-JgxABoS_a-mSE2c1nvKA",
                                "vdid": "079dO4olRnRR81FkqtCOPQ",
                                "name": "Cell Process Manager: Process Query",
                                "description": "Performs a query on a specific cell process managed by the Cell Process Manager.",
                                "type": "ACT"
                              },
                              "L2mTv5LvT12WIYb0cYOsLA": {
                                "id": "L2mTv5LvT12WIYb0cYOsLA",
                                "vdid": "yxXRAM9LbuW-seGzhWYG9g",
                                "name": "Cell Process Manager Query",
                                "description": "Performs a synchronous query of the Cell Process Manager's process digraph.",
                                "type": "ACT"
                              },
                              "MDVBKW89TvO9T62Ge7GmNg": {
                                "id": "MDVBKW89TvO9T62Ge7GmNg",
                                "vdid": "euUNcasvs_3dms9bB55wFA",
                                "name": "Holarchy Core",
                                "description": "Holarchy Core CellLibrary packages standard logic and shared memory cell process step transition operators and action plug-ins that are loaded automatically into every CellProcessor cellular process runtime environment instance.",
                                "type": "CM",
                                "orTbEFR_Q-u-qqEqP8OUBA": {
                                  "id": "orTbEFR_Q-u-qqEqP8OUBA",
                                  "vdid": "Vmec8PHtmLyfNYvz7w9X5Q",
                                  "name": "Holarchy Core Cell",
                                  "description": "Shared low-level TransitionOperator and ControllerAction's for interacting with cell processes running inside of an ObservableProcessController instance.",
                                  "type": "CM",
                                  "9tNY7o5GTUGH_xda2GhP-w": {
                                    "id": "9tNY7o5GTUGH_xda2GhP-w",
                                    "vdid": "zmPeG6lSvXidCjr_XyENrQ",
                                    "name": "Cell Process In Step Operator",
                                    "description": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                                    "type": "TOP"
                                  }
                                },
                                "RW8Y2O-kRNSv87yXT962wQ": {
                                  "id": "RW8Y2O-kRNSv87yXT962wQ",
                                  "vdid": "xPF9l7Jj3a9CTdMC7UwFxw",
                                  "name": "Holarchy Core Logic",
                                  "description": "A collection of TranitionOperator plug-ins that implement generic logic functions AND, OR, NOT, TRUE.",
                                  "type": "CM",
                                  "YgABX95wR86GCYrYaDLISA": {
                                    "id": "YgABX95wR86GCYrYaDLISA",
                                    "vdid": "5Ebtc8mARWrvCY6U_wzdDA",
                                    "name": "Logical AND",
                                    "description": "Returns Boolean true iff all suboperations return true.",
                                    "type": "TOP"
                                  },
                                  "0JIva4IFSm6Xm7i38g8uUA": {
                                    "id": "0JIva4IFSm6Xm7i38g8uUA",
                                    "vdid": "FAh08f8CZQHnj-Pkilu-rw",
                                    "name": "Logical OR",
                                    "description": "Returns Boolean true iff any suboperations return true.",
                                    "type": "TOP"
                                  },
                                  "TLSHkl73SO-utuzM7dyN2g": {
                                    "id": "TLSHkl73SO-utuzM7dyN2g",
                                    "vdid": "ASh3z9ynLmUqRJElxWHVjQ",
                                    "name": "Logical NOT",
                                    "description": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                                    "type": "TOP"
                                  },
                                  "e89cwnP4Qd6MocAhzdOJgw": {
                                    "id": "e89cwnP4Qd6MocAhzdOJgw",
                                    "vdid": "NmKPVm8o5IAXQE-GgWcCDA",
                                    "name": "Logical TRUE",
                                    "description": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                                    "type": "TOP"
                                  }
                                },
                                "jQxlhOe-RDilxY0sNIierQ": {
                                  "id": "jQxlhOe-RDilxY0sNIierQ",
                                  "vdid": "wqwUJQKiGO8MZMW_LrfiDA",
                                  "name": "Holarchy Core Memory Actions & Operators",
                                  "description": "A collection of TransitionOperator plug-ins that perform logical comparisons operatations on cell processs memory.",
                                  "type": "CM",
                                  "oaF3-dXwQkusjD3I2o9-8g": {
                                    "id": "oaF3-dXwQkusjD3I2o9-8g",
                                    "vdid": "rR6j6vgEL4edaMFT9p0Kug",
                                    "name": "OCD Array Length Equal to Value",
                                    "description": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                                    "type": "TOP"
                                  },
                                  "2w7n6KxdR8mdIliePJesLQ": {
                                    "id": "2w7n6KxdR8mdIliePJesLQ",
                                    "vdid": "tljozSCr53fX-AmzURPyEg",
                                    "name": "OCD Compare Values",
                                    "description": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                                    "type": "TOP"
                                  },
                                  "UeLs9PcASwuC7KR190eYhA": {
                                    "id": "UeLs9PcASwuC7KR190eYhA",
                                    "vdid": "AvEsDNEdHzM-EAtRzKGrbg",
                                    "name": "OCD Boolean Flag Is Set",
                                    "description": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                                    "type": "TOP"
                                  },
                                  "ggsavKiARsq7rjwn-lxdfA": {
                                    "id": "ggsavKiARsq7rjwn-lxdfA",
                                    "vdid": "zo88N4oEjk34PxGoXmyTUA",
                                    "name": "OCD Namespace Is Greater Than Value",
                                    "description": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                                    "type": "TOP"
                                  },
                                  "k7THIKKDQMKOac1Rxh9tEQ": {
                                    "id": "k7THIKKDQMKOac1Rxh9tEQ",
                                    "vdid": "uinvGdItUIySJ4gEw7c2uQ",
                                    "name": "OCD Namespace Is Identical To Value",
                                    "description": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                                    "type": "TOP"
                                  },
                                  "XxX_a1sQS1OlJbWAYfx6tQ": {
                                    "id": "XxX_a1sQS1OlJbWAYfx6tQ",
                                    "vdid": "6DCD8gfsCpkJ1sJ50kP1xg",
                                    "name": "OCD Namespace Is Less Than Value",
                                    "description": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                                    "type": "TOP"
                                  },
                                  "kD1PcgqYQlm7fJatNG2ZsA": {
                                    "id": "kD1PcgqYQlm7fJatNG2ZsA",
                                    "vdid": "cNihhVrtDPl_5j7cSfcRug",
                                    "name": "OCD Namespace Is Truthy",
                                    "description": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                                    "type": "TOP"
                                  },
                                  "Ve_kEFkGSMSgOqUWu9Yo_w": {
                                    "id": "Ve_kEFkGSMSgOqUWu9Yo_w",
                                    "vdid": "DPKyvFjaLnWwv-4AP4IYQw",
                                    "name": "OCD Read Namespace Indirect",
                                    "description": "Reads and returns the value of OCD namespace via path indirection.",
                                    "type": "ACT"
                                  },
                                  "5rFEDGLYRSiZCeChMnkCHQ": {
                                    "id": "5rFEDGLYRSiZCeChMnkCHQ",
                                    "vdid": "fVjcSINW5Ps8rS2jRnBhLQ",
                                    "name": "OCD Boolean Flag Set",
                                    "description": "Set the Boolean-type OCD namespace specified by path to value true.",
                                    "type": "ACT"
                                  },
                                  "_yxWfFLnTqqN-UxRdd7W5w": {
                                    "id": "_yxWfFLnTqqN-UxRdd7W5w",
                                    "vdid": "3DsbArVA3LNYWuE7ucmIpQ",
                                    "name": "OCD Boolean Flag Clear",
                                    "description": "Set the Boolean-type OCD namespace specified by path to value false.",
                                    "type": "ACT"
                                  },
                                  "aXju3wSBQnufe0r51Y04wg": {
                                    "id": "aXju3wSBQnufe0r51Y04wg",
                                    "vdid": "1cu2zJ4iw9XB4K-RljVPPQ",
                                    "name": "Write Sub-Action Response",
                                    "description": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace.",
                                    "type": "ACT"
                                  }
                                }
                              },
                              "1jSxHMrqS6i9eDiRvDmfeg": {
                                "id": "1jSxHMrqS6i9eDiRvDmfeg",
                                "vdid": "iTfVaQjyQ1c_vaiK2jUWdA",
                                "name": "@encapsule/holarchy CellProcessor Test Model",
                                "description": "A wrapper for other CellModels defined to facilitate testing of the CellProcessor's intrinsic Cell Process Manager cell process operators and actions.",
                                "type": "CM",
                                "eu32xBRTSE2-B71HrwPFBg": {
                                  "id": "eu32xBRTSE2-B71HrwPFBg",
                                  "vdid": "ZQZ4avfuTJrUD4dLCNsIuA",
                                  "name": "CPM Ancestor Processes Active Operator Test Model",
                                  "description": "A model to test CPM ancestor active operator.",
                                  "type": "CM",
                                  "hybdu0VoQjWnOFs5vC3Tzw": {
                                    "id": "hybdu0VoQjWnOFs5vC3Tzw",
                                    "vdid": "97hTNPRdepXS0d9grCUGYQ",
                                    "name": "CPM Ancestor Processes Active Operator Test Process",
                                    "description": "A process to test CPM ancestor active operator.",
                                    "type": "APM"
                                  }
                                },
                                "wjUvGFxOQu6H3lZeII0cbA": {
                                  "id": "wjUvGFxOQu6H3lZeII0cbA",
                                  "vdid": "AGfvYhgOAe_FRkxxRUwhzg",
                                  "name": "CPM Ancestor Processes All In Step Operator Test Model",
                                  "description": "A model to test CPM ancestor processes all in step operator.",
                                  "type": "CM",
                                  "c09ke74xRza4Q9u2Ly0NIA": {
                                    "id": "c09ke74xRza4Q9u2Ly0NIA",
                                    "vdid": "MgJSs_iIwkrj4LTqlWO6lA",
                                    "name": "CPM Ancestor Processes All In Step Operator Test Process",
                                    "description": "A process to test CPM ancestor all in step operator.",
                                    "type": "APM"
                                  }
                                },
                                "4_rZ65rORrOEYJTCl5mOEQ": {
                                  "id": "4_rZ65rORrOEYJTCl5mOEQ",
                                  "vdid": "WkQbZt48cyo8imLBvuKNGw",
                                  "name": "CPM Ancestor Processes Any In Step Operator Test Model",
                                  "description": "A model to test CPM ancestor processes any in step operator.",
                                  "type": "CM",
                                  "we5IUb__Smqwkl4ghRl3Lw": {
                                    "id": "we5IUb__Smqwkl4ghRl3Lw",
                                    "vdid": "yIrcY4PXpWU1Z-U2SKk0aA",
                                    "name": "CPM Ancestor Processes Any In Step Operator Test Process",
                                    "description": "A process to test CPM ancestor processes any in step operator.",
                                    "type": "APM"
                                  }
                                },
                                "rIA4ammlRHStLM9zMYuJ9Q": {
                                  "id": "rIA4ammlRHStLM9zMYuJ9Q",
                                  "vdid": "KfYEZrAYm9d7REhjZD1Ntw",
                                  "name": "CPM Child Processes Active Operator Test Model",
                                  "description": "A model to test the child processes active operator.",
                                  "type": "CM",
                                  "LVjhjYUcQXOYcbI_xbepJQ": {
                                    "id": "LVjhjYUcQXOYcbI_xbepJQ",
                                    "vdid": "aatjxaP8ukpyjexhqUqY2w",
                                    "name": "CPM Child Processes Active Operator Test Process",
                                    "description": "Test process",
                                    "type": "APM"
                                  },
                                  "fUQKrIPcQmingXFEQ4Pt9A": {
                                    "id": "fUQKrIPcQmingXFEQ4Pt9A",
                                    "vdid": "2D79dpQQR6Z7xgEsQTQm8A",
                                    "name": "Dummy Process A Cell Model",
                                    "description": "A simple cell model that carries a regressive APM for testing various CPM actions and operators.",
                                    "type": "CM",
                                    "3E27IH_CQeqBUFsGm4tIIA": {
                                      "id": "3E27IH_CQeqBUFsGm4tIIA",
                                      "vdid": "FMsG1GoYY-Cuotk_yGZl6A",
                                      "name": "Dummy Process A Process",
                                      "description": "Implements a trivial cell process that does nothing.",
                                      "type": "APM"
                                    }
                                  },
                                  "RyMcv3MpTI-Co1EyVOIvlw": {
                                    "id": "RyMcv3MpTI-Co1EyVOIvlw",
                                    "vdid": "e4QXL6wlpNhG-Wuyl1RwbA",
                                    "name": "Holarchy CML",
                                    "description": "Holarchy Cell Model Library (CML) provides cellular process primitive operations, actions, and cell models for re-use in higher-order cell models.",
                                    "type": "CM",
                                    "c2cq2OE9SiaLKahL3Mk0KA": {
                                      "id": "c2cq2OE9SiaLKahL3Mk0KA",
                                      "vdid": "6-po-sADr7GVFbymhU9U_g",
                                      "name": "Holarchy Base Cell Model",
                                      "description": "A collection of low-level building blocks.",
                                      "type": "CM",
                                      "U5iIpgd8SHCk7pvaciVLTQ": {
                                        "id": "U5iIpgd8SHCk7pvaciVLTQ",
                                        "vdid": "FMmdFMpi2sIxS-Gby5s0NA",
                                        "name": "Holarchy Base Memory Mailbox Flag",
                                        "description": "A primitive cell process that signals (via process step transition) when some actor has put a message in the mailbox namespace.",
                                        "type": "CM",
                                        "z_mTe02hSWmaM1iRO1pBeA": {
                                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                                          "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                                          "name": "Abstract Frame Latch",
                                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                          "type": "APM"
                                        },
                                        "iyvk_9vhRn2qvrjOes5v7Q": {
                                          "id": "iyvk_9vhRn2qvrjOes5v7Q",
                                          "vdid": "Mm1h1iJOaeH77h6HYA9wxg",
                                          "name": "Frame Latch: Write",
                                          "description": "Writes the value made observable by frame latch APM instance.",
                                          "type": "ACT"
                                        }
                                      }
                                    }
                                  }
                                },
                                "OfLkkeNgQDm3xLb7TJqNRg": {
                                  "id": "OfLkkeNgQDm3xLb7TJqNRg",
                                  "vdid": "LQA3vOpc6DbCjqLDvUiRqA",
                                  "name": "CPM Child Processes All In Step Operator Test Model",
                                  "description": "A model to test the CPM child processes all in step operator.",
                                  "type": "CM",
                                  "vjz7U4NWRE2_UlAvAjmS6g": {
                                    "id": "vjz7U4NWRE2_UlAvAjmS6g",
                                    "vdid": "DGGXKvwjhNfvEKBqyBHL7Q",
                                    "name": "CPM Child Processes All In Step Operator Test Process",
                                    "description": "A model to test the CPM child processes all in step operator.",
                                    "type": "APM"
                                  }
                                },
                                "C_wxJlAoTHW_7TWmpCXL2g": {
                                  "id": "C_wxJlAoTHW_7TWmpCXL2g",
                                  "vdid": "2DTG8_XM1SffT66QZmvSRQ",
                                  "name": "CPM Child Processes Any In Step Operator Test Model",
                                  "description": "A model to test the CPM child processes any in step operator.",
                                  "type": "CM",
                                  "8LE0CnuHRMOKoGXn1kHdNA": {
                                    "id": "8LE0CnuHRMOKoGXn1kHdNA",
                                    "vdid": "Ojf6XKz0Ith3QRVX6ep8Aw",
                                    "name": "CPM Child Processes Any In Step Operator Test Process",
                                    "description": "A model to test the CPM child processes any in step operator.",
                                    "type": "APM"
                                  }
                                },
                                "L0L3o-vqTOOli8Lio96e8w": {
                                  "id": "L0L3o-vqTOOli8Lio96e8w",
                                  "vdid": "WtQfWMvVpLo8AAwa6NtCBQ",
                                  "name": "CPM Descendant Processes Active Operator Test Model",
                                  "description": "A model to test the descendant processes active operator.",
                                  "type": "CM",
                                  "cYpoxyyZSwm19CqH3v7eLQ": {
                                    "id": "cYpoxyyZSwm19CqH3v7eLQ",
                                    "vdid": "dCUoyBGlbilHgqsDyiE7OA",
                                    "name": "CPM Descendant Processes Active Operator Test Process",
                                    "description": "A process to test the descendant processes active operator.",
                                    "type": "APM"
                                  }
                                },
                                "DXfqoTLmRzi-IloxkIFbRQ": {
                                  "id": "DXfqoTLmRzi-IloxkIFbRQ",
                                  "vdid": "ZX5Zm5hdnqLaqfeplqMOmQ",
                                  "name": "CPM Descendant Processes All In Step Operator Test Model",
                                  "description": "A model to test the CPM descendant processes all in step operator.",
                                  "type": "CM",
                                  "XzNJP6LyTCOnhGPKpJIjzg": {
                                    "id": "XzNJP6LyTCOnhGPKpJIjzg",
                                    "vdid": "MmTXrONKHBCv1Oz7UKHF3g",
                                    "name": "CPM Descendant Processes ALl In Step Operator Test Process",
                                    "description": "A process to test the CPM descendant processes in step operator.",
                                    "type": "APM"
                                  }
                                },
                                "xbaDltz5S2m7Wes94Kx2pQ": {
                                  "id": "xbaDltz5S2m7Wes94Kx2pQ",
                                  "vdid": "UCwCNsaZOWnPEyNOAniwLg",
                                  "name": "CPM Descendant Processes Any In Step Operator Test Model",
                                  "description": "A model to test CPM descendant processes any in step operator.",
                                  "type": "CM",
                                  "TR7suTjQSKOBK5bGKztIcg": {
                                    "id": "TR7suTjQSKOBK5bGKztIcg",
                                    "vdid": "qAxtw39Xbxr6dGT2VGiVzw",
                                    "name": "CPM Descendant Processes Any In Step Test Process",
                                    "description": "A process to test CPM descendant processes any in step operator.",
                                    "type": "APM"
                                  }
                                },
                                "mLTbOO97TtixSbKl8VB7gQ": {
                                  "id": "mLTbOO97TtixSbKl8VB7gQ",
                                  "vdid": "H3ZAgIBd-7sh1mPQOr9tRw",
                                  "name": "CPM Parent Process Active Operator Test Model",
                                  "description": "A model to test CPM parent process active operator.",
                                  "type": "CM",
                                  "kAuEmZA9Qn24PEZLBygGyA": {
                                    "id": "kAuEmZA9Qn24PEZLBygGyA",
                                    "vdid": "bNafAFFVrUOr0hrmR9PTyA",
                                    "name": "CPM Parent Process Active Operator Test Process",
                                    "description": "A process to test CPM parent process active operator.",
                                    "type": "APM"
                                  }
                                },
                                "YasRidtOS-qeNNXio5CbVQ": {
                                  "id": "YasRidtOS-qeNNXio5CbVQ",
                                  "vdid": "VzbfGXuOKzTjnjlcrMs0LA",
                                  "name": "CPM Parent Process In Step Operator Test Model",
                                  "description": "A model to test CPM parent process in step operator.",
                                  "type": "CM",
                                  "UMlS451nSWq6yDZNwcUTaw": {
                                    "id": "UMlS451nSWq6yDZNwcUTaw",
                                    "vdid": "cvDbygrU7jPS6jZt_86Ayw",
                                    "name": "CPM Parent Process In Step Operator Test Process",
                                    "description": "A process to test CPM parent process in step operator.",
                                    "type": "APM"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "opc": {
                      "id": "OWLKS3J9pT-_iEFuwDCPrw",
                      "name": "[tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test] Observable Process Controller",
                      "description": "Provides shared memory and runtime automata process orchestration for [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test] CellProcessor-resident cell processes.",
                      "options": {
                        "evaluate": {
                          "maxFrames": 16,
                          "firstEvaluation": "constructor"
                        }
                      },
                      "apmMap": {
                        "z_mTe02hSWmaM1iRO1pBeA": {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                          "name": "Abstract Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                        },
                        "hybdu0VoQjWnOFs5vC3Tzw": {
                          "id": "hybdu0VoQjWnOFs5vC3Tzw",
                          "vdid": "97hTNPRdepXS0d9grCUGYQ",
                          "name": "CPM Ancestor Processes Active Operator Test Process",
                          "description": "A process to test CPM ancestor active operator."
                        },
                        "c09ke74xRza4Q9u2Ly0NIA": {
                          "id": "c09ke74xRza4Q9u2Ly0NIA",
                          "vdid": "MgJSs_iIwkrj4LTqlWO6lA",
                          "name": "CPM Ancestor Processes All In Step Operator Test Process",
                          "description": "A process to test CPM ancestor all in step operator."
                        },
                        "we5IUb__Smqwkl4ghRl3Lw": {
                          "id": "we5IUb__Smqwkl4ghRl3Lw",
                          "vdid": "yIrcY4PXpWU1Z-U2SKk0aA",
                          "name": "CPM Ancestor Processes Any In Step Operator Test Process",
                          "description": "A process to test CPM ancestor processes any in step operator."
                        },
                        "LVjhjYUcQXOYcbI_xbepJQ": {
                          "id": "LVjhjYUcQXOYcbI_xbepJQ",
                          "vdid": "aatjxaP8ukpyjexhqUqY2w",
                          "name": "CPM Child Processes Active Operator Test Process",
                          "description": "Test process"
                        },
                        "vjz7U4NWRE2_UlAvAjmS6g": {
                          "id": "vjz7U4NWRE2_UlAvAjmS6g",
                          "vdid": "DGGXKvwjhNfvEKBqyBHL7Q",
                          "name": "CPM Child Processes All In Step Operator Test Process",
                          "description": "A model to test the CPM child processes all in step operator."
                        },
                        "8LE0CnuHRMOKoGXn1kHdNA": {
                          "id": "8LE0CnuHRMOKoGXn1kHdNA",
                          "vdid": "Ojf6XKz0Ith3QRVX6ep8Aw",
                          "name": "CPM Child Processes Any In Step Operator Test Process",
                          "description": "A model to test the CPM child processes any in step operator."
                        },
                        "XzNJP6LyTCOnhGPKpJIjzg": {
                          "id": "XzNJP6LyTCOnhGPKpJIjzg",
                          "vdid": "MmTXrONKHBCv1Oz7UKHF3g",
                          "name": "CPM Descendant Processes ALl In Step Operator Test Process",
                          "description": "A process to test the CPM descendant processes in step operator."
                        },
                        "cYpoxyyZSwm19CqH3v7eLQ": {
                          "id": "cYpoxyyZSwm19CqH3v7eLQ",
                          "vdid": "dCUoyBGlbilHgqsDyiE7OA",
                          "name": "CPM Descendant Processes Active Operator Test Process",
                          "description": "A process to test the descendant processes active operator."
                        },
                        "TR7suTjQSKOBK5bGKztIcg": {
                          "id": "TR7suTjQSKOBK5bGKztIcg",
                          "vdid": "qAxtw39Xbxr6dGT2VGiVzw",
                          "name": "CPM Descendant Processes Any In Step Test Process",
                          "description": "A process to test CPM descendant processes any in step operator."
                        },
                        "kAuEmZA9Qn24PEZLBygGyA": {
                          "id": "kAuEmZA9Qn24PEZLBygGyA",
                          "vdid": "bNafAFFVrUOr0hrmR9PTyA",
                          "name": "CPM Parent Process Active Operator Test Process",
                          "description": "A process to test CPM parent process active operator."
                        },
                        "UMlS451nSWq6yDZNwcUTaw": {
                          "id": "UMlS451nSWq6yDZNwcUTaw",
                          "vdid": "cvDbygrU7jPS6jZt_86Ayw",
                          "name": "CPM Parent Process In Step Operator Test Process",
                          "description": "A process to test CPM parent process in step operator."
                        },
                        "eCrCsTB0boCGM7H5dA5B5Q": {
                          "id": "eCrCsTB0boCGM7H5dA5B5Q",
                          "vdid": "mpMhiNoQyKA6DtXf9ePcBA",
                          "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]",
                          "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]."
                        },
                        "3E27IH_CQeqBUFsGm4tIIA": {
                          "id": "3E27IH_CQeqBUFsGm4tIIA",
                          "vdid": "FMsG1GoYY-Cuotk_yGZl6A",
                          "name": "Dummy Process A Process",
                          "description": "Implements a trivial cell process that does nothing."
                        }
                      },
                      "opmiSpecPaths": [
                        {
                          "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                          "opmiRef": {
                            "id": "eCrCsTB0boCGM7H5dA5B5Q",
                            "vdid": "mpMhiNoQyKA6DtXf9ePcBA",
                            "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]",
                            "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]."
                          }
                        },
                        {
                          "specPath": "~.z_mTe02hSWmaM1iRO1pBeA_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "z_mTe02hSWmaM1iRO1pBeA",
                            "vdid": "9jOpGkKIURycWGDA5Nnxsg",
                            "name": "Abstract Frame Latch",
                            "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it."
                          }
                        },
                        {
                          "specPath": "~.hybdu0VoQjWnOFs5vC3Tzw_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "hybdu0VoQjWnOFs5vC3Tzw",
                            "vdid": "97hTNPRdepXS0d9grCUGYQ",
                            "name": "CPM Ancestor Processes Active Operator Test Process",
                            "description": "A process to test CPM ancestor active operator."
                          }
                        },
                        {
                          "specPath": "~.c09ke74xRza4Q9u2Ly0NIA_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "c09ke74xRza4Q9u2Ly0NIA",
                            "vdid": "MgJSs_iIwkrj4LTqlWO6lA",
                            "name": "CPM Ancestor Processes All In Step Operator Test Process",
                            "description": "A process to test CPM ancestor all in step operator."
                          }
                        },
                        {
                          "specPath": "~.we5IUb__Smqwkl4ghRl3Lw_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "we5IUb__Smqwkl4ghRl3Lw",
                            "vdid": "yIrcY4PXpWU1Z-U2SKk0aA",
                            "name": "CPM Ancestor Processes Any In Step Operator Test Process",
                            "description": "A process to test CPM ancestor processes any in step operator."
                          }
                        },
                        {
                          "specPath": "~.LVjhjYUcQXOYcbI_xbepJQ_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "LVjhjYUcQXOYcbI_xbepJQ",
                            "vdid": "aatjxaP8ukpyjexhqUqY2w",
                            "name": "CPM Child Processes Active Operator Test Process",
                            "description": "Test process"
                          }
                        },
                        {
                          "specPath": "~.vjz7U4NWRE2_UlAvAjmS6g_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "vjz7U4NWRE2_UlAvAjmS6g",
                            "vdid": "DGGXKvwjhNfvEKBqyBHL7Q",
                            "name": "CPM Child Processes All In Step Operator Test Process",
                            "description": "A model to test the CPM child processes all in step operator."
                          }
                        },
                        {
                          "specPath": "~.8LE0CnuHRMOKoGXn1kHdNA_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "8LE0CnuHRMOKoGXn1kHdNA",
                            "vdid": "Ojf6XKz0Ith3QRVX6ep8Aw",
                            "name": "CPM Child Processes Any In Step Operator Test Process",
                            "description": "A model to test the CPM child processes any in step operator."
                          }
                        },
                        {
                          "specPath": "~.XzNJP6LyTCOnhGPKpJIjzg_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "XzNJP6LyTCOnhGPKpJIjzg",
                            "vdid": "MmTXrONKHBCv1Oz7UKHF3g",
                            "name": "CPM Descendant Processes ALl In Step Operator Test Process",
                            "description": "A process to test the CPM descendant processes in step operator."
                          }
                        },
                        {
                          "specPath": "~.cYpoxyyZSwm19CqH3v7eLQ_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "cYpoxyyZSwm19CqH3v7eLQ",
                            "vdid": "dCUoyBGlbilHgqsDyiE7OA",
                            "name": "CPM Descendant Processes Active Operator Test Process",
                            "description": "A process to test the descendant processes active operator."
                          }
                        },
                        {
                          "specPath": "~.TR7suTjQSKOBK5bGKztIcg_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "TR7suTjQSKOBK5bGKztIcg",
                            "vdid": "qAxtw39Xbxr6dGT2VGiVzw",
                            "name": "CPM Descendant Processes Any In Step Test Process",
                            "description": "A process to test CPM descendant processes any in step operator."
                          }
                        },
                        {
                          "specPath": "~.kAuEmZA9Qn24PEZLBygGyA_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "kAuEmZA9Qn24PEZLBygGyA",
                            "vdid": "bNafAFFVrUOr0hrmR9PTyA",
                            "name": "CPM Parent Process Active Operator Test Process",
                            "description": "A process to test CPM parent process active operator."
                          }
                        },
                        {
                          "specPath": "~.UMlS451nSWq6yDZNwcUTaw_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "UMlS451nSWq6yDZNwcUTaw",
                            "vdid": "cvDbygrU7jPS6jZt_86Ayw",
                            "name": "CPM Parent Process In Step Operator Test Process",
                            "description": "A process to test CPM parent process in step operator."
                          }
                        },
                        {
                          "specPath": "~.3E27IH_CQeqBUFsGm4tIIA_CellProcesses.cellProcessMap.cellProcessID",
                          "opmiRef": {
                            "id": "3E27IH_CQeqBUFsGm4tIIA",
                            "vdid": "FMsG1GoYY-Cuotk_yGZl6A",
                            "name": "Dummy Process A Process",
                            "description": "Implements a trivial cell process that does nothing."
                          }
                        }
                      ],
                      "ocdTemplateSpec": {
                        "____types": "jsObject",
                        "z_mTe02hSWmaM1iRO1pBeA_CellProcesses": {
                          "____label": "[z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] Cell Process Map",
                            "____description": "A map of [z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] Cell Process Instance",
                              "____description": "Cell process instance memory for [z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch]: Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "z_mTe02hSWmaM1iRO1pBeA"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "hybdu0VoQjWnOFs5vC3Tzw_CellProcesses": {
                          "____label": "[hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process]: A process to test CPM ancestor active operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "hybdu0VoQjWnOFs5vC3Tzw"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "c09ke74xRza4Q9u2Ly0NIA_CellProcesses": {
                          "____label": "[c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process]: A process to test CPM ancestor all in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "c09ke74xRza4Q9u2Ly0NIA"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "we5IUb__Smqwkl4ghRl3Lw_CellProcesses": {
                          "____label": "[we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process]: A process to test CPM ancestor processes any in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "we5IUb__Smqwkl4ghRl3Lw"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "LVjhjYUcQXOYcbI_xbepJQ_CellProcesses": {
                          "____label": "[LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process]: Test process",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "LVjhjYUcQXOYcbI_xbepJQ"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                          "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process]: A model to test the CPM child processes all in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "vjz7U4NWRE2_UlAvAjmS6g"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "8LE0CnuHRMOKoGXn1kHdNA_CellProcesses": {
                          "____label": "[8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process]: A model to test the CPM child processes any in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "8LE0CnuHRMOKoGXn1kHdNA"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "XzNJP6LyTCOnhGPKpJIjzg_CellProcesses": {
                          "____label": "[XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process]: A process to test the CPM descendant processes in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "XzNJP6LyTCOnhGPKpJIjzg"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "cYpoxyyZSwm19CqH3v7eLQ_CellProcesses": {
                          "____label": "[cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process]: A process to test the descendant processes active operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "cYpoxyyZSwm19CqH3v7eLQ"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "TR7suTjQSKOBK5bGKztIcg_CellProcesses": {
                          "____label": "[TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] Cell Process Map",
                            "____description": "A map of [TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process]: A process to test CPM descendant processes any in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "TR7suTjQSKOBK5bGKztIcg"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "kAuEmZA9Qn24PEZLBygGyA_CellProcesses": {
                          "____label": "[kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process]: A process to test CPM parent process active operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "kAuEmZA9Qn24PEZLBygGyA"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "UMlS451nSWq6yDZNwcUTaw_CellProcesses": {
                          "____label": "[UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process]: A process to test CPM parent process in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "UMlS451nSWq6yDZNwcUTaw"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                          "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Map",
                            "____description": "A map of [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process]: Implements a trivial cell process that does nothing.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "3E27IH_CQeqBUFsGm4tIIA"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "____appdsl": {
                            "apm": "eCrCsTB0boCGM7H5dA5B5Q"
                          }
                        }
                      },
                      "ocdRuntimeSpec": {
                        "____label": "OPC [OWLKS3J9pT-_iEFuwDCPrw::[tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test] Observable Process Controller] Observable Controller Data Store",
                        "____description": "OPC [OWLKS3J9pT-_iEFuwDCPrw::[tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test] Observable Process Controller] system process runtime state data managed by OPC instance.",
                        "____types": "jsObject",
                        "____defaultValue": {},
                        "z_mTe02hSWmaM1iRO1pBeA_CellProcesses": {
                          "____label": "[z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] Cell Process Map",
                            "____description": "A map of [z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "Abstract Frame Latch",
                              "____description": "Cell process instance memory for [z_mTe02hSWmaM1iRO1pBeA::Abstract Frame Latch]: Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "z_mTe02hSWmaM1iRO1pBeA"
                              },
                              "____defaultValue": {},
                              "clock": {
                                "____accept": "jsBoolean",
                                "____defaultValue": false
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "hybdu0VoQjWnOFs5vC3Tzw_CellProcesses": {
                          "____label": "[hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [hybdu0VoQjWnOFs5vC3Tzw::CPM Ancestor Processes Active Operator Test Process]: A process to test CPM ancestor active operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "hybdu0VoQjWnOFs5vC3Tzw"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "c09ke74xRza4Q9u2Ly0NIA_CellProcesses": {
                          "____label": "[c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [c09ke74xRza4Q9u2Ly0NIA::CPM Ancestor Processes All In Step Operator Test Process]: A process to test CPM ancestor all in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "c09ke74xRza4Q9u2Ly0NIA"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "we5IUb__Smqwkl4ghRl3Lw_CellProcesses": {
                          "____label": "[we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [we5IUb__Smqwkl4ghRl3Lw::CPM Ancestor Processes Any In Step Operator Test Process]: A process to test CPM ancestor processes any in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "we5IUb__Smqwkl4ghRl3Lw"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "LVjhjYUcQXOYcbI_xbepJQ_CellProcesses": {
                          "____label": "[LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [LVjhjYUcQXOYcbI_xbepJQ::CPM Child Processes Active Operator Test Process]: Test process",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "LVjhjYUcQXOYcbI_xbepJQ"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                          "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [vjz7U4NWRE2_UlAvAjmS6g::CPM Child Processes All In Step Operator Test Process]: A model to test the CPM child processes all in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "vjz7U4NWRE2_UlAvAjmS6g"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "8LE0CnuHRMOKoGXn1kHdNA_CellProcesses": {
                          "____label": "[8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [8LE0CnuHRMOKoGXn1kHdNA::CPM Child Processes Any In Step Operator Test Process]: A model to test the CPM child processes any in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "8LE0CnuHRMOKoGXn1kHdNA"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "XzNJP6LyTCOnhGPKpJIjzg_CellProcesses": {
                          "____label": "[XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [XzNJP6LyTCOnhGPKpJIjzg::CPM Descendant Processes ALl In Step Operator Test Process]: A process to test the CPM descendant processes in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "XzNJP6LyTCOnhGPKpJIjzg"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "cYpoxyyZSwm19CqH3v7eLQ_CellProcesses": {
                          "____label": "[cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [cYpoxyyZSwm19CqH3v7eLQ::CPM Descendant Processes Active Operator Test Process]: A process to test the descendant processes active operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "cYpoxyyZSwm19CqH3v7eLQ"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "TR7suTjQSKOBK5bGKztIcg_CellProcesses": {
                          "____label": "[TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] Cell Process Map",
                            "____description": "A map of [TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [TR7suTjQSKOBK5bGKztIcg::CPM Descendant Processes Any In Step Test Process]: A process to test CPM descendant processes any in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "TR7suTjQSKOBK5bGKztIcg"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "kAuEmZA9Qn24PEZLBygGyA_CellProcesses": {
                          "____label": "[kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] Cell Process Map",
                            "____description": "A map of [kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [kAuEmZA9Qn24PEZLBygGyA::CPM Parent Process Active Operator Test Process]: A process to test CPM parent process active operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "kAuEmZA9Qn24PEZLBygGyA"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "UMlS451nSWq6yDZNwcUTaw_CellProcesses": {
                          "____label": "[UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] Cell Process Map",
                            "____description": "A map of [UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [UMlS451nSWq6yDZNwcUTaw::CPM Parent Process In Step Operator Test Process]: A process to test CPM parent process in step operator.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "UMlS451nSWq6yDZNwcUTaw"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                          "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Processes Memory",
                          "____description": "Shared cell process memory for cell processes bound to AbstractProcessModel [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process].",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "cellProcessMap": {
                            "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Map",
                            "____description": "A map of [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] process instances by process ID that are managed by the CellProcessor (~) runtime host instance.",
                            "____types": "jsObject",
                            "____asMap": true,
                            "____defaultValue": {},
                            "cellProcessID": {
                              "____label": "[3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process] Cell Process Instance",
                              "____description": "Cell process instance memory for [3E27IH_CQeqBUFsGm4tIIA::Dummy Process A Process]: Implements a trivial cell process that does nothing.",
                              "____types": "jsObject",
                              "____appdsl": {
                                "apm": "3E27IH_CQeqBUFsGm4tIIA"
                              },
                              "__apmiStep": {
                                "____accept": "jsString",
                                "____defaultValue": "uninitialized"
                              }
                            }
                          },
                          "revision": {
                            "____accept": "jsNumber",
                            "____defaultValue": 0
                          }
                        },
                        "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "____appdsl": {
                            "apm": "eCrCsTB0boCGM7H5dA5B5Q"
                          },
                          "____label": "Cell Process Manager",
                          "____description": "Namespace reserved for storage of root cell process manager data structures. Access this information only via ControllerActions and TransitionOperators.",
                          "cellProcessTree": {
                            "____label": "Cell Process Tree",
                            "____description": "An @encapsule/arccore.graph DirectedGraph object used to keep track of the cell process tree.",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "revision": {
                              "____label": "Cell Process Tree Revision",
                              "____description": "A monotonically-increasing counter value that is incremented every time a cell process is created or deleted via ControllerAction call.",
                              "____accept": "jsNumber",
                              "____defaultValue": 0
                            },
                            "digraph": {
                              "____label": "Cell Process Runtime Model",
                              "____description": "A deserialized @encapsule/arccore.graph DirectedGraph class instance leveraged by the cell process manager action interface.",
                              "____accept": [
                                "jsUndefined",
                                "jsObject"
                              ]
                            }
                          },
                          "__apmiStep": {
                            "____accept": "jsString",
                            "____defaultValue": "uninitialized"
                          }
                        }
                      },
                      "ocdi": {
                        "z_mTe02hSWmaM1iRO1pBeA_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "hybdu0VoQjWnOFs5vC3Tzw_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "c09ke74xRza4Q9u2Ly0NIA_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "we5IUb__Smqwkl4ghRl3Lw_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "LVjhjYUcQXOYcbI_xbepJQ_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "8LE0CnuHRMOKoGXn1kHdNA_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "XzNJP6LyTCOnhGPKpJIjzg_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "cYpoxyyZSwm19CqH3v7eLQ_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "TR7suTjQSKOBK5bGKztIcg_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "kAuEmZA9Qn24PEZLBygGyA_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "UMlS451nSWq6yDZNwcUTaw_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                          "cellProcessMap": {},
                          "revision": 0
                        },
                        "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                          "cellProcessTree": {
                            "revision": 0,
                            "digraph": {
                              "name": "Cell Process Tree Digraph Model",
                              "description": "Tracks parent/child relationships between dynamically created cellular processes executing within a CellProcessor runtime host instance.",
                              "vlist": [
                                {
                                  "u": "U1NTU1paWlqwsLCwxMTExA",
                                  "p": {
                                    "apmBindingPath": "~",
                                    "name": "Cell Process Manager"
                                  }
                                }
                              ],
                              "elist": []
                            }
                          },
                          "__apmiStep": "ready"
                        }
                      },
                      "transitionDispatcher": {
                        "filterDescriptor": {
                          "operationID": "Edi-_R3Jwpl62Q_XgxQNdA",
                          "operationName": "Discriminator Filter",
                          "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                          "inputTypeVIID": "lshA78xfrMIO78K1QFJOKA",
                          "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "outputTypeVIID": "mWfElEHz7pWO0nR8x2FXCA",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "__P0E7yjNVc9iY7tK8UUtA"
                        },
                        "supportedFilters": [
                          "[0JIva4IFSm6Xm7i38g8uUA::Logical OR]",
                          "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                          "[5P2MHjL4TXCqScp_xNrJyA::Cell Process Manager: Child Processes All In Step]",
                          "[6j5F3HmKTLG9Q8kD1-QWYA::Cell Process Manager: Ancestor Processes All In Step]",
                          "[9HNGDusyTtKpleXFae7O5A::Cell Process Manager: Parent Process Active]",
                          "[9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]",
                          "[DX5GfJcwRNq0xW20KzMSJQ::Cell Process Manager: Descendant Processes All In Step]",
                          "[DzlsRZBOReO03GSPsU3CIg::Cell Process Manager: Descendant Processes Any In Step]",
                          "[Fs6tE76WR5yTOdbwQ_N_FQ::Cell Process Manager: Descendant Processes Active]",
                          "[PHPSWivjRyK80Gtymsp-pA::Cell Process Manager: Parent Process In Step]",
                          "[TLSHkl73SO-utuzM7dyN2g::Logical NOT]",
                          "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                          "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                          "[YgABX95wR86GCYrYaDLISA::Logical AND]",
                          "[e89cwnP4Qd6MocAhzdOJgw::Logical TRUE]",
                          "[esuJGgmERrSV3AFvFOMyhw::Cell Process Manager: Child Processes Any In Step]",
                          "[gJnA-VJTTLa0g9TKFmjv1Q::Cell Process Manager: Ancestor Processes Active]",
                          "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                          "[jFxFmpHSSPaeWEFfLh8eWw::Cell Process Manager: Ancestor Processes Any In Step]",
                          "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                          "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                          "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]",
                          "[xIRhBHueTRGO0xq63UUbyQ::Cell Process Manager: Child Processes Active]"
                        ],
                        "options": {
                          "action": "getFilter"
                        }
                      },
                      "transitionDispatcherFilterMap": {
                        "9tNY7o5GTUGH_xda2GhP-w": {
                          "filterDescriptor": {
                            "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                            "operationName": "Cell Process In Step Operator",
                            "operationDescription": "Returns Boolean true iff the indicated APM instance is in the indicated process step.",
                            "inputFilterSpec": {
                              "____label": "Cell Process In Step Operator Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "cell": {
                                        "____types": "jsObject",
                                        "atStep": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "step": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                            "inputTypeVDID": "q9TocAv3KDWF1D8TwFOj0A",
                            "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "wlRcRFbU4pO6f_ictPVicg"
                          }
                        },
                        "gJnA-VJTTLa0g9TKFmjv1Q": {
                          "filterDescriptor": {
                            "operationID": "gJnA-VJTTLa0g9TKFmjv1Q",
                            "operationName": "Cell Process Manager: Ancestor Processes Active",
                            "operationDescription": "Return Boolean true if request.context.apmBindingPath is a cell process with active ancestor processes.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Ancestor Processes Active Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "ancestorProcessesActive": {
                                      "____types": "jsObject"
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "q31ohudaRnc-2yxFujIWLQ",
                            "inputTypeVDID": "E846pC-YIDNZg0AISONg2A",
                            "outputTypeVIID": "7rmmJsOAG_On-Qsu_aOLCw",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "yEcBRLFA05MPLz-cbmQ_cg"
                          }
                        },
                        "6j5F3HmKTLG9Q8kD1-QWYA": {
                          "filterDescriptor": {
                            "operationID": "6j5F3HmKTLG9Q8kD1-QWYA",
                            "operationName": "Cell Process Manager: Ancestor Processes All In Step",
                            "operationDescription": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) all in the specified process step(s).",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Ancestor Processes All In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "ancestorProcessesAllInStep": {
                                      "____types": "jsObject"
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "LCjyzgMewHLQtavsni6ugw",
                            "inputTypeVDID": "BVFOp5Vp2MXU2VtJD7IW8g",
                            "outputTypeVIID": "cPIdL7lhl0gnxyaDt0xclw",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "VzVeRHPDmpN7VZuc0KxXcg"
                          }
                        },
                        "jFxFmpHSSPaeWEFfLh8eWw": {
                          "filterDescriptor": {
                            "operationID": "jFxFmpHSSPaeWEFfLh8eWw",
                            "operationName": "Cell Process Manager: Ancestor Processes Any In Step",
                            "operationDescription": "Returns Boolean true if request.context.apmBindingPath is a cell process with ancestor process(es) any of which are in the specified process step(s).",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Ancestor Processes Any In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "ancestorProcessesAnyInStep": {
                                      "____types": "jsObject"
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "qh7wt5MghqHkf8TA970Isg",
                            "inputTypeVDID": "flFOBPdp2Px42VvEC7IWqA",
                            "outputTypeVIID": "dVyh7xX7wxDVc-vzANMU_Q",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "ER03RLtKmZOSE6acigEScg"
                          }
                        },
                        "xIRhBHueTRGO0xq63UUbyQ": {
                          "filterDescriptor": {
                            "operationID": "xIRhBHueTRGO0xq63UUbyQ",
                            "operationName": "Cell Process Manager: Child Processes Active",
                            "operationDescription": "Returns Boolean true iff request.context.apmBindingPath is a cell process with one or more child cell processes.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Child Processes Active Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "childProcessesActive": {
                                      "____types": "jsObject"
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "4UQ1MuswyqVTGQqxY3GkxQ",
                            "inputTypeVDID": "1PVrPlH2HVbCSK25wGN4JQ",
                            "outputTypeVIID": "IlcDahOM8PmLJGCSc8LYWA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "RX7CRKRS1JNesQqcUhvZcg"
                          }
                        },
                        "5P2MHjL4TXCqScp_xNrJyA": {
                          "filterDescriptor": {
                            "operationID": "5P2MHjL4TXCqScp_xNrJyA",
                            "operationName": "Cell Process Manager: Child Processes All In Step",
                            "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process whose child processes are all in the specified process step.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Child Processes All In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "childProcessesAllInStep": {
                                      "____types": "jsObject",
                                      "apmStep": {
                                        "____types": [
                                          "jsString",
                                          "jsArray"
                                        ],
                                        "stepName": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "CyItwqKglka3fL_yymT2Hw",
                            "inputTypeVDID": "aiNRLFKwUrh6U1vmeUILgA",
                            "outputTypeVIID": "2lRyd2mNBpsj8UUItbMgfA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "x_U6RN40JZNLnrGcp4Vpcg"
                          }
                        },
                        "esuJGgmERrSV3AFvFOMyhw": {
                          "filterDescriptor": {
                            "operationID": "esuJGgmERrSV3AFvFOMyhw",
                            "operationName": "Cell Process Manager: Child Processes Any In Step",
                            "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process with any child cell process in the specified process step.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Child Processes Any In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "childProcessesAnyInStep": {
                                      "____types": "jsObject",
                                      "apmStep": {
                                        "____accept": "jsString"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "oZS-VRf4CsfWWzLjNiCBig",
                            "inputTypeVDID": "ZUNN13bCO3TscX9lkBIxtQ",
                            "outputTypeVIID": "KBov9UbxYf95j29LOwQo_Q",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "qtDrRNa6sJNtXOmcMBx4cg"
                          }
                        },
                        "Fs6tE76WR5yTOdbwQ_N_FQ": {
                          "filterDescriptor": {
                            "operationID": "Fs6tE76WR5yTOdbwQ_N_FQ",
                            "operationName": "Cell Process Manager: Descendant Processes Active",
                            "operationDescription": "Returns Boolean true if request.context.apmBindingPath is a cell process with active dependant cell processes.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Descendant Processes Active Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "descendantProcessesActive": {
                                      "____types": "jsObject"
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "Vtu0SajLKSxee9YIxyp_gg",
                            "inputTypeVDID": "zVAau5X9iZ5jSa50RLlbsw",
                            "outputTypeVIID": "aIHtnWnyQJxHUdYGWTiOYw",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "wMUTRHTAJpPSrhOcffVEcg"
                          }
                        },
                        "DX5GfJcwRNq0xW20KzMSJQ": {
                          "filterDescriptor": {
                            "operationID": "DX5GfJcwRNq0xW20KzMSJQ",
                            "operationName": "Cell Process Manager: Descendant Processes All In Step",
                            "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process with all descendant cell processes in the specified process step.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Descendant Processes All In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "descendantProcessesAllInStep": {
                                      "____types": "jsObject",
                                      "apmStep": {
                                        "____accept": "jsString"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "G97lcJCcq1Rx4hW8oXkDLA",
                            "inputTypeVDID": "MR52FKYM4ucdZBKXG5u7Zw",
                            "outputTypeVIID": "77mlDPUzGqgBoJa9TdESRg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "hQR-RC4R0pOuYHmcLGstcg"
                          }
                        },
                        "DzlsRZBOReO03GSPsU3CIg": {
                          "filterDescriptor": {
                            "operationID": "DzlsRZBOReO03GSPsU3CIg",
                            "operationName": "Cell Process Manager: Descendant Processes Any In Step",
                            "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process whose descendant cell processes contain any cell process(es) in the specified process step.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Descendant Processes Any In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "descendantProcessesAnyInStep": {
                                      "____types": "jsObject",
                                      "apmStep": {
                                        "____accept": "jsString"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "rMeX5xCbb1ya4Li0DCcFoQ",
                            "inputTypeVDID": "5R52LGAM4jDYZBLaM5u7tQ",
                            "outputTypeVIID": "wgVg3qZpo0RYtr_G6szN5A",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "8FANRANLlpOe4XicJggZcg"
                          }
                        },
                        "9HNGDusyTtKpleXFae7O5A": {
                          "filterDescriptor": {
                            "operationID": "9HNGDusyTtKpleXFae7O5A",
                            "operationName": "Cell Process Manager: Parent Process Active",
                            "operationDescription": "Returns Boolean true iff request.context.apmBindingPath is a cell process with an active parent process.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Parent Process Active Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "parentProcessActive": {
                                      "____types": "jsObject"
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "58apLhwPX-DwA865eK8Njw",
                            "inputTypeVDID": "puMvyoqeUJioh5kglo-MOQ",
                            "outputTypeVIID": "sh_MqQTDccMxBIGxw7FQaw",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "L0OoRLyJ5JNXXzSctWqocg"
                          }
                        },
                        "PHPSWivjRyK80Gtymsp-pA": {
                          "filterDescriptor": {
                            "operationID": "PHPSWivjRyK80Gtymsp-pA",
                            "operationName": "Cell Process Manager: Parent Process In Step",
                            "operationDescription": "Returns Boolean true request.context.apmBindingPath is a cell process whose parent cell process is in the specified process step.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Parent Process In Step Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "parentProcessInStep": {
                                      "____types": "jsObject",
                                      "apmStep": {
                                        "____accept": "jsString"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "M2yeGPTmuArpYN5z5fWfGQ",
                            "inputTypeVDID": "y37-8UHGAoJFCypW44L0ig",
                            "outputTypeVIID": "bvlMy4KaarvmQhlFw7HvKQ",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "oSOwRHcFgJOzIcmcgCZacg"
                          }
                        },
                        "YgABX95wR86GCYrYaDLISA": {
                          "filterDescriptor": {
                            "operationID": "YgABX95wR86GCYrYaDLISA",
                            "operationName": "Logical AND",
                            "operationDescription": "Returns Boolean true iff all suboperations return true.",
                            "inputFilterSpec": {
                              "____label": "Logical AND Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "and": {
                                  "____types": "jsArray",
                                  "operandOperatorVariant": {
                                    "____accept": "jsObject"
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                            "inputTypeVDID": "aZ0313jYspKqFYbxLUobFA",
                            "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "9jcTRLaZgJMBefycqJ3Wcg"
                          }
                        },
                        "TLSHkl73SO-utuzM7dyN2g": {
                          "filterDescriptor": {
                            "operationID": "TLSHkl73SO-utuzM7dyN2g",
                            "operationName": "Logical NOT",
                            "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                            "inputFilterSpec": {
                              "____label": "Logical NOT Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "not": {
                                  "____accept": "jsObject"
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                            "inputTypeVDID": "b3mPoTvLTsPNNEE5vSl4Ig",
                            "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "MSNYRHRjqZPIbkKcBH-Scg"
                          }
                        },
                        "0JIva4IFSm6Xm7i38g8uUA": {
                          "filterDescriptor": {
                            "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                            "operationName": "Logical OR",
                            "operationDescription": "Returns Boolean true iff any suboperations return true.",
                            "inputFilterSpec": {
                              "____label": "Logical OR Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "or": {
                                  "____types": "jsArray",
                                  "operandOperatorVariant": {
                                    "____accept": "jsObject"
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                            "inputTypeVDID": "-JaOoCpSpMXUBcCaKY9fVw",
                            "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "4CecRIW4PJNmp1qcOG6ncg"
                          }
                        },
                        "e89cwnP4Qd6MocAhzdOJgw": {
                          "filterDescriptor": {
                            "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                            "operationName": "Logical TRUE",
                            "operationDescription": "Always returns Boolean true. Used typically to unilaterally transition a cell process from one step to another (e.g. always, or as a default after many other transition rules).",
                            "inputFilterSpec": {
                              "____label": "Logical TRUE Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "always": {
                                  "____accept": "jsBoolean",
                                  "____inValueSet": [
                                    true
                                  ]
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                            "inputTypeVDID": "C5XIeECWu2mxDmCCOEFunQ",
                            "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "7g4dROZHqpP8SX2c1AJhcg"
                          }
                        },
                        "oaF3-dXwQkusjD3I2o9-8g": {
                          "filterDescriptor": {
                            "operationID": "oaF3-dXwQkusjD3I2o9-8g",
                            "operationName": "OCD Array Length Equal to Value",
                            "operationDescription": "Returns Boolean true iff the length of the array stored at OCD path equals the specified numerical value (direct or indirect).",
                            "inputFilterSpec": {
                              "____label": "OCD Array Length Equal to Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "array": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "length": {
                                            "____types": "jsObject",
                                            "equalToValue": {
                                              "____accept": [
                                                "jsNumber",
                                                "jsString"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "1w1jkkL88zPbGh1huUa66A",
                            "inputTypeVDID": "mlQwgyCDl-ST91MGpgC1VQ",
                            "outputTypeVIID": "ll5aBQHmBVx07i4pBJMThw",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "yhC0RNrN1ZMX5F-ckUIncg"
                          }
                        },
                        "UeLs9PcASwuC7KR190eYhA": {
                          "filterDescriptor": {
                            "operationID": "UeLs9PcASwuC7KR190eYhA",
                            "operationName": "OCD Boolean Flag Is Set",
                            "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                            "inputFilterSpec": {
                              "____label": "OCD Boolean Flag Is Set Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isBooleanFlagSet": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                            "inputTypeVDID": "XaY0xWS0bd69voTSU_w3aA",
                            "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "6eZxRIQnF5PpgaiccabWcg"
                          }
                        },
                        "2w7n6KxdR8mdIliePJesLQ": {
                          "filterDescriptor": {
                            "operationID": "2w7n6KxdR8mdIliePJesLQ",
                            "operationName": "OCD Compare Values",
                            "operationDescription": "Returns Boolean true iff operand A and B values compare using the indicated comparison operator.",
                            "inputFilterSpec": {
                              "____label": "OCD Compare Values Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "compare": {
                                          "____types": "jsObject",
                                          "values": {
                                            "____types": "jsObject",
                                            "a": {
                                              "____label": "Operand A",
                                              "____description": "Operand A for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                              "____types": "jsObject",
                                              "value": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsNull",
                                                  "jsString",
                                                  "jsNumber",
                                                  "jsBoolean"
                                                ]
                                              },
                                              "path": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsString"
                                                ]
                                              }
                                            },
                                            "b": {
                                              "____label": "Operand B",
                                              "____description": "Operand B for identical operator comparison. Specifiy either value (direct) XOR path (indirect).",
                                              "____types": "jsObject",
                                              "value": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsNull",
                                                  "jsString",
                                                  "jsNumber",
                                                  "jsBoolean"
                                                ]
                                              },
                                              "path": {
                                                "____accept": [
                                                  "jsUndefined",
                                                  "jsString"
                                                ]
                                              }
                                            },
                                            "operator": {
                                              "____label": "Comparison Operator",
                                              "____description": "A string enum indicating the comparison operator to use.",
                                              "____accept": "jsString",
                                              "____inValueSet": [
                                                "===",
                                                "==",
                                                "<",
                                                "<=",
                                                ">",
                                                ">="
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "Vd7i-lH1mj84kJrcpYoR9g",
                            "inputTypeVDID": "uXfDAJlX200_coTaw1pLtg",
                            "outputTypeVIID": "kxjuRwQKX01DJDkjruKvXg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "l5iBRNf6zpMr3-CcKjAWcg"
                          }
                        },
                        "ggsavKiARsq7rjwn-lxdfA": {
                          "filterDescriptor": {
                            "operationID": "ggsavKiARsq7rjwn-lxdfA",
                            "operationName": "OCD Namespace Is Greater Than Value",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Greater Than Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceGreaterThanValue": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____accept": [
                                              "jsString",
                                              "jsNumber"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "CF-H4WojwJ7B1YyWvKlnMQ",
                            "inputTypeVDID": "LRU9vcBpToNeHesuiIxokw",
                            "outputTypeVIID": "vevJRLqsD_7D5r52vqsYNg",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "soEGROP6ipOrHwqcgR0Icg"
                          }
                        },
                        "k7THIKKDQMKOac1Rxh9tEQ": {
                          "filterDescriptor": {
                            "operationID": "k7THIKKDQMKOac1Rxh9tEQ",
                            "operationName": "OCD Namespace Is Identical To Value",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Identical To Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceIdenticalToValue": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____accept": [
                                              "jsString",
                                              "jsNumber"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "2lapAiv6Y2wX3rSyYd_aXA",
                            "inputTypeVDID": "9RU9alRpThHQHeu-ZIxoLg",
                            "outputTypeVIID": "a4e-UB9BqYvz755bPVZ4AA",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "aCc3RHCjwpMQ7XKc0o4mcg"
                          }
                        },
                        "XxX_a1sQS1OlJbWAYfx6tQ": {
                          "filterDescriptor": {
                            "operationID": "XxX_a1sQS1OlJbWAYfx6tQ",
                            "operationName": "OCD Namespace Is Less Than Value",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Less Than Value Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceLessThanValue": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____accept": [
                                              "jsString",
                                              "jsNumber"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "SdjtRCNawPzfg3fuyxpeog",
                            "inputTypeVDID": "ZuD2TKtYUqU87dkAt67RVA",
                            "outputTypeVIID": "C3a0V2HEKW7fH5xudFSe2Q",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "l9RzRDh_y5NJEa-c2o72cg"
                          }
                        },
                        "kD1PcgqYQlm7fJatNG2ZsA": {
                          "filterDescriptor": {
                            "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                            "operationName": "OCD Namespace Is Truthy",
                            "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                            "inputFilterSpec": {
                              "____label": "OCD Namespace Is Truthy Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "transitionDispatcher": {
                                  "____label": "OPC Transition Dispatcher",
                                  "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                  "____accept": "jsObject"
                                }
                              },
                              "operatorRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "operators": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "isNamespaceTruthy": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsBoolean"
                            },
                            "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                            "inputTypeVDID": "IqY0aMK0bZrZvoSd7_w3IQ",
                            "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                            "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                            "operationVDID": "vqWEROJwL5P3HeKc3FBvcg"
                          }
                        }
                      },
                      "actionDispatcher": {
                        "filterDescriptor": {
                          "operationID": "s0Me5OZWe1yaIFdAajlWkg",
                          "operationName": "Discriminator Filter",
                          "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                          "inputTypeVIID": "L2kHtdmLcyMbt0Zt9f7jTQ",
                          "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "outputTypeVIID": "IpcC_-FZbYBLK6_OlGI_ug",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "VSz0E8-wNVcu347tdqwUtA"
                        },
                        "supportedFilters": [
                          "[4s_DUfKnQ4aS-xRjewAfUQ::Cell Process Manager: Process Delete]",
                          "[5rFEDGLYRSiZCeChMnkCHQ::OCD Boolean Flag Set]",
                          "[KX0V_aQ3RzG01tzBS24MGw::OPC Intrinsic NOOP Action]",
                          "[L2mTv5LvT12WIYb0cYOsLA::Cell Process Manager Query]",
                          "[S1GqYjTtSQazSxkIL9vtpA::OPC Intrinsic Status Action]",
                          "[SdL0-5kmTuiNrWNu7zGZhg::Cell Process Manager: Process Create]",
                          "[VNaA0AMsTXawb32xLaNGTA::Cell Process Manager: Initialize]",
                          "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                          "[_yxWfFLnTqqN-UxRdd7W5w::OCD Boolean Flag Clear]",
                          "[aXju3wSBQnufe0r51Y04wg::Write Sub-Action Response]",
                          "[iyvk_9vhRn2qvrjOes5v7Q::Frame Latch: Write]",
                          "[r-JgxABoS_a-mSE2c1nvKA::Cell Process Manager: Process Query]"
                        ],
                        "options": {
                          "action": "getFilter"
                        }
                      },
                      "actionDispatcherFilterMap": {
                        "L2mTv5LvT12WIYb0cYOsLA": {
                          "filterDescriptor": {
                            "operationID": "L2mTv5LvT12WIYb0cYOsLA",
                            "operationName": "Cell Process Manager Query",
                            "operationDescription": "Performs a synchronous query of the Cell Process Manager's process digraph.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager Query Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "processes": {
                                      "____types": "jsObject",
                                      "query": {
                                        "____types": "jsObject"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____types": "jsObject"
                            },
                            "inputTypeVIID": "WP59HegrS284Hth_iKlJ5Q",
                            "inputTypeVDID": "jdyEhdD9D2LFtUiUq1yiOw",
                            "outputTypeVIID": "AmMOqx93V_LELH5sA5S39Q",
                            "outputTypeVDID": "7NzfCLYAdEOqnYzn5N59fA",
                            "operationVDID": "Gi7HxFZx6b5lC8Jc-ugzhg"
                          }
                        },
                        "VNaA0AMsTXawb32xLaNGTA": {
                          "filterDescriptor": {
                            "operationID": "VNaA0AMsTXawb32xLaNGTA",
                            "operationName": "Cell Process Manager: Initialize",
                            "operationDescription": "Performs initialization of Cell Process Manager cell process (the root and parent process of all cell processes executing in a CellProcess runtime host instance).",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Initialize Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "initialize": {
                                      "____types": "jsObject",
                                      "options": {
                                        "____accept": [
                                          "jsUndefined",
                                          "jsObject"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "9Z4DiWZgE5FZWn8BWGELxQ",
                            "inputTypeVDID": "x-u1EofawpIc4T7FPkAGYQ",
                            "outputTypeVIID": "lMKXDxhWJyUadol-UoiO1w",
                            "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                            "operationVDID": "329Gkp9dLDHMBCEweD_BSA"
                          }
                        },
                        "SdL0-5kmTuiNrWNu7zGZhg": {
                          "filterDescriptor": {
                            "operationID": "SdL0-5kmTuiNrWNu7zGZhg",
                            "operationName": "Cell Process Manager: Process Create",
                            "operationDescription": "Requests that the Cell Process Manager create a new cell process inside the CellProcessor runtime host instance.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Process Create Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "process": {
                                      "____types": "jsObject",
                                      "create": {
                                        "____types": "jsObject",
                                        "apmID": {
                                          "____accept": "jsString"
                                        },
                                        "cellProcessUniqueName": {
                                          "____accept": [
                                            "jsUndefined",
                                            "jsString"
                                          ]
                                        },
                                        "cellProcessInitData": {
                                          "____accept": "jsObject",
                                          "____defaultValue": {}
                                        },
                                        "parentCellProcess": {
                                          "____label": "Parent Cell Process Override",
                                          "____description": "Explicitly overrides default action behavior of using #, the action's outer apmBindingPath value, as the parent cell process for the new cell process.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "cellProcessID": {
                                            "____accept": [
                                              "jsUndefined",
                                              "jsString"
                                            ]
                                          },
                                          "apmBindingPath": {
                                            "____accept": [
                                              "jsUndefined",
                                              "jsString"
                                            ]
                                          },
                                          "cellProcessNamespace": {
                                            "____types": [
                                              "jsUndefined",
                                              "jsObject"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            },
                                            "cellProcessUniqueName": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsString"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____accept": [
                                  "jsNull",
                                  "jsString"
                                ],
                                "____defaultValue": null
                              },
                              "cellProcessID": {
                                "____accept": [
                                  "jsNull",
                                  "jsString"
                                ],
                                "____defaultValue": null
                              }
                            },
                            "inputTypeVIID": "QDRiVzJHN1R8D34LBGwj7w",
                            "inputTypeVDID": "4OoPR07C_v9TgpnKgcszAA",
                            "outputTypeVIID": "I_uaQqYwTc6JXEjnIn7x1w",
                            "outputTypeVDID": "SiNf_yYQsz88lV04PLIrIQ",
                            "operationVDID": "Z4PKzbtPS2hHTxgeeY8E2Q"
                          }
                        },
                        "4s_DUfKnQ4aS-xRjewAfUQ": {
                          "filterDescriptor": {
                            "operationID": "4s_DUfKnQ4aS-xRjewAfUQ",
                            "operationName": "Cell Process Manager: Process Delete",
                            "operationDescription": "Requests that the Cell Process Manager delete a branch of the cell process tree.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Process Delete Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "process": {
                                      "____types": "jsObject",
                                      "delete": {
                                        "____types": "jsObject",
                                        "cellProcessID": {
                                          "____accept": [
                                            "jsUndefined",
                                            "jsString"
                                          ]
                                        },
                                        "apmBindingPath": {
                                          "____accept": [
                                            "jsUndefined",
                                            "jsString"
                                          ]
                                        },
                                        "cellProcessNamespace": {
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "apmID": {
                                            "____accept": "jsString"
                                          },
                                          "cellProcessUniqueName": {
                                            "____accept": [
                                              "jsUndefined",
                                              "jsString"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____types": "jsObject",
                              "apmBindingPath": {
                                "____accept": "jsString"
                              },
                              "cellProcessID": {
                                "____accept": "jsString"
                              }
                            },
                            "inputTypeVIID": "03zn7aDOwRLqUUx_Yoxxjg",
                            "inputTypeVDID": "nCGlcEFiK6Fp_YHaLXFLZg",
                            "outputTypeVIID": "Q3j31XEnUGjaNC_FN5gxcw",
                            "outputTypeVDID": "9eKi_3wFnxJsHWIU3kSK7Q",
                            "operationVDID": "j0_lCQ9kkpRKXij0PX-7rg"
                          }
                        },
                        "r-JgxABoS_a-mSE2c1nvKA": {
                          "filterDescriptor": {
                            "operationID": "r-JgxABoS_a-mSE2c1nvKA",
                            "operationName": "Cell Process Manager: Process Query",
                            "operationDescription": "Performs a query on a specific cell process managed by the Cell Process Manager.",
                            "inputFilterSpec": {
                              "____label": "Cell Process Manager: Process Query Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "CellProcessor": {
                                    "____types": "jsObject",
                                    "process": {
                                      "____types": "jsObject",
                                      "query": {
                                        "____types": "jsObject",
                                        "resultSets": {
                                          "____types": "jsObject",
                                          "____defaultValue": {
                                            "parent": true,
                                            "ancestors": true,
                                            "children": true,
                                            "descendants": true
                                          },
                                          "parent": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          },
                                          "ancestors": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          },
                                          "children": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          },
                                          "descendants": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          }
                                        },
                                        "queryCellProcess": {
                                          "____label": "Query Cell Process Override",
                                          "____description": "Allows the caller to optionally override that default action behavior to specify the cell process ID to query.",
                                          "____types": [
                                            "jsUndefined",
                                            "jsObject"
                                          ],
                                          "cellProcessID": {
                                            "____accept": [
                                              "jsUndefined",
                                              "jsString"
                                            ]
                                          },
                                          "apmBindingPath": {
                                            "____accept": [
                                              "jsUndefined",
                                              "jsString"
                                            ]
                                          },
                                          "cellProcessNamespace": {
                                            "____types": [
                                              "jsUndefined",
                                              "jsObject"
                                            ],
                                            "apmID": {
                                              "____accept": "jsString"
                                            },
                                            "cellProcessUniqueName": {
                                              "____accept": [
                                                "jsUndefined",
                                                "jsString"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____label": "Query Cell Process Action Result",
                              "____description": "A descriptor object returned by act call to Cell Process Manager cell process query via response.result.actionResult.",
                              "____types": "jsObject",
                              "query": {
                                "____label": "Query Cell Process",
                                "____description": "The cell process ID and apmBindingPath of the queried cell process.",
                                "____types": "jsObject",
                                "cellProcessID": {
                                  "____accept": "jsString"
                                },
                                "apmBindingPath": {
                                  "____accept": "jsString"
                                },
                                "resultSets": {
                                  "____types": "jsObject",
                                  "parent": {
                                    "____accept": "jsBoolean"
                                  },
                                  "ancestors": {
                                    "____accept": "jsBoolean"
                                  },
                                  "children": {
                                    "____accept": "jsBoolean"
                                  },
                                  "descendants": {
                                    "____accept": "jsBoolean"
                                  }
                                }
                              },
                              "parent": {
                                "____label": "Parent Cell Process",
                                "____description": "The cell process ID and apmBindingPath of the queried cell process' parent cell process.",
                                "____types": [
                                  "jsUndefined",
                                  "jsObject"
                                ],
                                "cellProcessID": {
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                },
                                "apmBindingPath": {
                                  "____accept": [
                                    "jsNull",
                                    "jsString"
                                  ],
                                  "____defaultValue": null
                                }
                              },
                              "ancestors": {
                                "____label": "Ancestor Cell Processes",
                                "____description": "An array of cell process ID and apmBindingPath descriptor objects that include the queried cell process' parent, it's parent...",
                                "____types": [
                                  "jsUndefined",
                                  "jsArray"
                                ],
                                "element": {
                                  "____label": "Ancestor Cell Process",
                                  "____description": "The cell process ID and apmBindingPath of one of the queried cell process' ancestor cell process.",
                                  "____types": "jsObject",
                                  "cellProcessID": {
                                    "____accept": "jsString"
                                  },
                                  "apmBindingPath": {
                                    "____accept": "jsString"
                                  }
                                }
                              },
                              "children": {
                                "____label": "Child Cell Processes",
                                "____description": "An array of cell process ID and apmBindingPath descriptor objects that include the queried cell process' child processes.",
                                "____types": [
                                  "jsUndefined",
                                  "jsArray"
                                ],
                                "element": {
                                  "____label": "Child Cell Process",
                                  "____description": "The cell process ID and apmBindingPath of one of the queried cell process' child cell process(es).",
                                  "____types": "jsObject",
                                  "cellProcessID": {
                                    "____accept": "jsString"
                                  },
                                  "apmBindingPath": {
                                    "____accept": "jsString"
                                  }
                                }
                              },
                              "descendants": {
                                "____label": "Descendant Cell Processes",
                                "____description": "An array of cell process ID and apmBindingPath descriptor objects that include the queried cell process' children, their children...",
                                "____types": [
                                  "jsUndefined",
                                  "jsArray"
                                ],
                                "element": {
                                  "____label": "Descendant Cell Process",
                                  "____description": "The cell process ID and apmBindingPath of one of the queried cell process' descendant cell process(es).",
                                  "____types": "jsObject",
                                  "cellProcessID": {
                                    "____accept": "jsString"
                                  },
                                  "apmBindingPath": {
                                    "____accept": "jsString"
                                  }
                                }
                              }
                            },
                            "inputTypeVIID": "vtARkNRniM94mES9BVDdDg",
                            "inputTypeVDID": "whGv9nk1haRt9Oui1IEETw",
                            "outputTypeVIID": "JtnG3qmcahv2W5qo9IoPnw",
                            "outputTypeVDID": "3tZXFg8_2hUlErwRa-GaWA",
                            "operationVDID": "1uP73F72zdmp1UG_aYz-tw"
                          }
                        },
                        "iyvk_9vhRn2qvrjOes5v7Q": {
                          "filterDescriptor": {
                            "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                            "operationName": "Frame Latch: Write",
                            "operationDescription": "Writes the value made observable by frame latch APM instance.",
                            "inputFilterSpec": {
                              "____label": "Frame Latch: Write Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "frameLatch": {
                                        "____types": "jsObject",
                                        "write": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____label": "Frame Latch Bound Namespace Path",
                                            "____accept": "jsString"
                                          },
                                          "value": {
                                            "____label": "Write Value",
                                            "____opaque": true
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____label": "Write Frame Latch Result",
                              "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                              "____opaque": true
                            },
                            "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                            "inputTypeVDID": "ReMEnCXFT3yFkJ3JX6oz3g",
                            "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                            "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                            "operationVDID": "E7NA-ISmB6dh6uB3b1wMSw"
                          }
                        },
                        "_yxWfFLnTqqN-UxRdd7W5w": {
                          "filterDescriptor": {
                            "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                            "operationName": "OCD Boolean Flag Clear",
                            "operationDescription": "Set the Boolean-type OCD namespace specified by path to value false.",
                            "inputFilterSpec": {
                              "____label": "OCD Boolean Flag Clear Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "clearBooleanFlag": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                            "inputTypeVDID": "9JJ6pBweTCwI2oO98eA5jA",
                            "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                            "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                            "operationVDID": "22s0kmR4PDHNH1MwaETpSA"
                          }
                        },
                        "5rFEDGLYRSiZCeChMnkCHQ": {
                          "filterDescriptor": {
                            "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                            "operationName": "OCD Boolean Flag Set",
                            "operationDescription": "Set the Boolean-type OCD namespace specified by path to value true.",
                            "inputFilterSpec": {
                              "____label": "OCD Boolean Flag Set Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "setBooleanFlag": {
                                          "____types": "jsObject",
                                          "path": {
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                            "inputTypeVDID": "0SvJjLbCiM4zgfkcsCtG9w",
                            "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                            "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                            "operationVDID": "bCv1ksN_4DF7HKQweU68SA"
                          }
                        },
                        "Ve_kEFkGSMSgOqUWu9Yo_w": {
                          "filterDescriptor": {
                            "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                            "operationName": "OCD Read Namespace Indirect",
                            "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                            "inputFilterSpec": {
                              "____label": "OCD Read Namespace Indirect Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "cm": {
                                    "____types": "jsObject",
                                    "actions": {
                                      "____types": "jsObject",
                                      "ocd": {
                                        "____types": "jsObject",
                                        "readNamespaceIndirect": {
                                          "____types": "jsObject",
                                          "path2": {
                                            "____label": "Target Path Namespace Path",
                                            "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                            "____accept": "jsString"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____opaque": true
                            },
                            "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                            "inputTypeVDID": "IOgWXFaAcQ5ZA6pPH8_2xg",
                            "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                            "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "operationVDID": "0IU7E_qFb1e52MDt_6IqtA"
                          }
                        },
                        "aXju3wSBQnufe0r51Y04wg": {
                          "filterDescriptor": {
                            "operationID": "aXju3wSBQnufe0r51Y04wg",
                            "operationName": "Write Sub-Action Response",
                            "operationDescription": "A low-level utility action that dispatches a subaction returning the response to the caller and writing it also to the indicated OCD response namespace.",
                            "inputFilterSpec": {
                              "____label": "Write Sub-Action Response Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "core": {
                                    "____types": "jsObject",
                                    "writeSubactionResponse": {
                                      "____types": "jsObject",
                                      "subactionRequest": {
                                        "____label": "Sub-Action Request",
                                        "____description": "Some caller-specified action request that we're to dispatch on their behalf so that we can save the response in shared memory.",
                                        "____accept": "jsObject"
                                      },
                                      "writeResponsePath": {
                                        "____label": "Write Response Path",
                                        "____description": "Absolute (begins in ~), cell-relative (begins in #), OCD path to write the subaction response. Note that relative paths are also supported here.",
                                        "____accept": "jsString"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____label": "No Result (Default)",
                              "____description": "If you need your ControllerAction to return a response.result, declare actionResultSpec in your ControllerAction declaration.",
                              "____accept": "jsUndefined"
                            },
                            "inputTypeVIID": "HiwULbPvbF4NiFgugv_ZSg",
                            "inputTypeVDID": "nUNjRm6k756h54bBy4S8Eg",
                            "outputTypeVIID": "YXPCMgl_OxPwupnLbcirow",
                            "outputTypeVDID": "AV_f6Y45sFu_Mc8VmIkk7g",
                            "operationVDID": "CHvoeVRpOtYpgVSkh0mYBw"
                          }
                        },
                        "KX0V_aQ3RzG01tzBS24MGw": {
                          "filterDescriptor": {
                            "operationID": "KX0V_aQ3RzG01tzBS24MGw",
                            "operationName": "OPC Intrinsic NOOP Action",
                            "operationDescription": "OPC-intrinsic performs no operation (noop). When invoked via OPC.act, the effect is to perform no read/write operations on OPC-instanced shared memory. And, then perform an evaluation.",
                            "inputFilterSpec": {
                              "____label": "OPC Intrinsic NOOP Action Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "opc": {
                                    "____types": "jsObject",
                                    "noop": {
                                      "____accept": "jsBoolean",
                                      "____inValueSet": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____opaque": true
                            },
                            "inputTypeVIID": "txJFSr26_WFausq9BG5NZg",
                            "inputTypeVDID": "BiObVoNbI4_uMMaTBVkFXQ",
                            "outputTypeVIID": "kuQ7tcKRU28cS2Qj0GX17A",
                            "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "operationVDID": "x0rQE0TkE1dfHMftLnWXtA"
                          }
                        },
                        "S1GqYjTtSQazSxkIL9vtpA": {
                          "filterDescriptor": {
                            "operationID": "S1GqYjTtSQazSxkIL9vtpA",
                            "operationName": "OPC Intrinsic Status Action",
                            "operationDescription": "OPC-intrinsic performs a retrieval of transitive OPC instance status.",
                            "inputFilterSpec": {
                              "____label": "OPC Intrinsic Status Action Request",
                              "____types": "jsObject",
                              "context": {
                                "____label": "OPC Context Descriptor",
                                "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                                "____types": "jsObject",
                                "apmBindingPath": {
                                  "____label": "APM Binding Path",
                                  "____description": "Fully-qualified dot-delimited path to the current APM instance's associated data in the OCD instance.",
                                  "____accept": "jsString"
                                },
                                "ocdi": {
                                  "____label": "OCD Store Instance",
                                  "____description": "A reference to the OCD store instance managed by OPC.",
                                  "____accept": "jsObject"
                                },
                                "act": {
                                  "____label": "OPC.act Method",
                                  "____description": "A reference to ObservableProcessController.act method.",
                                  "____accept": "jsFunction"
                                }
                              },
                              "actionRequest": {
                                "____types": "jsObject",
                                "holarchy": {
                                  "____types": "jsObject",
                                  "opc": {
                                    "____types": "jsObject",
                                    "status": {
                                      "____accept": "jsBoolean",
                                      "____inValueSet": [
                                        true
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "outputFilterSpec": {
                              "____opaque": true
                            },
                            "inputTypeVIID": "vncGN9bjl9Mmy3r-EUnmKg",
                            "inputTypeVDID": "es2e3G-BC0wtoR59QSPlgg",
                            "outputTypeVIID": "A0mnQJBJD4gdX6rrM6Txtw",
                            "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                            "operationVDID": "LolDE0qGUVe0PlPtvVfktA"
                          }
                        }
                      },
                      "opcActorStack": [],
                      "evalCount": 1,
                      "lastEvalResponse": {
                        "error": null,
                        "result": {
                          "evalNumber": 0,
                          "summary": {
                            "counts": {
                              "bindings": 3,
                              "frames": 3,
                              "errors": 0,
                              "transitions": 2
                            }
                          },
                          "evalFrames": [
                            {
                              "summary": {
                                "counts": {
                                  "bindings": 1,
                                  "transitions": 1,
                                  "errors": 0
                                },
                                "reports": {
                                  "transitions": [
                                    "YI9gj9oX2hdfEV8RmbuZuw"
                                  ],
                                  "errors": []
                                }
                              },
                              "bindings": {
                                "YI9gj9oX2hdfEV8RmbuZuw": {
                                  "evalRequest": {
                                    "dataBinding": {
                                      "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                      "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                    },
                                    "initialStep": "uninitialized",
                                    "apmRef": {
                                      "id": "eCrCsTB0boCGM7H5dA5B5Q",
                                      "vdid": "mpMhiNoQyKA6DtXf9ePcBA",
                                      "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]",
                                      "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]."
                                    }
                                  },
                                  "evalResponse": {
                                    "status": "transitioned",
                                    "finishStep": "initializing",
                                    "phases": {
                                      "p1_toperator": [
                                        {
                                          "request": {
                                            "context": {
                                              "apmBindingPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                              "ocdi": {
                                                "z_mTe02hSWmaM1iRO1pBeA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "hybdu0VoQjWnOFs5vC3Tzw_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "c09ke74xRza4Q9u2Ly0NIA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "we5IUb__Smqwkl4ghRl3Lw_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "LVjhjYUcQXOYcbI_xbepJQ_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "8LE0CnuHRMOKoGXn1kHdNA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "XzNJP6LyTCOnhGPKpJIjzg_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "cYpoxyyZSwm19CqH3v7eLQ_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "TR7suTjQSKOBK5bGKztIcg_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "kAuEmZA9Qn24PEZLBygGyA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "UMlS451nSWq6yDZNwcUTaw_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                                                  "cellProcessTree": {
                                                    "revision": 0,
                                                    "digraph": {
                                                      "name": "Cell Process Tree Digraph Model",
                                                      "description": "Tracks parent/child relationships between dynamically created cellular processes executing within a CellProcessor runtime host instance.",
                                                      "vlist": [
                                                        {
                                                          "u": "U1NTU1paWlqwsLCwxMTExA",
                                                          "p": {
                                                            "apmBindingPath": "~",
                                                            "name": "Cell Process Manager"
                                                          }
                                                        }
                                                      ],
                                                      "elist": []
                                                    }
                                                  },
                                                  "__apmiStep": "ready"
                                                }
                                              },
                                              "transitionDispatcher": {
                                                "filterDescriptor": {
                                                  "operationID": "Edi-_R3Jwpl62Q_XgxQNdA",
                                                  "operationName": "Discriminator Filter",
                                                  "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                                                  "inputTypeVIID": "lshA78xfrMIO78K1QFJOKA",
                                                  "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                  "outputTypeVIID": "mWfElEHz7pWO0nR8x2FXCA",
                                                  "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                  "operationVDID": "__P0E7yjNVc9iY7tK8UUtA"
                                                },
                                                "supportedFilters": [
                                                  "[0JIva4IFSm6Xm7i38g8uUA::Logical OR]",
                                                  "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                  "[5P2MHjL4TXCqScp_xNrJyA::Cell Process Manager: Child Processes All In Step]",
                                                  "[6j5F3HmKTLG9Q8kD1-QWYA::Cell Process Manager: Ancestor Processes All In Step]",
                                                  "[9HNGDusyTtKpleXFae7O5A::Cell Process Manager: Parent Process Active]",
                                                  "[9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]",
                                                  "[DX5GfJcwRNq0xW20KzMSJQ::Cell Process Manager: Descendant Processes All In Step]",
                                                  "[DzlsRZBOReO03GSPsU3CIg::Cell Process Manager: Descendant Processes Any In Step]",
                                                  "[Fs6tE76WR5yTOdbwQ_N_FQ::Cell Process Manager: Descendant Processes Active]",
                                                  "[PHPSWivjRyK80Gtymsp-pA::Cell Process Manager: Parent Process In Step]",
                                                  "[TLSHkl73SO-utuzM7dyN2g::Logical NOT]",
                                                  "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                  "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                  "[YgABX95wR86GCYrYaDLISA::Logical AND]",
                                                  "[e89cwnP4Qd6MocAhzdOJgw::Logical TRUE]",
                                                  "[esuJGgmERrSV3AFvFOMyhw::Cell Process Manager: Child Processes Any In Step]",
                                                  "[gJnA-VJTTLa0g9TKFmjv1Q::Cell Process Manager: Ancestor Processes Active]",
                                                  "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                  "[jFxFmpHSSPaeWEFfLh8eWw::Cell Process Manager: Ancestor Processes Any In Step]",
                                                  "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                  "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                  "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]",
                                                  "[xIRhBHueTRGO0xq63UUbyQ::Cell Process Manager: Child Processes Active]"
                                                ],
                                                "options": {
                                                  "action": "getFilter"
                                                }
                                              }
                                            },
                                            "operatorRequest": {
                                              "always": true
                                            }
                                          },
                                          "response": {
                                            "error": null,
                                            "result": true
                                          }
                                        }
                                      ],
                                      "p2_exit": [],
                                      "p3_enter": [
                                        {
                                          "request": {
                                            "holarchy": {
                                              "CellProcessor": {
                                                "initialize": {}
                                              }
                                            }
                                          },
                                          "response": {
                                            "error": null,
                                            "result": {}
                                          }
                                        }
                                      ],
                                      "p4_finalize": {
                                        "error": null,
                                        "result": "initializing"
                                      }
                                    },
                                    "errors": {
                                      "p1_toperator": 0,
                                      "p2_exit": 0,
                                      "p3_enter": 0,
                                      "p4_finalize": 0,
                                      "total": 0
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "summary": {
                                "counts": {
                                  "bindings": 1,
                                  "transitions": 1,
                                  "errors": 0
                                },
                                "reports": {
                                  "transitions": [
                                    "YI9gj9oX2hdfEV8RmbuZuw"
                                  ],
                                  "errors": []
                                }
                              },
                              "bindings": {
                                "YI9gj9oX2hdfEV8RmbuZuw": {
                                  "evalRequest": {
                                    "dataBinding": {
                                      "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                      "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                    },
                                    "initialStep": "initializing",
                                    "apmRef": {
                                      "id": "eCrCsTB0boCGM7H5dA5B5Q",
                                      "vdid": "mpMhiNoQyKA6DtXf9ePcBA",
                                      "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]",
                                      "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]."
                                    }
                                  },
                                  "evalResponse": {
                                    "status": "transitioned",
                                    "finishStep": "ready",
                                    "phases": {
                                      "p1_toperator": [
                                        {
                                          "request": {
                                            "context": {
                                              "apmBindingPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                              "ocdi": {
                                                "z_mTe02hSWmaM1iRO1pBeA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "hybdu0VoQjWnOFs5vC3Tzw_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "c09ke74xRza4Q9u2Ly0NIA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "we5IUb__Smqwkl4ghRl3Lw_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "LVjhjYUcQXOYcbI_xbepJQ_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "vjz7U4NWRE2_UlAvAjmS6g_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "8LE0CnuHRMOKoGXn1kHdNA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "XzNJP6LyTCOnhGPKpJIjzg_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "cYpoxyyZSwm19CqH3v7eLQ_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "TR7suTjQSKOBK5bGKztIcg_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "kAuEmZA9Qn24PEZLBygGyA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "UMlS451nSWq6yDZNwcUTaw_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "3E27IH_CQeqBUFsGm4tIIA_CellProcesses": {
                                                  "cellProcessMap": {},
                                                  "revision": 0
                                                },
                                                "x7pM9bwcReupSRh0fcYTgw_CellProcessor": {
                                                  "cellProcessTree": {
                                                    "revision": 0,
                                                    "digraph": {
                                                      "name": "Cell Process Tree Digraph Model",
                                                      "description": "Tracks parent/child relationships between dynamically created cellular processes executing within a CellProcessor runtime host instance.",
                                                      "vlist": [
                                                        {
                                                          "u": "U1NTU1paWlqwsLCwxMTExA",
                                                          "p": {
                                                            "apmBindingPath": "~",
                                                            "name": "Cell Process Manager"
                                                          }
                                                        }
                                                      ],
                                                      "elist": []
                                                    }
                                                  },
                                                  "__apmiStep": "ready"
                                                }
                                              },
                                              "transitionDispatcher": {
                                                "filterDescriptor": {
                                                  "operationID": "Edi-_R3Jwpl62Q_XgxQNdA",
                                                  "operationName": "Discriminator Filter",
                                                  "operationDescription": "Retrieves a reference to the subfilter that should be used to process this request.",
                                                  "inputTypeVIID": "lshA78xfrMIO78K1QFJOKA",
                                                  "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                  "outputTypeVIID": "mWfElEHz7pWO0nR8x2FXCA",
                                                  "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                  "operationVDID": "__P0E7yjNVc9iY7tK8UUtA"
                                                },
                                                "supportedFilters": [
                                                  "[0JIva4IFSm6Xm7i38g8uUA::Logical OR]",
                                                  "[2w7n6KxdR8mdIliePJesLQ::OCD Compare Values]",
                                                  "[5P2MHjL4TXCqScp_xNrJyA::Cell Process Manager: Child Processes All In Step]",
                                                  "[6j5F3HmKTLG9Q8kD1-QWYA::Cell Process Manager: Ancestor Processes All In Step]",
                                                  "[9HNGDusyTtKpleXFae7O5A::Cell Process Manager: Parent Process Active]",
                                                  "[9tNY7o5GTUGH_xda2GhP-w::Cell Process In Step Operator]",
                                                  "[DX5GfJcwRNq0xW20KzMSJQ::Cell Process Manager: Descendant Processes All In Step]",
                                                  "[DzlsRZBOReO03GSPsU3CIg::Cell Process Manager: Descendant Processes Any In Step]",
                                                  "[Fs6tE76WR5yTOdbwQ_N_FQ::Cell Process Manager: Descendant Processes Active]",
                                                  "[PHPSWivjRyK80Gtymsp-pA::Cell Process Manager: Parent Process In Step]",
                                                  "[TLSHkl73SO-utuzM7dyN2g::Logical NOT]",
                                                  "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                  "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                  "[YgABX95wR86GCYrYaDLISA::Logical AND]",
                                                  "[e89cwnP4Qd6MocAhzdOJgw::Logical TRUE]",
                                                  "[esuJGgmERrSV3AFvFOMyhw::Cell Process Manager: Child Processes Any In Step]",
                                                  "[gJnA-VJTTLa0g9TKFmjv1Q::Cell Process Manager: Ancestor Processes Active]",
                                                  "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                  "[jFxFmpHSSPaeWEFfLh8eWw::Cell Process Manager: Ancestor Processes Any In Step]",
                                                  "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                  "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]",
                                                  "[oaF3-dXwQkusjD3I2o9-8g::OCD Array Length Equal to Value]",
                                                  "[xIRhBHueTRGO0xq63UUbyQ::Cell Process Manager: Child Processes Active]"
                                                ],
                                                "options": {
                                                  "action": "getFilter"
                                                }
                                              }
                                            },
                                            "operatorRequest": {
                                              "always": true
                                            }
                                          },
                                          "response": {
                                            "error": null,
                                            "result": true
                                          }
                                        }
                                      ],
                                      "p2_exit": [],
                                      "p3_enter": [],
                                      "p4_finalize": {
                                        "error": null,
                                        "result": "ready"
                                      }
                                    },
                                    "errors": {
                                      "p1_toperator": 0,
                                      "p2_exit": 0,
                                      "p3_enter": 0,
                                      "p4_finalize": 0,
                                      "total": 0
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "summary": {
                                "counts": {
                                  "bindings": 1,
                                  "transitions": 0,
                                  "errors": 0
                                },
                                "reports": {
                                  "transitions": [],
                                  "errors": []
                                }
                              },
                              "bindings": {
                                "YI9gj9oX2hdfEV8RmbuZuw": {
                                  "evalRequest": {
                                    "dataBinding": {
                                      "dataPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor",
                                      "specPath": "~.x7pM9bwcReupSRh0fcYTgw_CellProcessor"
                                    },
                                    "initialStep": "ready",
                                    "apmRef": {
                                      "id": "eCrCsTB0boCGM7H5dA5B5Q",
                                      "vdid": "mpMhiNoQyKA6DtXf9ePcBA",
                                      "name": "Cell Process Manager [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]",
                                      "description": "Cell process manager root process for CellProcessor [tydUf2gSSgSjSmrrF8nkyw::CPM Descendant Processes All In Step Test]."
                                    }
                                  },
                                  "evalResponse": {
                                    "status": "noop",
                                    "finishStep": "ready",
                                    "phases": {
                                      "p1_toperator": [],
                                      "p2_exit": [],
                                      "p3_enter": [],
                                      "p4_finalize": null
                                    },
                                    "errors": {
                                      "p1_toperator": 0,
                                      "p2_exit": 0,
                                      "p3_enter": 0,
                                      "p4_finalize": 0,
                                      "total": 0
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "constructionWarnings": []
                    }
                  },
                  "actionEvaluations": []
                }
              }
            }
          }
        }
      }
    }
  }
}
