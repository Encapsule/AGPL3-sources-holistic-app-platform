{
  "dosRgxmiR66ongCbJB78ow": {
    "XsVRVdrxTNvzPj7OQrDwAg": {
      "zUoUas3CTj2HLDfpNf4NTw": {
        "harnessRequest": {
          "id": "zUoUas3CTj2HLDfpNf4NTw",
          "name": "d2r2/React Client Output Processor OPM #1",
          "description": "Attempt to instantiate the current d2r2/React Client Output Processor OPM declaration via our test harness.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "ObservableProcessModel": {
                  "constructorRequest": {
                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                    "name": "d2r2/React Output Processor",
                    "description": "Manages React client view rehydration. And, subsequent dynamic updates to the client view content d2r2 <ComponentRouter/> and Facebook React RTL's.",
                    "opmDataSpec": {
                      "____label": "d2r2/React Output Processor",
                      "____description": "Shared memory definition for the d2r2/React Output Processor.",
                      "____types": "jsObject",
                      "____defaultValue": {},
                      "inputs": {
                        "____label": "Processor Inputs",
                        "____types": "jsObject",
                        "____defaultValue": {},
                        "ComponentRouter": {
                          "____accept": [
                            "jsNull",
                            "jsObject"
                          ],
                          "____defaultValue": null
                        },
                        "DOMElement": {
                          "____accept": [
                            "jsNull",
                            "jsObject"
                          ],
                          "____defaultValue": null
                        },
                        "pathDataContext": {
                          "____label": "Data Context OCD Path",
                          "____description": "Fully-qualified OCD path of the descriptor object, target, to be deep copied and passed to <ComponentRouter/> via this.props = {...target}.",
                          "____accept": [
                            "jsNull",
                            "jsString"
                          ],
                          "____defaultValue": null
                        },
                        "pathRenderData": {
                          "____label": "Render Data OCD Path",
                          "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                          "____accept": [
                            "jsNull",
                            "jsString"
                          ],
                          "____defaultValue": null
                        },
                        "clock": {
                          "____label": "React Output Processor Clock",
                          "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                          "____types": "jsObject",
                          "____appdsl": {
                            "opm": "z_mTe02hSWmaM1iRO1pBeA"
                          },
                          "value": {
                            "____label": "Render Info",
                            "____description": "Info useful for debugging the d2r2/React Output Processor.",
                            "____types": "jsObject",
                            "renderCount": {
                              "____accept": "jsNumber"
                            }
                          }
                        }
                      }
                    },
                    "steps": {
                      "uninitialized": {
                        "description": "Default OPM process step.",
                        "transitions": [
                          {
                            "transitionIf": {
                              "always": true
                            },
                            "nextStep": "waiting"
                          }
                        ]
                      },
                      "waiting": {
                        "description": "Waiting for input values to be specified.",
                        "transitions": [
                          {
                            "transitionIf": {
                              "and": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.ComponentRouter"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.DOMElement"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.pathDataContext"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.pathRenderData"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "nextStep": "initialized"
                          }
                        ]
                      },
                      "initialized": {
                        "description": "All inputs have been specified. Waiting for clock signal.",
                        "transitions": [
                          {
                            "transitionIf": {
                              "holarchy": {
                                "sml": {
                                  "operators": {
                                    "opmInStep": {
                                      "path": "#.clock",
                                      "step": "updated"
                                    }
                                  }
                                }
                              }
                            },
                            "nextStep": "rehydrating"
                          }
                        ]
                      },
                      "rehydrating": {
                        "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                        "transitions": [
                          {
                            "transitionIf": {
                              "always": true
                            },
                            "nextStep": "ready"
                          }
                        ]
                      },
                      "ready": {
                        "description": "Ready to update client application view on next clock signal.",
                        "transitions": [
                          {
                            "transitionIf": {
                              "holarchy": {
                                "sml": {
                                  "operators": {
                                    "opmInStep": {
                                      "path": "#.clock",
                                      "step": "updated"
                                    }
                                  }
                                }
                              }
                            },
                            "nextStep": "rendering"
                          }
                        ]
                      },
                      "rendering": {
                        "description": "Rendering client application view updates.",
                        "transitions": [
                          {
                            "transitionIf": {
                              "always": true
                            },
                            "nextStep": "ready"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "mC3pPO5wS3SxvhgZgMjsJQ": {
                "zUoUas3CTj2HLDfpNf4NTw": {
                  "isValid": true,
                  "toJSON": {
                    "id": "IxoJ83u0TXmG7PLUYBvsyg",
                    "name": "d2r2/React Output Processor",
                    "description": "Manages React client view rehydration. And, subsequent dynamic updates to the client view content d2r2 <ComponentRouter/> and Facebook React RTL's.",
                    "opmDataSpec": {
                      "____label": "d2r2/React Output Processor",
                      "____description": "Shared memory definition for the d2r2/React Output Processor.",
                      "____types": "jsObject",
                      "____defaultValue": {},
                      "inputs": {
                        "____label": "Processor Inputs",
                        "____types": "jsObject",
                        "____defaultValue": {},
                        "ComponentRouter": {
                          "____accept": [
                            "jsNull",
                            "jsObject"
                          ],
                          "____defaultValue": null
                        },
                        "DOMElement": {
                          "____accept": [
                            "jsNull",
                            "jsObject"
                          ],
                          "____defaultValue": null
                        },
                        "pathDataContext": {
                          "____label": "Data Context OCD Path",
                          "____description": "Fully-qualified OCD path of the descriptor object, target, to be deep copied and passed to <ComponentRouter/> via this.props = {...target}.",
                          "____accept": [
                            "jsNull",
                            "jsString"
                          ],
                          "____defaultValue": null
                        },
                        "pathRenderData": {
                          "____label": "Render Data OCD Path",
                          "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                          "____accept": [
                            "jsNull",
                            "jsString"
                          ],
                          "____defaultValue": null
                        },
                        "clock": {
                          "____label": "React Output Processor Clock",
                          "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                          "____types": "jsObject",
                          "____appdsl": {
                            "opm": "z_mTe02hSWmaM1iRO1pBeA"
                          },
                          "value": {
                            "____label": "Render Info",
                            "____description": "Info useful for debugging the d2r2/React Output Processor.",
                            "____types": "jsObject",
                            "renderCount": {
                              "____accept": "jsNumber"
                            }
                          }
                        }
                      }
                    },
                    "steps": {
                      "uninitialized": {
                        "description": "Default OPM process step.",
                        "actions": {
                          "enter": [],
                          "exit": []
                        },
                        "transitions": [
                          {
                            "transitionIf": {
                              "always": true
                            },
                            "nextStep": "waiting"
                          }
                        ]
                      },
                      "waiting": {
                        "description": "Waiting for input values to be specified.",
                        "actions": {
                          "enter": [],
                          "exit": []
                        },
                        "transitions": [
                          {
                            "transitionIf": {
                              "and": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.ComponentRouter"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.DOMElement"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.pathDataContext"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isNamespaceTruthy": {
                                            "path": "#.inputs.pathRenderData"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "nextStep": "initialized"
                          }
                        ]
                      },
                      "initialized": {
                        "description": "All inputs have been specified. Waiting for clock signal.",
                        "actions": {
                          "enter": [],
                          "exit": []
                        },
                        "transitions": [
                          {
                            "transitionIf": {
                              "holarchy": {
                                "sml": {
                                  "operators": {
                                    "opmInStep": {
                                      "path": "#.clock",
                                      "step": "updated"
                                    }
                                  }
                                }
                              }
                            },
                            "nextStep": "rehydrating"
                          }
                        ]
                      },
                      "rehydrating": {
                        "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                        "actions": {
                          "enter": [],
                          "exit": []
                        },
                        "transitions": [
                          {
                            "transitionIf": {
                              "always": true
                            },
                            "nextStep": "ready"
                          }
                        ]
                      },
                      "ready": {
                        "description": "Ready to update client application view on next clock signal.",
                        "actions": {
                          "enter": [],
                          "exit": []
                        },
                        "transitions": [
                          {
                            "transitionIf": {
                              "holarchy": {
                                "sml": {
                                  "operators": {
                                    "opmInStep": {
                                      "path": "#.clock",
                                      "step": "updated"
                                    }
                                  }
                                }
                              }
                            },
                            "nextStep": "rendering"
                          }
                        ]
                      },
                      "rendering": {
                        "description": "Rendering client application view updates.",
                        "actions": {
                          "enter": [],
                          "exit": []
                        },
                        "transitions": [
                          {
                            "transitionIf": {
                              "always": true
                            },
                            "nextStep": "ready"
                          }
                        ]
                      }
                    }
                  },
                  "getID": "IxoJ83u0TXmG7PLUYBvsyg",
                  "getName": "d2r2/React Output Processor",
                  "getDescription": "Manages React client view rehydration. And, subsequent dynamic updates to the client view content d2r2 <ComponentRouter/> and Facebook React RTL's.",
                  "getDataSpec": {
                    "____label": "d2r2/React Output Processor",
                    "____description": "Shared memory definition for the d2r2/React Output Processor.",
                    "____types": "jsObject",
                    "____defaultValue": {},
                    "inputs": {
                      "____label": "Processor Inputs",
                      "____types": "jsObject",
                      "____defaultValue": {},
                      "ComponentRouter": {
                        "____accept": [
                          "jsNull",
                          "jsObject"
                        ],
                        "____defaultValue": null
                      },
                      "DOMElement": {
                        "____accept": [
                          "jsNull",
                          "jsObject"
                        ],
                        "____defaultValue": null
                      },
                      "pathDataContext": {
                        "____label": "Data Context OCD Path",
                        "____description": "Fully-qualified OCD path of the descriptor object, target, to be deep copied and passed to <ComponentRouter/> via this.props = {...target}.",
                        "____accept": [
                          "jsNull",
                          "jsString"
                        ],
                        "____defaultValue": null
                      },
                      "pathRenderData": {
                        "____label": "Render Data OCD Path",
                        "____description": "Fully-qualified OCD path of the descriptor object to be deep copied and passed to <ComponentRouter/> via this.props.renderData.",
                        "____accept": [
                          "jsNull",
                          "jsString"
                        ],
                        "____defaultValue": null
                      },
                      "clock": {
                        "____label": "React Output Processor Clock",
                        "____description": "A frame latch used to trigger dynamic rerendering of the client view via d2r2 <ComponentRouter/> and Facebook React RTL's.",
                        "____types": "jsObject",
                        "____appdsl": {
                          "opm": "z_mTe02hSWmaM1iRO1pBeA"
                        },
                        "value": {
                          "____label": "Render Info",
                          "____description": "Info useful for debugging the d2r2/React Output Processor.",
                          "____types": "jsObject",
                          "renderCount": {
                            "____accept": "jsNumber"
                          }
                        }
                      }
                    }
                  },
                  "getDigraph": {
                    "name": "[IxoJ83u0TXmG7PLUYBvsyg::d2r2/React Output Processor] OPM Digraph",
                    "description": "Manages React client view rehydration. And, subsequent dynamic updates to the client view content d2r2 <ComponentRouter/> and Facebook React RTL's.",
                    "vlist": [
                      {
                        "u": "uninitialized",
                        "p": {
                          "description": "Default OPM process step.",
                          "actions": {
                            "enter": [],
                            "exit": []
                          }
                        }
                      },
                      {
                        "u": "waiting",
                        "p": {
                          "description": "Waiting for input values to be specified.",
                          "actions": {
                            "enter": [],
                            "exit": []
                          }
                        }
                      },
                      {
                        "u": "initialized",
                        "p": {
                          "description": "All inputs have been specified. Waiting for clock signal.",
                          "actions": {
                            "enter": [],
                            "exit": []
                          }
                        }
                      },
                      {
                        "u": "rehydrating",
                        "p": {
                          "description": "Rehydrating the client application view and registering user input and DOM event handlers.",
                          "actions": {
                            "enter": [],
                            "exit": []
                          }
                        }
                      },
                      {
                        "u": "ready",
                        "p": {
                          "description": "Ready to update client application view on next clock signal.",
                          "actions": {
                            "enter": [],
                            "exit": []
                          }
                        }
                      },
                      {
                        "u": "rendering",
                        "p": {
                          "description": "Rendering client application view updates.",
                          "actions": {
                            "enter": [],
                            "exit": []
                          }
                        }
                      }
                    ],
                    "elist": [
                      {
                        "e": {
                          "u": "uninitialized",
                          "v": "waiting"
                        },
                        "p": {
                          "priority": 0,
                          "operator": {
                            "always": true
                          }
                        }
                      },
                      {
                        "e": {
                          "u": "waiting",
                          "v": "initialized"
                        },
                        "p": {
                          "priority": 0,
                          "operator": {
                            "and": [
                              {
                                "holarchy": {
                                  "sml": {
                                    "operators": {
                                      "ocd": {
                                        "isNamespaceTruthy": {
                                          "path": "#.inputs.ComponentRouter"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "holarchy": {
                                  "sml": {
                                    "operators": {
                                      "ocd": {
                                        "isNamespaceTruthy": {
                                          "path": "#.inputs.DOMElement"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "holarchy": {
                                  "sml": {
                                    "operators": {
                                      "ocd": {
                                        "isNamespaceTruthy": {
                                          "path": "#.inputs.pathDataContext"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "holarchy": {
                                  "sml": {
                                    "operators": {
                                      "ocd": {
                                        "isNamespaceTruthy": {
                                          "path": "#.inputs.pathRenderData"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      },
                      {
                        "e": {
                          "u": "initialized",
                          "v": "rehydrating"
                        },
                        "p": {
                          "priority": 0,
                          "operator": {
                            "holarchy": {
                              "sml": {
                                "operators": {
                                  "opmInStep": {
                                    "path": "#.clock",
                                    "step": "updated"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "e": {
                          "u": "rehydrating",
                          "v": "ready"
                        },
                        "p": {
                          "priority": 0,
                          "operator": {
                            "always": true
                          }
                        }
                      },
                      {
                        "e": {
                          "u": "ready",
                          "v": "rendering"
                        },
                        "p": {
                          "priority": 0,
                          "operator": {
                            "holarchy": {
                              "sml": {
                                "operators": {
                                  "opmInStep": {
                                    "path": "#.clock",
                                    "step": "updated"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "e": {
                          "u": "rendering",
                          "v": "ready"
                        },
                        "p": {
                          "priority": 0,
                          "operator": {
                            "always": true
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
