{
  "dosRgxmiR66ongCbJB78ow": {
    "bvj2u51Uw5_SD1TRZNpwXA": {
      "uZN6-qpIQO6CkwmLDWtMCw": {
        "harnessRequest": {
          "id": "uZN6-qpIQO6CkwmLDWtMCw",
          "name": "OPC Frame Latch Test #1",
          "description": "Try to apply the Frame Latch OPM in an OPC system.",
          "vectorRequest": {
            "holistic": {
              "holarchy": {
                "ObservableProcessController": {
                  "constructorRequest": {
                    "id": "uZN6-qpIQO6CkwmLDWtMCw",
                    "name": "OPC Frame Latch Test #1",
                    "description": "Try to apply the Frame Latch OPM in an OPC system.",
                    "ocdTemplateSpec": {
                      "____types": "jsObject",
                      "frameLatch": {
                        "____types": "jsObject",
                        "____appdsl": {
                          "opm": "z_mTe02hSWmaM1iRO1pBeA"
                        },
                        "value": {
                          "____accept": "jsString",
                          "____defaultValue": "default"
                        }
                      }
                    },
                    "observableProcessModelSets": [
                      [
                        {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "name": "Observable Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                          "opmDataSpec": {
                            "____label": "Observable Frame Latch",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            }
                          },
                          "steps": {
                            "uninitialized": {
                              "description": "Default starting process step.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            },
                            "updated": {
                              "description": "The value managed by the frame latch has been written.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "clearBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "waiting"
                                }
                              ]
                            },
                            "waiting": {
                              "description": "Frame latch value has not changed since last signalled update.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isBooleanFlagSet": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    ],
                    "transitionOperatorSets": [
                      [
                        {
                          "operationID": "YgABX95wR86GCYrYaDLISA",
                          "operationName": "AND Transition Expression Operator",
                          "operationDescription": "Returns Boolean true iff all suboperations return true.",
                          "inputFilterSpec": {
                            "____label": "AND Transition Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "and": {
                                "____types": "jsArray",
                                "operandOperatorVariant": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "Th67oiutPj5XPCPBQs2sNg",
                          "inputTypeVDID": "MeJe-Q8yBS3yvjg_XMejfQ",
                          "outputTypeVIID": "4qvesBGXikOFKTURfESw5A",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "9oSpRLZTtZMBRc-cqI1Bcg"
                        },
                        {
                          "operationID": "TLSHkl73SO-utuzM7dyN2g",
                          "operationName": "NOT Transition Expression Operator",
                          "operationDescription": "Returns Boolean true iff the suboperator returns false (i.e. it logically complements or inverts whatever operator it's applied to).",
                          "inputFilterSpec": {
                            "____label": "NOT Transition Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "not": {
                                "____accept": "jsObject"
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "VqL0404urku_v3ZjcOkZTg",
                          "inputTypeVDID": "KuRBS4GhA46J_J246YJDXQ",
                          "outputTypeVIID": "V-JP28o44DYdLwju7U90ag",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "MeDbRHTCeJPIz1ScBEN8cg"
                        },
                        {
                          "operationID": "0JIva4IFSm6Xm7i38g8uUA",
                          "operationName": "OR Transition Expression Operator",
                          "operationDescription": "Returns Boolean true iff any suboperations return true.",
                          "inputFilterSpec": {
                            "____label": "OR Transition Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "or": {
                                "____types": "jsArray",
                                "operandOperatorVariant": {
                                  "____accept": "jsObject"
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "BIKphTRxk84K8Rl5zYJ-FQ",
                          "inputTypeVDID": "0di392MNsGr0Re6YF1w80A",
                          "outputTypeVIID": "703oxzDhgbWqvMb1deWsLg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "4GPYRIWdE5Nmy3OcOLsucg"
                        },
                        {
                          "operationID": "e89cwnP4Qd6MocAhzdOJgw",
                          "operationName": "Always returns Boolean true unconditionally.",
                          "operationDescription": "Always returns true.",
                          "inputFilterSpec": {
                            "____label": "Always returns Boolean true unconditionally. Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "always": {
                                "____accept": "jsBoolean",
                                "____inValueSet": [
                                  true
                                ]
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "mlUI4xt2DYMMjmvmPlUqzQ",
                          "inputTypeVDID": "0F57_Y1l7dHCn6STVVj8bQ",
                          "outputTypeVIID": "gGOXfWmLkCUR1ey8s8jjGA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "7gxZROb4cZP8fnSc1KDncg"
                        },
                        {
                          "operationID": "9tNY7o5GTUGH_xda2GhP-w",
                          "operationName": "OPM In Step Expression Operator",
                          "operationDescription": "Returns Boolean true iff the indicated OPM instance is in the indicated process step.",
                          "inputFilterSpec": {
                            "____label": "OPM In Step Expression Operator Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "opmi": {
                                      "____types": "jsObject",
                                      "atStep": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "step": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "knid7eOPhDEUkIr1WhyHiw",
                          "inputTypeVDID": "JI94wB-snzhgo2940gNnzg",
                          "outputTypeVIID": "VWoiQV-oR4XaKTrRp-c6vA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "woWNRFat8ZO6svOctDGrcg"
                        },
                        {
                          "operationID": "kD1PcgqYQlm7fJatNG2ZsA",
                          "operationName": "OCD Namespace Is Truthy",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is truthy.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Truthy Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceTruthy": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "SPYSm6CWX2bR_YovYBc5vA",
                          "inputTypeVDID": "IiI0bML4bTrZdYSc77E39Q",
                          "outputTypeVIID": "XJAeGf11HNVoWr_Aw6IxpQ",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "vtYKROJmXJP3EVmc3IKncg"
                        },
                        {
                          "operationID": "UeLs9PcASwuC7KR190eYhA",
                          "operationName": "OCD Boolean Flag Is Set",
                          "operationDescription": "Returns Boolean true iff the indicated Boolean flag namespace is true.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Is Set Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isBooleanFlagSet": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "l0QuhcthqVCst39xt0A_SA",
                          "inputTypeVDID": "XSI0NmT4bc-9dYTNU7E3Qg",
                          "outputTypeVIID": "IV0lvKVpYiaD4deX05nL1g",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "6RmnRISJAJPp2Z6ccblscg"
                        },
                        {
                          "operationID": "XxX_a1sQS1OlJbWAYfx6tQ",
                          "operationName": "OCD Namespace Is Less Than Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is less than the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Less Than Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceLessThanValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "SdjtRCNawPzfg3fuyxpeog",
                          "inputTypeVDID": "Znn2uKuYUmA8-tmOt7HRFA",
                          "outputTypeVIID": "C3a0V2HEKW7fH5xudFSe2Q",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "l-TSRDgcUZNJ4w-c2qt7cg"
                        },
                        {
                          "operationID": "ggsavKiARsq7rjwn-lxdfA",
                          "operationName": "OCD Namespace Is Greater Than Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is greater than the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Greater Than Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceGreaterThanValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "CF-H4WojwJ7B1YyWvKlnMQ",
                          "inputTypeVDID": "U3JbRc64xWRCUBUeGg2Qyw",
                          "outputTypeVIID": "vevJRLqsD_7D5r52vqsYNg",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "ssypRONwTpOrkpKcgbOtcg"
                        },
                        {
                          "operationID": "k7THIKKDQMKOac1Rxh9tEQ",
                          "operationName": "OCD Namespace Is Identical To Value",
                          "operationDescription": "Returns Boolean true iff the indicated OCD namespace is identical (i.e. strictly equal (===)) to the indicated value. Limited to number and string value comparisons only.",
                          "inputFilterSpec": {
                            "____label": "OCD Namespace Is Identical To Value Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "transitionDispatcher": {
                                "____label": "OPC Transition Dispatcher",
                                "____description": "A reference to an OPC instance's transition operator dispatcher instance.",
                                "____accept": "jsObject"
                              }
                            },
                            "operatorRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "operators": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "isNamespaceIdenticalToValue": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____accept": [
                                            "jsString",
                                            "jsNumber"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsBoolean"
                          },
                          "inputTypeVIID": "2lapAiv6Y2wX3rSyYd_aXA",
                          "inputTypeVDID": "5HJb-Ne4xWYDUBVecg2QyQ",
                          "outputTypeVIID": "a4e-UB9BqYvz755bPVZ4AA",
                          "outputTypeVDID": "UD3UqnNuxwSJpW-kQ0DxUA",
                          "operationVDID": "aItWRHCBOpMQ6CWc0roYcg"
                        }
                      ]
                    ],
                    "controllerActionSets": [
                      [
                        {
                          "operationID": "_yxWfFLnTqqN-UxRdd7W5w",
                          "operationName": "OCD Boolean Flag Clear",
                          "operationDescription": "Set the Boolean-type OCD namespace specified by path to value false.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Clear Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "clearBooleanFlag": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "Q26xScNwSEHmeE4xjO_vtg",
                          "inputTypeVDID": "9KJ61BzJTOYImYOv8ZM5CA",
                          "outputTypeVIID": "_Jrf_S2nEWwsSx89q6ealg",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "22q-kmTKtTHNrr0waO5nSA"
                        },
                        {
                          "operationID": "5rFEDGLYRSiZCeChMnkCHQ",
                          "operationName": "OCD Boolean Flag Set",
                          "operationDescription": "Set the Boolean-type OCD namespace specified by path to value true.",
                          "inputFilterSpec": {
                            "____label": "OCD Boolean Flag Set Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "setBooleanFlag": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "YJSR1JZOriuhfXfKbnMV4Q",
                          "inputTypeVDID": "0aDJ9bYLiGczLvkVsJtGVA",
                          "outputTypeVIID": "kyxCxyo_W507HuHlFVvwIQ",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "bC2bksMrjTF7fEIweT-ASA"
                        },
                        {
                          "operationID": "iyvk_9vhRn2qvrjOes5v7Q",
                          "operationName": "Frame Latch: Write",
                          "operationDescription": "Writes the value made observable by frame latch OPM instance.",
                          "inputFilterSpec": {
                            "____label": "Frame Latch: Write Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "frameLatch": {
                                      "____types": "jsObject",
                                      "write": {
                                        "____types": "jsObject",
                                        "path": {
                                          "____label": "Frame Latch Bound Namespace Path",
                                          "____accept": "jsString"
                                        },
                                        "value": {
                                          "____label": "Write Value",
                                          "____opaque": true
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____label": "Write Frame Latch Result",
                            "____description": "This is generically a reference to the value written to the frame latch indicated by 'path'.",
                            "____opaque": true
                          },
                          "inputTypeVIID": "dOV6tM17rLvrsqbIM4LzCg",
                          "inputTypeVDID": "CBUEuxn9T06VG532f5Ezxw",
                          "outputTypeVIID": "LPeeiMV42LNeAhthe2myDQ",
                          "outputTypeVDID": "8-d-OpyoAkX4G5bt5_5T_Q",
                          "operationVDID": "E1VL-IRXcqdhnLh3bwcMSw"
                        },
                        {
                          "operationID": "Ve_kEFkGSMSgOqUWu9Yo_w",
                          "operationName": "OCD Read Namespace Indirect",
                          "operationDescription": "Reads and returns the value of OCD namespace via path indirection.",
                          "inputFilterSpec": {
                            "____label": "OCD Read Namespace Indirect Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ocd": {
                                      "____types": "jsObject",
                                      "readNamespaceIndirect": {
                                        "____types": "jsObject",
                                        "path2": {
                                          "____label": "Target Path Namespace Path",
                                          "____description": "The OCD path of the string namespace containing the OCD path of the target namespace to read.",
                                          "____accept": "jsString"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____opaque": true
                          },
                          "inputTypeVIID": "r0nWow8E0BIohA7UDujmMw",
                          "inputTypeVDID": "nsUj_P5arQ5jRvvexu8DsA",
                          "outputTypeVIID": "QKKFgPFZL00DATFNfFLfiQ",
                          "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                          "operationVDID": "0NacE_oXqVe5Glvt_yxvtA"
                        },
                        {
                          "operationID": "d2vRmtn2QA6Ox8W4PwDWNA",
                          "operationName": "d2r2/React Client Display Adaptor: Rehydrate",
                          "operationDescription": "Rehydrate server-rendered React view and connect UI event handlers.",
                          "inputFilterSpec": {
                            "____label": "d2r2/React Client Display Adaptor: Rehydrate Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "react": {
                                      "____types": "jsObject",
                                      "rehydrate": {
                                        "____types": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "dJjTV9BAp4Z9pSavLeZ-wQ",
                          "inputTypeVDID": "QsM3rOgn6il6aRhn9xqRBA",
                          "outputTypeVIID": "8JLm4g169JeAd37FiSdhHA",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "6miUkiFTADGWytkw6x7fSA"
                        },
                        {
                          "operationID": "TlGPCf7uSf2cZMGZCcU85A",
                          "operationName": "DOM Client Location Proccessor: Initialize",
                          "operationDescription": "Adds a listener to the brower's 'hashchange' event and redirects subsequent event callbacks to the ControllerAction peTmTek_SB64-ofd_PSGj.",
                          "inputFilterSpec": {
                            "____label": "DOM Client Location Proccessor: Initialize Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ClientDOMLocationProcessor": {
                                      "____types": "jsObject",
                                      "initialize": {
                                        "____accept": "jsBoolean",
                                        "____inValueSet": [
                                          true
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "KcjWETRZ6ZKqUaStr-bLlw",
                          "inputTypeVDID": "mfaBKDN9kltgaZJiwNko_A",
                          "outputTypeVIID": "whU_teLC4EBk4cHg3IMb1A",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "IHxNkuvceTH3VXIwPRZ0SA"
                        },
                        {
                          "operationID": "peTmTek_SB64-ofd_PSGjg",
                          "operationName": "DOM Client Location Processor: 'hashchange'",
                          "operationDescription": "Accepts info about the 'hashchange' event and encapsulates the details of updating the DOM Client Locaiton Processor OPM memory to record the event details.",
                          "inputFilterSpec": {
                            "____label": "DOM Client Location Processor: 'hashchange' Request",
                            "____types": "jsObject",
                            "context": {
                              "____label": "OPC Context Descriptor",
                              "____description": "An object containing references to OPC instance-managed runtime API's available to transition operator filters.",
                              "____types": "jsObject",
                              "opmBindingPath": {
                                "____label": "OPM Binding Path",
                                "____description": "Fully-qualified dot-delimited path to the current OPM instance's associated data in the OCD instance.",
                                "____accept": "jsString"
                              },
                              "ocdi": {
                                "____label": "OCD Store Instance",
                                "____description": "A reference to the OCD store instance managed by OPC.",
                                "____accept": "jsObject"
                              },
                              "act": {
                                "____label": "OPC.act Method",
                                "____description": "A reference to ObservableProcessController.act method.",
                                "____accept": "jsFunction"
                              }
                            },
                            "actionRequest": {
                              "____types": "jsObject",
                              "holarchy": {
                                "____types": "jsObject",
                                "sml": {
                                  "____types": "jsObject",
                                  "actions": {
                                    "____types": "jsObject",
                                    "ClientDOMLocationProcessor": {
                                      "____types": "jsObject",
                                      "sinkEvent": {
                                        "____types": "jsObject",
                                        "hashchangeEventDescriptor": {
                                          "____accept": "jsObject"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputFilterSpec": {
                            "____accept": "jsUndefined"
                          },
                          "inputTypeVIID": "jMDSigpNQiytsxBBL5EuAg",
                          "inputTypeVDID": "P1ap7ppsVfwGi8-3l5Pk5w",
                          "outputTypeVIID": "1JPeHOASC2_0nFByiFxbHQ",
                          "outputTypeVDID": "xHanI1kT9ivLTVhizlh1ng",
                          "operationVDID": "LLEIkux7PDFnSUUwLVgNSA"
                        }
                      ]
                    ]
                  },
                  "actRequests": [
                    {
                      "actorName": "uZN6-qpIQO6CkwmLDWtMCw test action call",
                      "actorDescription": "A simple attempt to set a frame latch value.",
                      "actionRequest": {
                        "holarchy": {
                          "sml": {
                            "actions": {
                              "frameLatch": {
                                "write": {
                                  "path": "~.frameLatch",
                                  "value": "whatever"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "harnessResponse": {
          "error": null,
          "result": {
            "harnessOptions": {
              "idempotent": true,
              "gitDiffHunkSize": 0
            },
            "harnessDispatch": {
              "54MiSgQdSiukMX4fIZJimg": {
                "uZN6-qpIQO6CkwmLDWtMCw": {
                  "opcToJSON": {
                    "id": "uZN6-qpIQO6CkwmLDWtMCw",
                    "name": "OPC Frame Latch Test #1",
                    "description": "Try to apply the Frame Latch OPM in an OPC system.",
                    "options": {
                      "evaluate": {
                        "maxFrames": 16,
                        "firstEvaluation": "constructor"
                      }
                    },
                    "opmMap": {
                      "z_mTe02hSWmaM1iRO1pBeA": {
                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                        "name": "Observable Frame Latch",
                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                        "opmDataSpec": {
                          "____label": "Observable Frame Latch",
                          "____types": "jsObject",
                          "____defaultValue": {},
                          "clock": {
                            "____accept": "jsBoolean",
                            "____defaultValue": false
                          }
                        },
                        "steps": {
                          "uninitialized": {
                            "description": "Default starting process step.",
                            "actions": {
                              "enter": [],
                              "exit": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "ocd": {
                                          "setBooleanFlag": {
                                            "path": "#.clock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "updated"
                              }
                            ]
                          },
                          "updated": {
                            "description": "The value managed by the frame latch has been written.",
                            "actions": {
                              "enter": [],
                              "exit": [
                                {
                                  "holarchy": {
                                    "sml": {
                                      "actions": {
                                        "ocd": {
                                          "clearBooleanFlag": {
                                            "path": "#.clock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "always": true
                                },
                                "nextStep": "waiting"
                              }
                            ]
                          },
                          "waiting": {
                            "description": "Frame latch value has not changed since last signalled update.",
                            "actions": {
                              "enter": [],
                              "exit": []
                            },
                            "transitions": [
                              {
                                "transitionIf": {
                                  "holarchy": {
                                    "sml": {
                                      "operators": {
                                        "ocd": {
                                          "isBooleanFlagSet": {
                                            "path": "#.clock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "nextStep": "updated"
                              }
                            ]
                          }
                        }
                      }
                    },
                    "opmiSpecPaths": [
                      {
                        "specPath": "~.frameLatch",
                        "opmiRef": {
                          "id": "z_mTe02hSWmaM1iRO1pBeA",
                          "name": "Observable Frame Latch",
                          "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                          "opmDataSpec": {
                            "____label": "Observable Frame Latch",
                            "____types": "jsObject",
                            "____defaultValue": {},
                            "clock": {
                              "____accept": "jsBoolean",
                              "____defaultValue": false
                            }
                          },
                          "steps": {
                            "uninitialized": {
                              "description": "Default starting process step.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "setBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            },
                            "updated": {
                              "description": "The value managed by the frame latch has been written.",
                              "actions": {
                                "enter": [],
                                "exit": [
                                  {
                                    "holarchy": {
                                      "sml": {
                                        "actions": {
                                          "ocd": {
                                            "clearBooleanFlag": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "always": true
                                  },
                                  "nextStep": "waiting"
                                }
                              ]
                            },
                            "waiting": {
                              "description": "Frame latch value has not changed since last signalled update.",
                              "actions": {
                                "enter": [],
                                "exit": []
                              },
                              "transitions": [
                                {
                                  "transitionIf": {
                                    "holarchy": {
                                      "sml": {
                                        "operators": {
                                          "ocd": {
                                            "isBooleanFlagSet": {
                                              "path": "#.clock"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "nextStep": "updated"
                                }
                              ]
                            }
                          }
                        }
                      }
                    ],
                    "ocdTemplateSpec": {
                      "____types": "jsObject",
                      "frameLatch": {
                        "____types": "jsObject",
                        "____appdsl": {
                          "opm": "z_mTe02hSWmaM1iRO1pBeA"
                        },
                        "value": {
                          "____accept": "jsString",
                          "____defaultValue": "default"
                        }
                      }
                    },
                    "ocdRuntimeSpec": {
                      "____label": "OPC [uZN6-qpIQO6CkwmLDWtMCw::OPC Frame Latch Test #1] Observable Controller Data Store",
                      "____description": "OPC [uZN6-qpIQO6CkwmLDWtMCw::OPC Frame Latch Test #1] system process runtime state data managed by OPC instance.",
                      "____types": "jsObject",
                      "____defaultValue": {},
                      "frameLatch": {
                        "____types": "jsObject",
                        "____appdsl": {
                          "opm": "z_mTe02hSWmaM1iRO1pBeA"
                        },
                        "value": {
                          "____accept": "jsString",
                          "____defaultValue": "default"
                        },
                        "____label": "Observable Frame Latch",
                        "____defaultValue": {},
                        "clock": {
                          "____accept": "jsBoolean",
                          "____defaultValue": false
                        },
                        "__opmiStep": {
                          "____accept": "jsString",
                          "____defaultValue": "uninitialized"
                        }
                      }
                    },
                    "ocdi": {
                      "frameLatch": {
                        "value": "default",
                        "clock": false,
                        "__opmiStep": "waiting"
                      }
                    },
                    "transitionDispatcher": {
                      "filterDescriptor": {
                        "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                        "operationName": "Discriminator Filter",
                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                        "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                      },
                      "supportedFilters": [
                        "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                        "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                        "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                        "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                        "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                        "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                        "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                        "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                        "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                        "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                      ],
                      "options": {
                        "action": "routeRequest"
                      }
                    },
                    "actionDispatcher": {
                      "filterDescriptor": {
                        "operationID": "XRL2clDypWnujvm5F4Qxcw",
                        "operationName": "Discriminator Filter",
                        "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                        "inputTypeVIID": "Emtl_sIwargrlHf-ni6OVA",
                        "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "outputTypeVIID": "z76sWWKra6W3aMdHS0Lbnw",
                        "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                        "operationVDID": "a0j0E0EJNVfXm47tn-EUtA"
                      },
                      "supportedFilters": [
                        "[5rFEDGLYRSiZCeChMnkCHQ::OCD Boolean Flag Set]",
                        "[KX0V_aQ3RzG01tzBS24MGw::OPC Intrinsic NOOP Action]",
                        "[S1GqYjTtSQazSxkIL9vtpA::OPC Intrinsic Status Action]",
                        "[TlGPCf7uSf2cZMGZCcU85A::DOM Client Location Proccessor: Initialize]",
                        "[Ve_kEFkGSMSgOqUWu9Yo_w::OCD Read Namespace Indirect]",
                        "[_yxWfFLnTqqN-UxRdd7W5w::OCD Boolean Flag Clear]",
                        "[d2vRmtn2QA6Ox8W4PwDWNA::d2r2/React Client Display Adaptor: Rehydrate]",
                        "[iyvk_9vhRn2qvrjOes5v7Q::Frame Latch: Write]",
                        "[peTmTek_SB64-ofd_PSGjg::DOM Client Location Processor: 'hashchange']"
                      ],
                      "options": {
                        "action": "routeRequest"
                      }
                    },
                    "opcActorStack": [],
                    "evalCount": 1,
                    "lastEvalResponse": {
                      "error": null,
                      "result": {
                        "evalNumber": 0,
                        "summary": {
                          "counts": {
                            "bindings": 3,
                            "frames": 3,
                            "errors": 0,
                            "transitions": 2
                          }
                        },
                        "evalFrames": [
                          {
                            "summary": {
                              "counts": {
                                "bindings": 1,
                                "transitions": 1,
                                "errors": 0
                              },
                              "reports": {
                                "transitions": [
                                  "rWatZg2xDbHwiPCI5s_mzw"
                                ],
                                "errors": []
                              }
                            },
                            "bindings": {
                              "rWatZg2xDbHwiPCI5s_mzw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.frameLatch",
                                    "specPath": "~.frameLatch"
                                  },
                                  "initialStep": "uninitialized",
                                  "opmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "name": "Observable Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "opmDataSpec": {
                                      "____label": "Observable Frame Latch",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "clock": {
                                        "____accept": "jsBoolean",
                                        "____defaultValue": false
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default starting process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      },
                                      "updated": {
                                        "description": "The value managed by the frame latch has been written.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "waiting"
                                          }
                                        ]
                                      },
                                      "waiting": {
                                        "description": "Frame latch value has not changed since last signalled update.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isBooleanFlagSet": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "updated",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "opmBindingPath": "~.frameLatch",
                                            "ocdi": {
                                              "frameLatch": {
                                                "value": "default",
                                                "clock": false,
                                                "__opmiStep": "waiting"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [
                                      {
                                        "request": {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "setBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null
                                        }
                                      }
                                    ],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "updated"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          },
                          {
                            "summary": {
                              "counts": {
                                "bindings": 1,
                                "transitions": 1,
                                "errors": 0
                              },
                              "reports": {
                                "transitions": [
                                  "rWatZg2xDbHwiPCI5s_mzw"
                                ],
                                "errors": []
                              }
                            },
                            "bindings": {
                              "rWatZg2xDbHwiPCI5s_mzw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.frameLatch",
                                    "specPath": "~.frameLatch"
                                  },
                                  "initialStep": "updated",
                                  "opmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "name": "Observable Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "opmDataSpec": {
                                      "____label": "Observable Frame Latch",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "clock": {
                                        "____accept": "jsBoolean",
                                        "____defaultValue": false
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default starting process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      },
                                      "updated": {
                                        "description": "The value managed by the frame latch has been written.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "waiting"
                                          }
                                        ]
                                      },
                                      "waiting": {
                                        "description": "Frame latch value has not changed since last signalled update.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isBooleanFlagSet": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "transitioned",
                                  "finishStep": "waiting",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "opmBindingPath": "~.frameLatch",
                                            "ocdi": {
                                              "frameLatch": {
                                                "value": "default",
                                                "clock": false,
                                                "__opmiStep": "waiting"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "always": true
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": true
                                        }
                                      }
                                    ],
                                    "p2_exit": [
                                      {
                                        "request": {
                                          "holarchy": {
                                            "sml": {
                                              "actions": {
                                                "ocd": {
                                                  "clearBooleanFlag": {
                                                    "path": "#.clock"
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null
                                        }
                                      }
                                    ],
                                    "p3_enter": [],
                                    "p4_finalize": {
                                      "error": null,
                                      "result": "waiting"
                                    }
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          },
                          {
                            "summary": {
                              "counts": {
                                "bindings": 1,
                                "transitions": 0,
                                "errors": 0
                              },
                              "reports": {
                                "transitions": [],
                                "errors": []
                              }
                            },
                            "bindings": {
                              "rWatZg2xDbHwiPCI5s_mzw": {
                                "evalRequest": {
                                  "dataBinding": {
                                    "dataPath": "~.frameLatch",
                                    "specPath": "~.frameLatch"
                                  },
                                  "initialStep": "waiting",
                                  "opmRef": {
                                    "id": "z_mTe02hSWmaM1iRO1pBeA",
                                    "name": "Observable Frame Latch",
                                    "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                    "opmDataSpec": {
                                      "____label": "Observable Frame Latch",
                                      "____types": "jsObject",
                                      "____defaultValue": {},
                                      "clock": {
                                        "____accept": "jsBoolean",
                                        "____defaultValue": false
                                      }
                                    },
                                    "steps": {
                                      "uninitialized": {
                                        "description": "Default starting process step.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "setBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      },
                                      "updated": {
                                        "description": "The value managed by the frame latch has been written.",
                                        "actions": {
                                          "enter": [],
                                          "exit": [
                                            {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "always": true
                                            },
                                            "nextStep": "waiting"
                                          }
                                        ]
                                      },
                                      "waiting": {
                                        "description": "Frame latch value has not changed since last signalled update.",
                                        "actions": {
                                          "enter": [],
                                          "exit": []
                                        },
                                        "transitions": [
                                          {
                                            "transitionIf": {
                                              "holarchy": {
                                                "sml": {
                                                  "operators": {
                                                    "ocd": {
                                                      "isBooleanFlagSet": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "nextStep": "updated"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                },
                                "evalResponse": {
                                  "status": "noop",
                                  "finishStep": "waiting",
                                  "phases": {
                                    "p1_toperator": [
                                      {
                                        "request": {
                                          "context": {
                                            "opmBindingPath": "~.frameLatch",
                                            "ocdi": {
                                              "frameLatch": {
                                                "value": "default",
                                                "clock": false,
                                                "__opmiStep": "waiting"
                                              }
                                            },
                                            "transitionDispatcher": {
                                              "filterDescriptor": {
                                                "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                                                "operationName": "Discriminator Filter",
                                                "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                                                "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                                                "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                                              },
                                              "supportedFilters": [
                                                "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                              ],
                                              "options": {
                                                "action": "routeRequest"
                                              }
                                            }
                                          },
                                          "operatorRequest": {
                                            "holarchy": {
                                              "sml": {
                                                "operators": {
                                                  "ocd": {
                                                    "isBooleanFlagSet": {
                                                      "path": "#.clock"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "response": {
                                          "error": null,
                                          "result": false
                                        }
                                      }
                                    ],
                                    "p2_exit": [],
                                    "p3_enter": [],
                                    "p4_finalize": null
                                  },
                                  "errors": {
                                    "p1_toperator": 0,
                                    "p2_exit": 0,
                                    "p3_enter": 0,
                                    "p4_finalize": 0,
                                    "total": 0
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "constructionWarnings": []
                  },
                  "actionEvaluations": [
                    {
                      "actRequest": {
                        "actorName": "uZN6-qpIQO6CkwmLDWtMCw test action call",
                        "actorDescription": "A simple attempt to set a frame latch value.",
                        "actionRequest": {
                          "holarchy": {
                            "sml": {
                              "actions": {
                                "frameLatch": {
                                  "write": {
                                    "path": "~.frameLatch",
                                    "value": "whatever"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "actResponse": {
                        "error": null,
                        "result": {
                          "actionResult": "whatever",
                          "lastEvaluation": {
                            "evalNumber": 1,
                            "summary": {
                              "counts": {
                                "bindings": 3,
                                "frames": 3,
                                "errors": 0,
                                "transitions": 2
                              }
                            },
                            "evalFrames": [
                              {
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "transitions": 1,
                                    "errors": 0
                                  },
                                  "reports": {
                                    "transitions": [
                                      "rWatZg2xDbHwiPCI5s_mzw"
                                    ],
                                    "errors": []
                                  }
                                },
                                "bindings": {
                                  "rWatZg2xDbHwiPCI5s_mzw": {
                                    "evalRequest": {
                                      "dataBinding": {
                                        "dataPath": "~.frameLatch",
                                        "specPath": "~.frameLatch"
                                      },
                                      "initialStep": "waiting",
                                      "opmRef": {
                                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                                        "name": "Observable Frame Latch",
                                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                        "opmDataSpec": {
                                          "____label": "Observable Frame Latch",
                                          "____types": "jsObject",
                                          "____defaultValue": {},
                                          "clock": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          }
                                        },
                                        "steps": {
                                          "uninitialized": {
                                            "description": "Default starting process step.",
                                            "actions": {
                                              "enter": [],
                                              "exit": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "setBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "always": true
                                                },
                                                "nextStep": "updated"
                                              }
                                            ]
                                          },
                                          "updated": {
                                            "description": "The value managed by the frame latch has been written.",
                                            "actions": {
                                              "enter": [],
                                              "exit": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "clearBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "always": true
                                                },
                                                "nextStep": "waiting"
                                              }
                                            ]
                                          },
                                          "waiting": {
                                            "description": "Frame latch value has not changed since last signalled update.",
                                            "actions": {
                                              "enter": [],
                                              "exit": []
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isBooleanFlagSet": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "nextStep": "updated"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "evalResponse": {
                                      "status": "transitioned",
                                      "finishStep": "updated",
                                      "phases": {
                                        "p1_toperator": [
                                          {
                                            "request": {
                                              "context": {
                                                "opmBindingPath": "~.frameLatch",
                                                "ocdi": {
                                                  "frameLatch": {
                                                    "value": "whatever",
                                                    "clock": false,
                                                    "__opmiStep": "waiting"
                                                  }
                                                },
                                                "transitionDispatcher": {
                                                  "filterDescriptor": {
                                                    "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                                                    "operationName": "Discriminator Filter",
                                                    "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                    "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                                                    "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                    "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                                                    "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                    "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                                                  },
                                                  "supportedFilters": [
                                                    "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                    "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                    "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                    "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                    "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                    "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                    "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                    "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                    "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                    "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                  ],
                                                  "options": {
                                                    "action": "routeRequest"
                                                  }
                                                }
                                              },
                                              "operatorRequest": {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isBooleanFlagSet": {
                                                          "path": "#.clock"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "response": {
                                              "error": null,
                                              "result": true
                                            }
                                          }
                                        ],
                                        "p2_exit": [],
                                        "p3_enter": [],
                                        "p4_finalize": {
                                          "error": null,
                                          "result": "updated"
                                        }
                                      },
                                      "errors": {
                                        "p1_toperator": 0,
                                        "p2_exit": 0,
                                        "p3_enter": 0,
                                        "p4_finalize": 0,
                                        "total": 0
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "transitions": 1,
                                    "errors": 0
                                  },
                                  "reports": {
                                    "transitions": [
                                      "rWatZg2xDbHwiPCI5s_mzw"
                                    ],
                                    "errors": []
                                  }
                                },
                                "bindings": {
                                  "rWatZg2xDbHwiPCI5s_mzw": {
                                    "evalRequest": {
                                      "dataBinding": {
                                        "dataPath": "~.frameLatch",
                                        "specPath": "~.frameLatch"
                                      },
                                      "initialStep": "updated",
                                      "opmRef": {
                                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                                        "name": "Observable Frame Latch",
                                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                        "opmDataSpec": {
                                          "____label": "Observable Frame Latch",
                                          "____types": "jsObject",
                                          "____defaultValue": {},
                                          "clock": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          }
                                        },
                                        "steps": {
                                          "uninitialized": {
                                            "description": "Default starting process step.",
                                            "actions": {
                                              "enter": [],
                                              "exit": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "setBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "always": true
                                                },
                                                "nextStep": "updated"
                                              }
                                            ]
                                          },
                                          "updated": {
                                            "description": "The value managed by the frame latch has been written.",
                                            "actions": {
                                              "enter": [],
                                              "exit": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "clearBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "always": true
                                                },
                                                "nextStep": "waiting"
                                              }
                                            ]
                                          },
                                          "waiting": {
                                            "description": "Frame latch value has not changed since last signalled update.",
                                            "actions": {
                                              "enter": [],
                                              "exit": []
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isBooleanFlagSet": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "nextStep": "updated"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "evalResponse": {
                                      "status": "transitioned",
                                      "finishStep": "waiting",
                                      "phases": {
                                        "p1_toperator": [
                                          {
                                            "request": {
                                              "context": {
                                                "opmBindingPath": "~.frameLatch",
                                                "ocdi": {
                                                  "frameLatch": {
                                                    "value": "whatever",
                                                    "clock": false,
                                                    "__opmiStep": "waiting"
                                                  }
                                                },
                                                "transitionDispatcher": {
                                                  "filterDescriptor": {
                                                    "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                                                    "operationName": "Discriminator Filter",
                                                    "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                    "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                                                    "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                    "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                                                    "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                    "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                                                  },
                                                  "supportedFilters": [
                                                    "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                    "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                    "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                    "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                    "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                    "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                    "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                    "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                    "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                    "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                  ],
                                                  "options": {
                                                    "action": "routeRequest"
                                                  }
                                                }
                                              },
                                              "operatorRequest": {
                                                "always": true
                                              }
                                            },
                                            "response": {
                                              "error": null,
                                              "result": true
                                            }
                                          }
                                        ],
                                        "p2_exit": [
                                          {
                                            "request": {
                                              "holarchy": {
                                                "sml": {
                                                  "actions": {
                                                    "ocd": {
                                                      "clearBooleanFlag": {
                                                        "path": "#.clock"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "response": {
                                              "error": null
                                            }
                                          }
                                        ],
                                        "p3_enter": [],
                                        "p4_finalize": {
                                          "error": null,
                                          "result": "waiting"
                                        }
                                      },
                                      "errors": {
                                        "p1_toperator": 0,
                                        "p2_exit": 0,
                                        "p3_enter": 0,
                                        "p4_finalize": 0,
                                        "total": 0
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "summary": {
                                  "counts": {
                                    "bindings": 1,
                                    "transitions": 0,
                                    "errors": 0
                                  },
                                  "reports": {
                                    "transitions": [],
                                    "errors": []
                                  }
                                },
                                "bindings": {
                                  "rWatZg2xDbHwiPCI5s_mzw": {
                                    "evalRequest": {
                                      "dataBinding": {
                                        "dataPath": "~.frameLatch",
                                        "specPath": "~.frameLatch"
                                      },
                                      "initialStep": "waiting",
                                      "opmRef": {
                                        "id": "z_mTe02hSWmaM1iRO1pBeA",
                                        "name": "Observable Frame Latch",
                                        "description": "Frame latch provides a way to create a value and attach a model that transitions between waiting and updated process steps whenever the value is written. This allows consumers of the value (other OPM typically) to monitor frame latch process to know when the value is updated so that they can read the new value and do whatever they need to with it.",
                                        "opmDataSpec": {
                                          "____label": "Observable Frame Latch",
                                          "____types": "jsObject",
                                          "____defaultValue": {},
                                          "clock": {
                                            "____accept": "jsBoolean",
                                            "____defaultValue": false
                                          }
                                        },
                                        "steps": {
                                          "uninitialized": {
                                            "description": "Default starting process step.",
                                            "actions": {
                                              "enter": [],
                                              "exit": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "setBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "always": true
                                                },
                                                "nextStep": "updated"
                                              }
                                            ]
                                          },
                                          "updated": {
                                            "description": "The value managed by the frame latch has been written.",
                                            "actions": {
                                              "enter": [],
                                              "exit": [
                                                {
                                                  "holarchy": {
                                                    "sml": {
                                                      "actions": {
                                                        "ocd": {
                                                          "clearBooleanFlag": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "always": true
                                                },
                                                "nextStep": "waiting"
                                              }
                                            ]
                                          },
                                          "waiting": {
                                            "description": "Frame latch value has not changed since last signalled update.",
                                            "actions": {
                                              "enter": [],
                                              "exit": []
                                            },
                                            "transitions": [
                                              {
                                                "transitionIf": {
                                                  "holarchy": {
                                                    "sml": {
                                                      "operators": {
                                                        "ocd": {
                                                          "isBooleanFlagSet": {
                                                            "path": "#.clock"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "nextStep": "updated"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "evalResponse": {
                                      "status": "noop",
                                      "finishStep": "waiting",
                                      "phases": {
                                        "p1_toperator": [
                                          {
                                            "request": {
                                              "context": {
                                                "opmBindingPath": "~.frameLatch",
                                                "ocdi": {
                                                  "frameLatch": {
                                                    "value": "whatever",
                                                    "clock": false,
                                                    "__opmiStep": "waiting"
                                                  }
                                                },
                                                "transitionDispatcher": {
                                                  "filterDescriptor": {
                                                    "operationID": "3vrG6NddzzKSMlEOxmNMFw",
                                                    "operationName": "Discriminator Filter",
                                                    "operationDescription": "Routes the request to one of N subfilters based on request signature analysis.",
                                                    "inputTypeVIID": "zCofp69CPdYRnFaU8CZKRQ",
                                                    "inputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                    "outputTypeVIID": "6X9HLGqRl2U0ElygkBKqIw",
                                                    "outputTypeVDID": "dHR0dNnZ2dlUVFRUyMjIyA",
                                                    "operationVDID": "0fz0E2xONVdNno7tx1QUtA"
                                                  },
                                                  "supportedFilters": [
                                                    "[0JIva4IFSm6Xm7i38g8uUA::OR Transition Expression Operator]",
                                                    "[9tNY7o5GTUGH_xda2GhP-w::OPM In Step Expression Operator]",
                                                    "[TLSHkl73SO-utuzM7dyN2g::NOT Transition Expression Operator]",
                                                    "[UeLs9PcASwuC7KR190eYhA::OCD Boolean Flag Is Set]",
                                                    "[XxX_a1sQS1OlJbWAYfx6tQ::OCD Namespace Is Less Than Value]",
                                                    "[YgABX95wR86GCYrYaDLISA::AND Transition Expression Operator]",
                                                    "[e89cwnP4Qd6MocAhzdOJgw::Always returns Boolean true unconditionally.]",
                                                    "[ggsavKiARsq7rjwn-lxdfA::OCD Namespace Is Greater Than Value]",
                                                    "[k7THIKKDQMKOac1Rxh9tEQ::OCD Namespace Is Identical To Value]",
                                                    "[kD1PcgqYQlm7fJatNG2ZsA::OCD Namespace Is Truthy]"
                                                  ],
                                                  "options": {
                                                    "action": "routeRequest"
                                                  }
                                                }
                                              },
                                              "operatorRequest": {
                                                "holarchy": {
                                                  "sml": {
                                                    "operators": {
                                                      "ocd": {
                                                        "isBooleanFlagSet": {
                                                          "path": "#.clock"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "response": {
                                              "error": null,
                                              "result": false
                                            }
                                          }
                                        ],
                                        "p2_exit": [],
                                        "p3_enter": [],
                                        "p4_finalize": null
                                      },
                                      "errors": {
                                        "p1_toperator": 0,
                                        "p2_exit": 0,
                                        "p3_enter": 0,
                                        "p4_finalize": 0,
                                        "total": 0
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}
